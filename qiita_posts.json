[
    {
        "rendered_body": "<p data-sourcepos=\"1:1-1:27\">※オチはありません</p>\n<h2 data-sourcepos=\"3:1-3:15\">\n<span id=\"対象読者\" class=\"fragment\"></span><a href=\"#%E5%AF%BE%E8%B1%A1%E8%AA%AD%E8%80%85\"><i class=\"fa fa-link\"></i></a>対象読者</h2>\n<ul data-sourcepos=\"4:1-6:0\">\n<li data-sourcepos=\"4:1-4:56\">独学でプログラミングを勉強している方</li>\n<li data-sourcepos=\"5:1-6:0\">一人でコードを書くのが不安な方</li>\n</ul>\n<h2 data-sourcepos=\"7:1-7:24\">\n<span id=\"本稿でやること\" class=\"fragment\"></span><a href=\"#%E6%9C%AC%E7%A8%BF%E3%81%A7%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>本稿でやること</h2>\n<ul data-sourcepos=\"8:1-9:0\">\n<li data-sourcepos=\"8:1-9:0\">ChatGPT先生とペアプロしている様子を公開</li>\n</ul>\n<h2 data-sourcepos=\"10:1-10:30\">\n<span id=\"本稿でやらないこと\" class=\"fragment\"></span><a href=\"#%E6%9C%AC%E7%A8%BF%E3%81%A7%E3%82%84%E3%82%89%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>本稿でやらないこと</h2>\n<ul data-sourcepos=\"11:1-14:0\">\n<li data-sourcepos=\"11:1-11:21\">ChatGPTの使い方</li>\n<li data-sourcepos=\"12:1-12:27\">ChatGPTの概要とか話</li>\n<li data-sourcepos=\"13:1-14:0\">オチを作る</li>\n</ul>\n<h2 data-sourcepos=\"15:1-15:9\">\n<span id=\"本題\" class=\"fragment\"></span><a href=\"#%E6%9C%AC%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>本題</h2>\n<p data-sourcepos=\"16:1-16:121\"><a href=\"https://camo.qiitausercontent.com/16d448edda6e8706b0488f5187742bcfbd5a1f6f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3132323830302f30623537653736332d383937632d356463312d366434382d3130643038323465376363312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F122800%2F0b57e763-897c-5dc1-6d48-10d0824e7cc1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=701373dd473399079d5f829bd15ee9c5\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/0b57e763-897c-5dc1-6d48-10d0824e7cc1.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F122800%2F0b57e763-897c-5dc1-6d48-10d0824e7cc1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9270c5e00b75b2180d34ab0e362161bf 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"18:1-18:36\">（コードが長いので中略）</p>\n<p data-sourcepos=\"20:1-23:121\"><a href=\"https://camo.qiitausercontent.com/2e306ae6696a8f5e88bdaa796ffb68297b833b58/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3132323830302f39383137363035382d346334622d336661392d396263382d3532316461343739336164312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F122800%2F98176058-4c4b-3fa9-9bc8-521da4793ad1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f9d3086615ae9a63ec154e779b4f2d7d\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/98176058-4c4b-3fa9-9bc8-521da4793ad1.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F122800%2F98176058-4c4b-3fa9-9bc8-521da4793ad1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=caceb5bceed41c6de20058d6c79c5a76 1x\" loading=\"lazy\"></a><br>\n<a href=\"https://camo.qiitausercontent.com/19be4d86f2de2848d3d50592f945ba82ad581edd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3132323830302f35666434373031342d333833392d353939392d323638622d3462663532343334623539392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F122800%2F5fd47014-3839-5999-268b-4bf52434b599.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=728c03a54f7c1e2da147d5a15bb1d030\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/5fd47014-3839-5999-268b-4bf52434b599.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F122800%2F5fd47014-3839-5999-268b-4bf52434b599.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=70bc9449a3f6463f356a7cf3c56685e9 1x\" loading=\"lazy\"></a><br>\n<a href=\"https://camo.qiitausercontent.com/c347f7810c5a5cc34ea68ae11e0d642a58686ad0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3132323830302f65373731616431352d363832622d663863642d663637622d6431316565303662623139362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F122800%2Fe771ad15-682b-f8cd-f67b-d11ee06bb196.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d58b6638071e3d94214dcce3ab937938\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/e771ad15-682b-f8cd-f67b-d11ee06bb196.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F122800%2Fe771ad15-682b-f8cd-f67b-d11ee06bb196.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5cb01e94c8683fb135bd9c30699961fe 1x\" loading=\"lazy\"></a><br>\n<a href=\"https://camo.qiitausercontent.com/dc0dd3aa63a98006e513b8b3ea845baad0b4a05f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3132323830302f37363435613539342d393662382d623936622d633132632d3934313138636161353239632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F122800%2F7645a594-96b8-b96b-c12c-94118caa529c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6aafe873e5accfb644d13474745df874\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/7645a594-96b8-b96b-c12c-94118caa529c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F122800%2F7645a594-96b8-b96b-c12c-94118caa529c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=28bdea80f56ba859f3c469b9d765209e 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"25:1-26:99\">私が２時間ぐらい掛けて悩んだクソコードを、デバッグ時間含め10分ぐらい会話するだけでめちゃくちゃシンプルにしてくれました！<br>\n各処理をワンライナーで書いているので、こんなお願いをしてみました。</p>\n<p data-sourcepos=\"28:1-28:121\"><a href=\"https://camo.qiitausercontent.com/2c829f606a1213d793b0d4032758ab0659e44279/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3132323830302f33646639383561632d303862642d323938312d363262662d3732336232623063626337382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F122800%2F3df985ac-08bd-2981-62bf-723b2b0cbc78.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e98df40829830e3892ec35c2c8ee05d9\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/3df985ac-08bd-2981-62bf-723b2b0cbc78.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F122800%2F3df985ac-08bd-2981-62bf-723b2b0cbc78.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=242b5be7bc33b00686a7b809e3e908b8 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"30:1-32:70\">後でメンテナンスする人＝私にも嬉しいサポート付き！<br>\nこのコメントの書き方は参考になる方も多いかもしれませんが、コメントの内容はコードを見れば分かるじゃん！と思ったので、より実務的な意味に修正が必要ですね。<br>\nそこまでChatGPTに頼るな、という話ではありますが。</p>\n<h2 data-sourcepos=\"34:1-34:91\">\n<span id=\"プログラミングの勉強はgoogle先生とchatgpt先生に質問してみよう\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%AE%E5%8B%89%E5%BC%B7%E3%81%AFgoogle%E5%85%88%E7%94%9F%E3%81%A8chatgpt%E5%85%88%E7%94%9F%E3%81%AB%E8%B3%AA%E5%95%8F%E3%81%97%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\"><i class=\"fa fa-link\"></i></a>プログラミングの勉強はGoogle先生とChatGPT先生に質問してみよう！</h2>\n<p data-sourcepos=\"35:1-37:84\">一応、私の立場（ITスクール講師）としては、あなたが目指している業界の実務経験者にも質問などなど訊いてほしいなー、とは思いますが、なかなかレスポンスが難しいタイミングもあるので、こういったツールはガンガン活用していくと良いです。<br>\n最終的なコードレビューは講師にもお願いしてみると、現場で流した血と汗と涙が混じった意見がもらえると思います。<br>\n私が教鞭を執るときはより一層、気をつけようと思いました。</p>\n<h3 data-sourcepos=\"39:1-39:10\">\n<span id=\"私信\" class=\"fragment\"></span><a href=\"#%E7%A7%81%E4%BF%A1\"><i class=\"fa fa-link\"></i></a>私信</h3>\n<p data-sourcepos=\"40:1-41:202\">業界の相談や履歴書の添削をしてほしいという要望を多くいただきますが、そういった相談もChatGPTに投げてみると面白いかもしれません。<br>\n私もですが、ChatGPTに相談しても受かるかどうかは時の運・担当者との相性だったり色々な要因があるので確約しかねますが、気は晴れると思います。</p>\n<h2 data-sourcepos=\"44:1-44:9\">\n<span id=\"追記\" class=\"fragment\"></span><a href=\"#%E8%BF%BD%E8%A8%98\"><i class=\"fa fa-link\"></i></a>追記</h2>\n<p data-sourcepos=\"45:1-46:180\">ChatGPTにこの記事の添削をお願いしたんですが、全体的に評価するのは難しいようです。（「An error occurred. If this issue persists please contact us through our help center at help.openai.com.」システムリソースの問題？）<br>\n先程のコードもそうですが、小さい枠組みだとできるみたいなので、質問は具体的に、少しずつ話題を区切ってすると良さそうです。</p>\n<h2 data-sourcepos=\"48:1-48:9\">\n<span id=\"疑問\" class=\"fragment\"></span><a href=\"#%E7%96%91%E5%95%8F\"><i class=\"fa fa-link\"></i></a>疑問</h2>\n<p data-sourcepos=\"49:1-51:159\">リファクタリングの精度がだいぶ低いように思います。<br>\n汚いコードで溢れていたのでリファクタリングをやらせてみたんですが、そのほとんどが使い物になりませんでした。<br>\n完璧な精度ではないのは人間っぽいなぁ、なんて変な感心をしましたが業務だと困るので、今後に期待したいですね。</p>\n<p data-sourcepos=\"53:1-54:108\">あるいは、必要な情報が少ないために解釈を勘違いしたケースはあるかもしれません。<br>\n我々ユーザー側が質問の精度を上げる努力をする必要があるかもしれませんね。</p>\n",
        "body": "※オチはありません\n\n## 対象読者\n- 独学でプログラミングを勉強している方\n- 一人でコードを書くのが不安な方\n\n## 本稿でやること\n- ChatGPT先生とペアプロしている様子を公開\n\n## 本稿でやらないこと\n- ChatGPTの使い方\n- ChatGPTの概要とか話\n- オチを作る\n\n## 本題\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/0b57e763-897c-5dc1-6d48-10d0824e7cc1.png)\n\n（コードが長いので中略）\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/98176058-4c4b-3fa9-9bc8-521da4793ad1.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/5fd47014-3839-5999-268b-4bf52434b599.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/e771ad15-682b-f8cd-f67b-d11ee06bb196.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/7645a594-96b8-b96b-c12c-94118caa529c.png)\n\n私が２時間ぐらい掛けて悩んだクソコードを、デバッグ時間含め10分ぐらい会話するだけでめちゃくちゃシンプルにしてくれました！\n各処理をワンライナーで書いているので、こんなお願いをしてみました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/3df985ac-08bd-2981-62bf-723b2b0cbc78.png)\n\n後でメンテナンスする人＝私にも嬉しいサポート付き！\nこのコメントの書き方は参考になる方も多いかもしれませんが、コメントの内容はコードを見れば分かるじゃん！と思ったので、より実務的な意味に修正が必要ですね。\nそこまでChatGPTに頼るな、という話ではありますが。\n\n## プログラミングの勉強はGoogle先生とChatGPT先生に質問してみよう！\n一応、私の立場（ITスクール講師）としては、あなたが目指している業界の実務経験者にも質問などなど訊いてほしいなー、とは思いますが、なかなかレスポンスが難しいタイミングもあるので、こういったツールはガンガン活用していくと良いです。\n最終的なコードレビューは講師にもお願いしてみると、現場で流した血と汗と涙が混じった意見がもらえると思います。\n私が教鞭を執るときはより一層、気をつけようと思いました。\n\n### 私信\n業界の相談や履歴書の添削をしてほしいという要望を多くいただきますが、そういった相談もChatGPTに投げてみると面白いかもしれません。\n私もですが、ChatGPTに相談しても受かるかどうかは時の運・担当者との相性だったり色々な要因があるので確約しかねますが、気は晴れると思います。\n\n\n## 追記\nChatGPTにこの記事の添削をお願いしたんですが、全体的に評価するのは難しいようです。（「An error occurred. If this issue persists please contact us through our help center at help.openai.com.」システムリソースの問題？）\n先程のコードもそうですが、小さい枠組みだとできるみたいなので、質問は具体的に、少しずつ話題を区切ってすると良さそうです。\n\n## 疑問\nリファクタリングの精度がだいぶ低いように思います。\n汚いコードで溢れていたのでリファクタリングをやらせてみたんですが、そのほとんどが使い物になりませんでした。\n完璧な精度ではないのは人間っぽいなぁ、なんて変な感心をしましたが業務だと困るので、今後に期待したいですね。\n\nあるいは、必要な情報が少ないために解釈を勘違いしたケースはあるかもしれません。\n我々ユーザー側が質問の精度を上げる努力をする必要があるかもしれませんね。\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2023-02-08T12:26:03+09:00",
        "group": null,
        "id": "6fabcc804184a664886f",
        "likes_count": 2,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 1,
        "tags": [
            {
                "name": "ペアプログラミング",
                "versions": []
            },
            {
                "name": "独学",
                "versions": []
            },
            {
                "name": "ChatGPT",
                "versions": []
            }
        ],
        "title": "ChatGPT先生と一緒にペアプロしてみた",
        "updated_at": "2023-02-08T16:54:49+09:00",
        "url": "https://qiita.com/nomurasan/items/6fabcc804184a664886f",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 1307,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<p data-sourcepos=\"1:1-2:66\">元々は違う記事にしようとしていたところを「こっちのが面白いのでは？」というお話があったので採用しました。<br>\n試しに使ってみて、良い方を採用してください。</p>\n<h2 data-sourcepos=\"4:1-4:42\">\n<span id=\"ハードウェア編周辺装置\" class=\"fragment\"></span><a href=\"#%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A7%E3%82%A2%E7%B7%A8%E5%91%A8%E8%BE%BA%E8%A3%85%E7%BD%AE\"><i class=\"fa fa-link\"></i></a>ハードウェア編（周辺装置）</h2>\n<p data-sourcepos=\"5:1-7:63\">マシンスペックは高い方がいいので、予算と相談してください。<br>\n予算いくらで開発マシン（画像処理の有無）を組む事が多いと思うので、時価や店舗の在庫には注意しましょう。<br>\nそのため、ここで取り上げるのが難しいです。</p>\n<p data-sourcepos=\"9:1-12:84\">なお、モニターなんかは完全に好みの領域です。<br>\n普段使いは横に広く、エディタや資料閲覧用で使うなら縦に広く使う事をおすすめします。<br>\nモニターアームで上下左右や角度もつけられると、開発場所も比較的自由に設定できます。<br>\nモニターについては、家具や部屋の間取りと相談しましょう。</p>\n<p data-sourcepos=\"14:1-14:60\">このように、ハードウェアも拘れば沼です。</p>\n<h3 data-sourcepos=\"16:1-16:34\">\n<span id=\"フットコントローラー\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%83%83%E3%83%88%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>フットコントローラー</h3>\n<p data-sourcepos=\"17:1-18:84\">開発中に足が暇な方、非常に勿体ないです。<br>\nせっかくなら足も働かせて、頭の回転を上げていきましょう。</p>\n<p data-sourcepos=\"20:1-25:351\">よく使われるのが○連（代替は3,4連）ですが、よく使うのはアンドゥ・リドゥぐらいなのでボタン数が多くなると単純に反応がなくて困惑するだけです。<br>\nマウスだと多くても困りませんが、フットボタンは多いと困ります。<br>\n車の運転で言えばクラッチのオートマチックとマニュアルの違いを想像してもらえば分かりやすいと思います。<br>\n一番良いのは、USB1端子の1ボタンを2台置いて左右で使い分けるのと、この時に買うものはボタンの大きさや触感、踏み心地が異なるものであった方が良いです。<br>\nなぜなら、圧倒的にアンドゥの使用回数が多いため、常に左足・右足だけで踏み続けるのが辛くなるからです。<br>\nそして、これはあるあるというか慣れればそういうものだと思えるようになりますが、フットコントローラーはマウスやらキーボード以上に壊れやすい（個人差あり？）ため、安かろう悪かろうで使い心地の良いものを見つける楽しみを見出していきましょう。</p>\n<p data-sourcepos=\"27:1-28:132\">参考までに、昔使っていたものを紹介しようと思っていたんですが、シリーズが既に取り扱い終了になってしまっていたため、出せるものがないです。<br>\n今はフットコントローラーは後述のサプライ品が優秀なので使わなくなったというのもあります。</p>\n<p data-sourcepos=\"30:1-30:157\">因みに、steamなどでレースゲームを遊ぶ時にも使えるので、steamアカウントを持っている場合は使ってみてください。</p>\n<h3 data-sourcepos=\"32:1-32:58\">\n<span id=\"テンキー型のファンクションキーボード\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%83%B3%E3%82%AD%E3%83%BC%E5%9E%8B%E3%81%AE%E3%83%95%E3%82%A1%E3%83%B3%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>テンキー型のファンクションキーボード</h3>\n<p data-sourcepos=\"33:1-38:132\">フットコントローラーに変わるものです。<br>\nFPSゲーマーには御用達ですが、プログラミングでの用途を考えるならフットコントローラーほどは使いにくいです。<br>\nというのも、手は既に両腕ともに塞がっている可能性が高いからです。<br>\nキーボードを片手で操る方なら良いかもしれませんが、レアケースだと思います。<br>\nわざわざファンクションキーボードのためにワンハンドスタイルに切り替えるのも辛いです。<br>\n（ワンハンドスタイルで高速タイピングが出来たらカッコいいよね！という意見には同調します）</p>\n<p data-sourcepos=\"40:1-42:195\">ただし、フットコントローラーと違ってきちんと目に見える場所で操作ができるので、こちらはシンプルより高機能の方が扱いやすいです。<br>\n問題は、高機能＝使いやすいとは限らない事です。代表としては「そんなに設定するファンクションある？」ですね。<br>\n「利便性のうち、操作のしやすさ（シンプルさ）と機能性（多機能）はトレードオフ」だと考えておくと失敗を避けやすくなる傾向があります。</p>\n<h3 data-sourcepos=\"44:1-44:55\">\n<span id=\"マウスジェスチャーがしやすいマウス\" class=\"fragment\"></span><a href=\"#%E3%83%9E%E3%82%A6%E3%82%B9%E3%82%B8%E3%82%A7%E3%82%B9%E3%83%81%E3%83%A3%E3%83%BC%E3%81%8C%E3%81%97%E3%82%84%E3%81%99%E3%81%84%E3%83%9E%E3%82%A6%E3%82%B9\"><i class=\"fa fa-link\"></i></a>マウスジェスチャーがしやすいマウス</h3>\n<p data-sourcepos=\"45:1-48:99\">安いマウスより高機能マウスの方が使いやすいと感じる事が多くなった方は多いと思います。<br>\nマウスの仕事に左クリック、右クリック・縦スクロール以外の操作が出来るようになったからですね。<br>\n特に恩恵が大きいのは、横スクロール機能が出来たり、マウスでアンドゥ・リドゥができるファンクションボタンがついたりですね。<br>\n参考までに、<a href=\"https://amzn.to/3WWQEpR\" rel=\"nofollow noopener\" target=\"_blank\">私が愛用しているマウス</a>を紹介します。</p>\n<p data-sourcepos=\"50:1-50:851\"><a href=\"https://www.amazon.co.jp/%E3%82%B5%E3%83%B3%E3%83%AF%E3%82%B5%E3%83%97%E3%83%A9%E3%82%A4-%E3%83%AF%E3%82%A4%E3%83%A4%E3%83%AC%E3%82%B9%E3%82%A8%E3%83%AB%E3%82%B4%E3%83%8E%E3%83%9F%E3%82%AF%E3%82%B9%E3%83%9E%E3%82%A6%E3%82%B9-%E8%85%B1%E9%9E%98%E7%82%8E%E9%98%B2%E6%AD%A2-%E3%83%AC%E3%83%BC%E3%82%B6%E3%83%BC-MA-ERGW6/dp/B009OV7ZU4?th=1&amp;linkCode=li3&amp;tag=anets-22&amp;linkId=7bb779f5d6dd3afb96c4e89fd6544efe&amp;language=ja_JP&amp;ref_=as_li_ss_il\" rel=\"nofollow noopener\" target=\"_blank\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fws-fe.amazon-adsystem.com%2Fwidgets%2Fq%3F_encoding%3DUTF8%26ASIN%3DB009OV7ZU4%26Format%3D_SL250_%26ID%3DAsinImage%26MarketPlace%3DJP%26ServiceVersion%3D20070822%26WS%3D1%26tag%3Danets-22%26language%3Dja_JP?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=62e139f0ce9ea3c23142ee33e4defd77\" data-canonical-src=\"//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B009OV7ZU4&amp;Format=_SL250_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=anets-22&amp;language=ja_JP\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fws-fe.amazon-adsystem.com%2Fwidgets%2Fq%3F_encoding%3DUTF8%26ASIN%3DB009OV7ZU4%26Format%3D_SL250_%26ID%3DAsinImage%26MarketPlace%3DJP%26ServiceVersion%3D20070822%26WS%3D1%26tag%3Danets-22%26language%3Dja_JP?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6597cc1b3261c0406bea2907bb63b697 1x\" loading=\"lazy\"></a><a href=\"https://camo.qiitausercontent.com/18f37d0d6a7ec6d878e9b3ea97b0b2bb16232cec/68747470733a2f2f69722d6a702e616d617a6f6e2d616473797374656d2e636f6d2f652f69723f743d616e6574732d3232266c616e67756167653d6a615f4a50266c3d6c6933266f3d3926613d423030394f56375a5534\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://ir-jp.amazon-adsystem.com/e/ir?t=anets-22&amp;language=ja_JP&amp;l=li3&amp;o=9&amp;a=B009OV7ZU4\" width=\"1\" height=\"1\" alt=\"\" data-canonical-src=\"https://ir-jp.amazon-adsystem.com/e/ir?t=anets-22&amp;language=ja_JP&amp;l=li3&amp;o=9&amp;a=B009OV7ZU4\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"52:1-54:138\">こちらのおかげで、フットコントローラーが要らなくなりました。<br>\n普段パソコンを使わない、自宅に置いていない方に見せるとキモがられますが、非常に便利なのでオススメしたいですね。<br>\nただし、最近はなかなか手に入らないため類似品をまた探す旅をしなければならないかもしれません。</p>\n<h2 data-sourcepos=\"56:1-56:36\">\n<span id=\"ソフトウェア編無料\" class=\"fragment\"></span><a href=\"#%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E7%B7%A8%E7%84%A1%E6%96%99\"><i class=\"fa fa-link\"></i></a>ソフトウェア編（無料）</h2>\n<p data-sourcepos=\"57:1-57:85\">説明文中はWindowsを想定しつつ、Macについても補足解説します。</p>\n<p data-sourcepos=\"59:1-61:105\">ハードウェアの沼っぷりも言及しましたが、ソフトウェアはもっと沼です。<br>\nCUIエディタは今も宗教戦争が激しかったり、動画編集ソフトも群雄割拠状態なので、情報量の多さも選択に含める必要があります。<br>\nアプリだけではなく、サービスにも課金が必要である事が多いのも特徴です。</p>\n<p data-sourcepos=\"63:1-64:65\">ハードウェアは買い切りが多いですが、ソフトウェアはサブスクリプション（月額定額制）を採用しているためイニシャルコストこそ低いですが、ランニングコストによってはスタンドアロンの方がトータルでは安かった、なんて事も。<br>\nしばしばAdobe税と揶揄されるのが印象深いです。</p>\n<p data-sourcepos=\"66:1-68:137\">なお、ここでは主にWindowsを想定していますが、Windows自体(OS)も課金制である事に留意しておきましょう。<br>\nMac系の場合は、ハードのぶっとんだ価格設定に目を引かれますが、しれっとOSが含まれているのである意味Windowsよりは親切？かもしれません。<br>\nなお、Linux系を採用する場合は、ディスクさえ作る事ができれば基本的にはタダである事が多いです。</p>\n<h3 data-sourcepos=\"70:1-70:22\">\n<span id=\"ブラウザ拡張\" class=\"fragment\"></span><a href=\"#%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E6%8B%A1%E5%BC%B5\"><i class=\"fa fa-link\"></i></a>ブラウザ拡張</h3>\n<p data-sourcepos=\"71:1-72:140\">拡張機能の話をする前に、ブラウザ自体にも色々な種類があります。<br>\n特にChromium系（Chromeっぽい）ブラウザは数が多すぎて全て把握できていないのでつまみ食いになります。</p>\n<ol data-sourcepos=\"74:1-77:0\">\n<li data-sourcepos=\"74:1-74:16\">google chrome</li>\n<li data-sourcepos=\"75:1-75:8\">brave</li>\n<li data-sourcepos=\"76:1-77:0\">vivaldi</li>\n</ol>\n<p data-sourcepos=\"78:1-80:102\">一番いいのは本家？のgoogle chromeで、基本的に使えないものがありません。<br>\nchromeじゃないと使えないものがなければ敢えて選択する事もありませんが、必要になるシーンは意外と多いかもしれないので、使わなくとも消さずに置いておきましょう。<br>\nbraveはアンチ広告が優秀で、vivaldiはバニラの機能の多彩さを評価しました。</p>\n<p data-sourcepos=\"82:1-83:135\">基本的には、chromium系はそれぞれのブラウザの良さがあるので、類似した機能をつまみ食いしていくことになります。<br>\n拡張機能をつぎ込めばつぎ込むほどメモリの圧迫は免れないため、原則的にない方が好ましいです。</p>\n<p data-sourcepos=\"85:1-85:180\">いきなりイレギュラーなお話をしましたが「ブラウザ拡張は無理して入れないに越したことはない」という事をお伝えしておきます。</p>\n<h3 data-sourcepos=\"87:1-87:47\">\n<span id=\"microsoft-store系macだとapple-store系\" class=\"fragment\"></span><a href=\"#microsoft-store%E7%B3%BBmac%E3%81%A0%E3%81%A8apple-store%E7%B3%BB\"><i class=\"fa fa-link\"></i></a>Microsoft Store系(MacだとApple Store系)</h3>\n<p data-sourcepos=\"88:1-92:93\">まずは開発環境。<br>\nbat（コマンドプロンプト）やPowerShell系よりLinux(bash系)に慣れている方は、WSLを使うかHyper-Visor(Docker)かVirtualBox系(VMWareなども含む)か、の3つぐらいに分かれるかと思います。<br>\nWindowsでもnodejsやjava、pythonをはじめcmdにパスを通して実行するタイプのインストーラーが用意されているものもありますが、コマンドでガチャガチャできた方が開発環境を作りやすいですよね。<br>\nWSLを入れる場合は、Windowsの設定でWSLを有効にした後、Linuxのディストリビューションをインストールする事でWSLコマンドに対応させます。<br>\n詳細な手順は調べればザクザク出てきますので本稿では省略します。</p>\n<p data-sourcepos=\"94:1-94:145\">なお、開発環境以外だとツール群として<a href=\"https://apps.microsoft.com/store/detail/XP89DCGQ3K6VLD\" rel=\"nofollow noopener\" target=\"_blank\">powertoys</a>もおすすめです。</p>\n<h3 data-sourcepos=\"96:1-96:31\">\n<span id=\"サードパーティー製\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%BC%E3%83%89%E3%83%91%E3%83%BC%E3%83%86%E3%82%A3%E3%83%BC%E8%A3%BD\"><i class=\"fa fa-link\"></i></a>サードパーティー製</h3>\n<p data-sourcepos=\"97:1-99:100\">Microsoft Storeでは整わない開発環境があります。<br>\nそこで、chocolateyを使う事でMacで言うbrewとかdockerfileのようにWindowsの環境構築も「ある程度」一元管理することが出来ます。<br>\n（ある程度＝chocolateyで管理できていないパッケージは登録できないため）</p>\n<p data-sourcepos=\"101:1-101:23\"><iframe id=\"qiita-embed-content__9a482b0baecc83a94ac7ea0785ad3957\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__9a482b0baecc83a94ac7ea0785ad3957\" data-content=\"https%3A%2F%2Fchocolatey.org%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"103:1-105:193\">パソコン引っ越しソフトは多いですし、データ関連も一緒に引き継げる事があるのでそちらを採用する方法もあります。<br>\nが、知らない間に汚染されていたり、不要なデータが入っていたりもするのでクリーンインストールの機会だと思って割り切ってキレイにするという考え方もできます。<br>\n（Windows Vistaぐらいまでの時代だとクリーンインストールした頃と比べて明らかに遅くなっていったのが体感で分かる時代が長かったのです…）</p>\n<h3 data-sourcepos=\"107:1-107:16\">\n<span id=\"エディタ\" class=\"fragment\"></span><a href=\"#%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF\"><i class=\"fa fa-link\"></i></a>エディタ</h3>\n<p data-sourcepos=\"108:1-109:156\">今はVSCode以外を紹介する本やサイトを見なくなりました。<br>\nかくいう私も色々な経緯があって、今はVSCodeにお世話になっていますし、今のところ乗り換える予定もありません。</p>\n<p data-sourcepos=\"111:1-114:153\">が、VSCodeで書くよりも環境構築が複雑なので、こういったものを対応して欲しいケースがあります。<br>\n分かりやすいのはVisualStudio系やIntellJ系でしょうか。いわゆるIDE（＝ここでは、実行環境も含んだ開発環境と考えてもらえば意図は伝わっています）です。<br>\nこういうケースはVSCodeで実行環境を構築しようとすると結構骨が折れるので、素直にIDEの方が良い事が多いです。<br>\nなお、実務で環境が指定されている場合は、多少不服な事があっても原則として指示に従う事をオススメします。</p>\n<h2 data-sourcepos=\"116:1-116:72\">\n<span id=\"エンジニアだからこそソフトもハードも拘りたい\" class=\"fragment\"></span><a href=\"#%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%A0%E3%81%8B%E3%82%89%E3%81%93%E3%81%9D%E3%82%BD%E3%83%95%E3%83%88%E3%82%82%E3%83%8F%E3%83%BC%E3%83%89%E3%82%82%E6%8B%98%E3%82%8A%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>エンジニアだからこそ、ソフトもハードも拘りたい</h2>\n<p data-sourcepos=\"117:1-119:144\">今回は取り上げなかったものも多くあります。<br>\n普段使いしている仕事道具には良いものを使いたいものです。<br>\n普段何気なく使っているものこそ、改めて見つめ直してみるのも作業効率化の一歩になるかもしれません。</p>\n<h2 data-sourcepos=\"121:1-121:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"122:1-123:88\">\n<li data-sourcepos=\"122:1-122:181\"><a href=\"https://qiita.com/nomurasan/items/7974edd43c24fae38d9f\" id=\"reference-9b8a882c38970bcf6274\">(25日目) 25日完走した感想と、今からQiitaアドベントカレンダー2023に向けてのテーマ・抱負</a></li>\n<li data-sourcepos=\"123:1-123:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n",
        "body": "元々は違う記事にしようとしていたところを「こっちのが面白いのでは？」というお話があったので採用しました。\n試しに使ってみて、良い方を採用してください。\n\n## ハードウェア編（周辺装置）\nマシンスペックは高い方がいいので、予算と相談してください。\n予算いくらで開発マシン（画像処理の有無）を組む事が多いと思うので、時価や店舗の在庫には注意しましょう。\nそのため、ここで取り上げるのが難しいです。\n\nなお、モニターなんかは完全に好みの領域です。\n普段使いは横に広く、エディタや資料閲覧用で使うなら縦に広く使う事をおすすめします。\nモニターアームで上下左右や角度もつけられると、開発場所も比較的自由に設定できます。\nモニターについては、家具や部屋の間取りと相談しましょう。\n\nこのように、ハードウェアも拘れば沼です。\n\n### フットコントローラー\n開発中に足が暇な方、非常に勿体ないです。\nせっかくなら足も働かせて、頭の回転を上げていきましょう。\n\nよく使われるのが○連（代替は3,4連）ですが、よく使うのはアンドゥ・リドゥぐらいなのでボタン数が多くなると単純に反応がなくて困惑するだけです。\nマウスだと多くても困りませんが、フットボタンは多いと困ります。\n車の運転で言えばクラッチのオートマチックとマニュアルの違いを想像してもらえば分かりやすいと思います。\n一番良いのは、USB1端子の1ボタンを2台置いて左右で使い分けるのと、この時に買うものはボタンの大きさや触感、踏み心地が異なるものであった方が良いです。\nなぜなら、圧倒的にアンドゥの使用回数が多いため、常に左足・右足だけで踏み続けるのが辛くなるからです。\nそして、これはあるあるというか慣れればそういうものだと思えるようになりますが、フットコントローラーはマウスやらキーボード以上に壊れやすい（個人差あり？）ため、安かろう悪かろうで使い心地の良いものを見つける楽しみを見出していきましょう。\n\n参考までに、昔使っていたものを紹介しようと思っていたんですが、シリーズが既に取り扱い終了になってしまっていたため、出せるものがないです。\n今はフットコントローラーは後述のサプライ品が優秀なので使わなくなったというのもあります。\n\n因みに、steamなどでレースゲームを遊ぶ時にも使えるので、steamアカウントを持っている場合は使ってみてください。\n\n### テンキー型のファンクションキーボード\nフットコントローラーに変わるものです。\nFPSゲーマーには御用達ですが、プログラミングでの用途を考えるならフットコントローラーほどは使いにくいです。\nというのも、手は既に両腕ともに塞がっている可能性が高いからです。\nキーボードを片手で操る方なら良いかもしれませんが、レアケースだと思います。\nわざわざファンクションキーボードのためにワンハンドスタイルに切り替えるのも辛いです。\n（ワンハンドスタイルで高速タイピングが出来たらカッコいいよね！という意見には同調します）\n\nただし、フットコントローラーと違ってきちんと目に見える場所で操作ができるので、こちらはシンプルより高機能の方が扱いやすいです。\n問題は、高機能＝使いやすいとは限らない事です。代表としては「そんなに設定するファンクションある？」ですね。\n「利便性のうち、操作のしやすさ（シンプルさ）と機能性（多機能）はトレードオフ」だと考えておくと失敗を避けやすくなる傾向があります。\n\n### マウスジェスチャーがしやすいマウス\n安いマウスより高機能マウスの方が使いやすいと感じる事が多くなった方は多いと思います。\nマウスの仕事に左クリック、右クリック・縦スクロール以外の操作が出来るようになったからですね。\n特に恩恵が大きいのは、横スクロール機能が出来たり、マウスでアンドゥ・リドゥができるファンクションボタンがついたりですね。\n参考までに、[私が愛用しているマウス](https://amzn.to/3WWQEpR)を紹介します。\n\n<a href=\"https://www.amazon.co.jp/%E3%82%B5%E3%83%B3%E3%83%AF%E3%82%B5%E3%83%97%E3%83%A9%E3%82%A4-%E3%83%AF%E3%82%A4%E3%83%A4%E3%83%AC%E3%82%B9%E3%82%A8%E3%83%AB%E3%82%B4%E3%83%8E%E3%83%9F%E3%82%AF%E3%82%B9%E3%83%9E%E3%82%A6%E3%82%B9-%E8%85%B1%E9%9E%98%E7%82%8E%E9%98%B2%E6%AD%A2-%E3%83%AC%E3%83%BC%E3%82%B6%E3%83%BC-MA-ERGW6/dp/B009OV7ZU4?th=1&linkCode=li3&tag=anets-22&linkId=7bb779f5d6dd3afb96c4e89fd6544efe&language=ja_JP&ref_=as_li_ss_il\" target=\"_blank\"><img border=\"0\" src=\"//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B009OV7ZU4&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=anets-22&language=ja_JP\" ></a><img src=\"https://ir-jp.amazon-adsystem.com/e/ir?t=anets-22&language=ja_JP&l=li3&o=9&a=B009OV7ZU4\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\n\nこちらのおかげで、フットコントローラーが要らなくなりました。\n普段パソコンを使わない、自宅に置いていない方に見せるとキモがられますが、非常に便利なのでオススメしたいですね。\nただし、最近はなかなか手に入らないため類似品をまた探す旅をしなければならないかもしれません。\n\n## ソフトウェア編（無料）\n説明文中はWindowsを想定しつつ、Macについても補足解説します。\n\nハードウェアの沼っぷりも言及しましたが、ソフトウェアはもっと沼です。\nCUIエディタは今も宗教戦争が激しかったり、動画編集ソフトも群雄割拠状態なので、情報量の多さも選択に含める必要があります。\nアプリだけではなく、サービスにも課金が必要である事が多いのも特徴です。\n\nハードウェアは買い切りが多いですが、ソフトウェアはサブスクリプション（月額定額制）を採用しているためイニシャルコストこそ低いですが、ランニングコストによってはスタンドアロンの方がトータルでは安かった、なんて事も。\nしばしばAdobe税と揶揄されるのが印象深いです。\n\nなお、ここでは主にWindowsを想定していますが、Windows自体(OS)も課金制である事に留意しておきましょう。\nMac系の場合は、ハードのぶっとんだ価格設定に目を引かれますが、しれっとOSが含まれているのである意味Windowsよりは親切？かもしれません。\nなお、Linux系を採用する場合は、ディスクさえ作る事ができれば基本的にはタダである事が多いです。\n\n### ブラウザ拡張\n拡張機能の話をする前に、ブラウザ自体にも色々な種類があります。\n特にChromium系（Chromeっぽい）ブラウザは数が多すぎて全て把握できていないのでつまみ食いになります。\n\n1. google chrome\n1. brave\n1. vivaldi\n\n一番いいのは本家？のgoogle chromeで、基本的に使えないものがありません。\nchromeじゃないと使えないものがなければ敢えて選択する事もありませんが、必要になるシーンは意外と多いかもしれないので、使わなくとも消さずに置いておきましょう。\nbraveはアンチ広告が優秀で、vivaldiはバニラの機能の多彩さを評価しました。\n\n基本的には、chromium系はそれぞれのブラウザの良さがあるので、類似した機能をつまみ食いしていくことになります。\n拡張機能をつぎ込めばつぎ込むほどメモリの圧迫は免れないため、原則的にない方が好ましいです。\n\nいきなりイレギュラーなお話をしましたが「ブラウザ拡張は無理して入れないに越したことはない」という事をお伝えしておきます。\n\n### Microsoft Store系(MacだとApple Store系)\nまずは開発環境。\nbat（コマンドプロンプト）やPowerShell系よりLinux(bash系)に慣れている方は、WSLを使うかHyper-Visor(Docker)かVirtualBox系(VMWareなども含む)か、の3つぐらいに分かれるかと思います。\nWindowsでもnodejsやjava、pythonをはじめcmdにパスを通して実行するタイプのインストーラーが用意されているものもありますが、コマンドでガチャガチャできた方が開発環境を作りやすいですよね。\nWSLを入れる場合は、Windowsの設定でWSLを有効にした後、Linuxのディストリビューションをインストールする事でWSLコマンドに対応させます。\n詳細な手順は調べればザクザク出てきますので本稿では省略します。\n\nなお、開発環境以外だとツール群として[powertoys](https://apps.microsoft.com/store/detail/XP89DCGQ3K6VLD)もおすすめです。\n\n### サードパーティー製\nMicrosoft Storeでは整わない開発環境があります。\nそこで、chocolateyを使う事でMacで言うbrewとかdockerfileのようにWindowsの環境構築も「ある程度」一元管理することが出来ます。\n（ある程度＝chocolateyで管理できていないパッケージは登録できないため）\n\nhttps://chocolatey.org/\n\nパソコン引っ越しソフトは多いですし、データ関連も一緒に引き継げる事があるのでそちらを採用する方法もあります。\nが、知らない間に汚染されていたり、不要なデータが入っていたりもするのでクリーンインストールの機会だと思って割り切ってキレイにするという考え方もできます。\n（Windows Vistaぐらいまでの時代だとクリーンインストールした頃と比べて明らかに遅くなっていったのが体感で分かる時代が長かったのです…）\n\n### エディタ\n今はVSCode以外を紹介する本やサイトを見なくなりました。\nかくいう私も色々な経緯があって、今はVSCodeにお世話になっていますし、今のところ乗り換える予定もありません。\n\nが、VSCodeで書くよりも環境構築が複雑なので、こういったものを対応して欲しいケースがあります。\n分かりやすいのはVisualStudio系やIntellJ系でしょうか。いわゆるIDE（＝ここでは、実行環境も含んだ開発環境と考えてもらえば意図は伝わっています）です。\nこういうケースはVSCodeで実行環境を構築しようとすると結構骨が折れるので、素直にIDEの方が良い事が多いです。\nなお、実務で環境が指定されている場合は、多少不服な事があっても原則として指示に従う事をオススメします。\n\n## エンジニアだからこそ、ソフトもハードも拘りたい\n今回は取り上げなかったものも多くあります。\n普段使いしている仕事道具には良いものを使いたいものです。\n普段何気なく使っているものこそ、改めて見つめ直してみるのも作業効率化の一歩になるかもしれません。\n\n## 次の記事\n- [(25日目) 25日完走した感想と、今からQiitaアドベントカレンダー2023に向けてのテーマ・抱負](https://qiita.com/nomurasan/items/7974edd43c24fae38d9f)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-23T23:32:23+09:00",
        "group": null,
        "id": "4b7fb8aa9fff5c56e030",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 1,
        "tags": [
            {
                "name": "ハードウェア",
                "versions": []
            },
            {
                "name": "開発環境",
                "versions": []
            },
            {
                "name": "ソフトウェア",
                "versions": []
            }
        ],
        "title": "開発で便利なアイテムたち",
        "updated_at": "2022-12-24T07:05:38+09:00",
        "url": "https://qiita.com/nomurasan/items/4b7fb8aa9fff5c56e030",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 355,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<p data-sourcepos=\"1:1-2:171\">記事を書く話だったり、アウトプットをする事にさんざん言及してきたんですが、アウトプットから得たインプットを返すアウトプット（Qiitaコメントなど）は言及してきませんでした。<br>\n我ながらこれはおかしいな、と感じたので「上手なコミュニケーションと言えるコメントの仕方とはなにか」を考えてみます。</p>\n<h2 data-sourcepos=\"4:1-4:15\">\n<span id=\"やること\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やること</h2>\n<ul data-sourcepos=\"5:1-7:0\">\n<li data-sourcepos=\"5:1-5:38\">SNSやメディアでのコメント</li>\n<li data-sourcepos=\"6:1-7:0\">コメントを受けた時のリアクション</li>\n</ul>\n<h2 data-sourcepos=\"8:1-8:21\">\n<span id=\"やらないこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%89%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やらないこと</h2>\n<ul data-sourcepos=\"9:1-10:0\">\n<li data-sourcepos=\"9:1-10:0\">ソースコードのコメント</li>\n</ul>\n<h2 data-sourcepos=\"11:1-11:42\">\n<span id=\"コメントをする目的を考える\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E3%81%99%E3%82%8B%E7%9B%AE%E7%9A%84%E3%82%92%E8%80%83%E3%81%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>コメントをする目的を考える</h2>\n<p data-sourcepos=\"12:1-13:108\">たとえば、SNSでリプライを発信する場合などが分かりやすいでしょうか。<br>\n他にも、社内チャットなどのコミュニケーションツールでの返信も考慮します。</p>\n<p data-sourcepos=\"15:1-17:69\">コメントを発信するからには何らかの目的があったはずです。<br>\nとりあえず脊髄反射でコメント出しときますね、というノリもありますが、大体の場合「見てますよ」というアピールのためです。<br>\n投稿にスタンプを押すのも、これに似ていますね。</p>\n<p data-sourcepos=\"19:1-23:81\">次に確認の意図があります。<br>\n発信者がある事象にAと説明したところ、分かりにくかったのでコメント者がBという認識で合っているか？と質問するようなケースです。<br>\nこれも業務上、ありがちなケースですね。<br>\nこの結果、修正を要望する場合などがあります。<br>\nこの段階までくると、業務の推進が目的になっていきます。</p>\n<p data-sourcepos=\"25:1-27:216\">若干、先述の内容に触れますが指示もツールを介して行われる事があります。<br>\nエンジニア向けに発信する場合は、細部にも目を向ける必要がある場合も多いので、タスクチケットを切ってアサインするケースもあります。<br>\nこの辺りは、企業やチームの文化もありますので断言はできませんが、私の経験上（ソースなし）だと、概ね上記のような運用をされている事が多かったです。</p>\n<p data-sourcepos=\"29:1-30:126\">まずはコメントの内容ではなく、コメントの目的を考えていきました。<br>\nここからは、それぞれのケースに合わせてどのようなコメントをしていくか考えていきます。</p>\n<h2 data-sourcepos=\"32:1-32:30\">\n<span id=\"コメントをする技術\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E3%81%99%E3%82%8B%E6%8A%80%E8%A1%93\"><i class=\"fa fa-link\"></i></a>コメントをする技術</h2>\n<p data-sourcepos=\"33:1-33:108\">コメントの内容に触れる前に、メールの時にやっている事を思い返してみます。</p>\n<ul data-sourcepos=\"35:1-41:0\">\n<li data-sourcepos=\"35:1-35:74\">宛先（役職・宛名）を本文に含める（一番上に書く）</li>\n<li data-sourcepos=\"36:1-36:11\">名乗る</li>\n<li data-sourcepos=\"37:1-37:17\">冒頭の挨拶</li>\n<li data-sourcepos=\"38:1-38:8\">内容</li>\n<li data-sourcepos=\"39:1-39:17\">末文の挨拶</li>\n<li data-sourcepos=\"40:1-41:0\">署名</li>\n</ul>\n<p data-sourcepos=\"42:1-42:54\">のような構成になっていると思います。</p>\n<h3 data-sourcepos=\"44:1-44:25\">\n<span id=\"一番大事内容\" class=\"fragment\"></span><a href=\"#%E4%B8%80%E7%95%AA%E5%A4%A7%E4%BA%8B%E5%86%85%E5%AE%B9\"><i class=\"fa fa-link\"></i></a>一番大事：内容</h3>\n<p data-sourcepos=\"45:1-48:195\">基本的にチャットツールは、関係者全員が一覧できるように最初の投稿（メッセージ）は特に指名がない限りは全員に宛てている事を想定している事が多いようです。<br>\nが、コメントが散発的であったり、内容が限定的である場合に「自分は関係ない」という心理が働いてしまいがちです。<br>\nこの場合「分からない話だけど、自分の事じゃないからいいや」と思って積極的に動こうとはなりにくい傾向があります。<br>\nそのため、発信者は「誰が担当かわからないので、とりあえず全員に投げてみよう」と思っても、誰も対応しないなんて事もあってしまいます。</p>\n<p data-sourcepos=\"50:1-51:261\">こういったケースを防ぐために、指名なしの投稿は暗黙的に「誰に対しても言っていない」とならないように、たとえばslackなどでは<code>@channel</code>とか<code>@here</code>とかにして、関係者にリプライの通知がされるようにしておく等の工夫がされています。<br>\nそれでも自分ごとではないと思ってしまう事も考えられるため、確実に誰かに何らかのアクションをしてほしい場合は、コメント内に何をしてほしいのか明記するようにしておくのも一手です。</p>\n<p data-sourcepos=\"53:1-56:168\">もうひとつの方法として、タスクチケットで運用している場合は「質問」というカテゴリーを作って、タスクを発行したら自動的にチャットに投稿する仕組みを作るという手もあります。<br>\nこの場合、ある程度のテンプレートに沿って記入するように促せるため、質問者側も品質の高い質問ができます。<br>\nどうしてもチャットツールなどはフリーフォーマットである事が多いため、質問の品質が一定ではないのが悩みです。<br>\nが、こういった定型句を入れられると、起票スピードも質問時の想定漏れや言葉足らずをある程度防いでいく事ができます。</p>\n<h3 data-sourcepos=\"58:1-58:13\">\n<span id=\"距離感\" class=\"fragment\"></span><a href=\"#%E8%B7%9D%E9%9B%A2%E6%84%9F\"><i class=\"fa fa-link\"></i></a>距離感</h3>\n<p data-sourcepos=\"59:1-60:72\">目的：不問<br>\nただし、内容問わず注意が必要なシーンが考えられる</p>\n<p data-sourcepos=\"62:1-63:186\">あまり良い文化だとは思わないのですが、たまーに不躾な方がいます。<br>\nメールではないので、挨拶や名乗りも署名も要らないんですが、初対面（はじめてのコミュニケーション）で要件だけ投げてくる方です。</p>\n<p data-sourcepos=\"65:1-67:207\">顔が見えないコミュニケーションなので、画面の向こうをBOTかなんかだと思いがちです。<br>\nこれは実務だとしても、メッセージを介して相手の顔や表情をイメージできていますか？というお話です。<br>\n気を使う必要はない、と考えるかどうかは相手との距離感もありますので、自分が良くても相手はどうか、一度見直してみたほうが良いかもしれません。</p>\n<h3 data-sourcepos=\"69:1-69:34\">\n<span id=\"反論指摘への不快感\" class=\"fragment\"></span><a href=\"#%E5%8F%8D%E8%AB%96%E6%8C%87%E6%91%98%E3%81%B8%E3%81%AE%E4%B8%8D%E5%BF%AB%E6%84%9F\"><i class=\"fa fa-link\"></i></a>反論・指摘への不快感</h3>\n<p data-sourcepos=\"70:1-71:42\">目的：相手の結論を考え直してもらう<br>\n行動：相手の考えを尊重しよう</p>\n<p data-sourcepos=\"73:1-74:42\">これは文字ならでは、の問題の気がします。<br>\n要するに、言い方の問題です。</p>\n<p data-sourcepos=\"76:1-82:189\">対面で話す際は、多少なりとも言い方を工夫すると思います。<br>\nたとえば「アレはダメ、こうしなさい」というような注意の際も「○○を△△になるように修正してほしいのですが、可能でしょうか」のような言い換えをする等があります。<br>\n「○○が△△になってないからやり直し」と言葉の意味や意図は同じですが、テキストで見た時にどう感じるか。<br>\n同様に、修正をお願いしたがもうちょっと頑張ってほしい際の頼み方もとても気を使うポイントです。<br>\n特にコードレビューに多いのですが、「このやり方でも良いと思いますが、○○だともっと良くなります。なぜなら（＋理由）」のように書けていると、レビュイー（レビューを受けた側）としても、納得して修正対応に励みやすいです。<br>\nただ納得させるだけではなく、類似した問題を自主的に解決してくれる可能性が高まります。<br>\n「ダメと言われたから修正する」から「何がダメだから修正する」と意識を変える事で、モチベーションを下げすぎる事を防いでくれます。</p>\n<h3 data-sourcepos=\"84:1-84:19\">\n<span id=\"教えを請う\" class=\"fragment\"></span><a href=\"#%E6%95%99%E3%81%88%E3%82%92%E8%AB%8B%E3%81%86\"><i class=\"fa fa-link\"></i></a>教えを請う</h3>\n<p data-sourcepos=\"85:1-86:111\">目的：自分が分からない事を解説していただく<br>\n行動：自分が分かる部分を伝えて、欲しい回答をしやすいように問題を絞っていく</p>\n<p data-sourcepos=\"88:1-89:105\">また別のケースで、書いてある内容がよく分からなかった場合のお話です。<br>\nメールでもよく使われるシーンなので、上記と比べると簡単かもしれません。</p>\n<p data-sourcepos=\"91:1-95:276\">シンプルに「○○について、△△だと思うのですが、私の認識は間違っていないでしょうか？」で良いです。<br>\n新卒研修でも質問についてはしっかり指導された事があると思います。<br>\nここで「○○について分かりません」だけだと、何がどう分かっていないのか、回答者が混乱するので、自分の理解した内容を話しながら質問をするのが効果的です。<br>\nただし、一番最初に質問だと相手に伝えないと、結局何が言いたいのか意図を汲み取って、もう一度全文を初めから聞く事になりやすいです。<br>\nチャットだとテキストに全て書いてあるはずなので、改めて読み直せば何を言っているかは理解できるようになりますが、なるべくなら回答者の手間にならないようなうまい質問を心がけたいものですね。</p>\n<h3 data-sourcepos=\"97:1-97:40\">\n<span id=\"メールの形式で不要なもの\" class=\"fragment\"></span><a href=\"#%E3%83%A1%E3%83%BC%E3%83%AB%E3%81%AE%E5%BD%A2%E5%BC%8F%E3%81%A7%E4%B8%8D%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>メールの形式で不要なもの</h3>\n<p data-sourcepos=\"98:1-98:33\">要るものだけに絞ると、</p>\n<ul data-sourcepos=\"100:1-102:0\">\n<li data-sourcepos=\"100:1-100:8\">宛先</li>\n<li data-sourcepos=\"101:1-102:0\">内容</li>\n</ul>\n<p data-sourcepos=\"103:1-105:75\">だけで良いでしょう。<br>\n宛先を指名して、誰に見てほしいのかを明示します。<br>\nその上で、本来の内容を書いていけば良いと思います。</p>\n<p data-sourcepos=\"107:1-107:237\">ただし「親しき仲にも礼儀あり」で、質問に答えてもらって当たり前の感覚だとか、そもそもコメントが無味乾燥な文章になっていないかは確認しておいた方が良いでしょう。</p>\n<p data-sourcepos=\"109:1-110:134\">相手がこのメッセージを読んだ時にどう考えるのか？を気にしていって、実際に送った後のリアクションなどを見ていけば難しくはありません。<br>\nまずは手始めにいつも読んでいるQiitaユーザーからコメントを残していく方法を試してみましょう。</p>\n<h2 data-sourcepos=\"112:1-112:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"113:1-114:88\">\n<li data-sourcepos=\"113:1-113:51\"><a href=\"https://qiita.com/nomurasan/items/\">(22日目) </a></li>\n<li data-sourcepos=\"114:1-114:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n",
        "body": "記事を書く話だったり、アウトプットをする事にさんざん言及してきたんですが、アウトプットから得たインプットを返すアウトプット（Qiitaコメントなど）は言及してきませんでした。\n我ながらこれはおかしいな、と感じたので「上手なコミュニケーションと言えるコメントの仕方とはなにか」を考えてみます。\n\n## やること\n- SNSやメディアでのコメント\n- コメントを受けた時のリアクション\n\n## やらないこと\n- ソースコードのコメント\n\n## コメントをする目的を考える\nたとえば、SNSでリプライを発信する場合などが分かりやすいでしょうか。\n他にも、社内チャットなどのコミュニケーションツールでの返信も考慮します。\n\nコメントを発信するからには何らかの目的があったはずです。\nとりあえず脊髄反射でコメント出しときますね、というノリもありますが、大体の場合「見てますよ」というアピールのためです。\n投稿にスタンプを押すのも、これに似ていますね。\n\n次に確認の意図があります。\n発信者がある事象にAと説明したところ、分かりにくかったのでコメント者がBという認識で合っているか？と質問するようなケースです。\nこれも業務上、ありがちなケースですね。\nこの結果、修正を要望する場合などがあります。\nこの段階までくると、業務の推進が目的になっていきます。\n\n若干、先述の内容に触れますが指示もツールを介して行われる事があります。\nエンジニア向けに発信する場合は、細部にも目を向ける必要がある場合も多いので、タスクチケットを切ってアサインするケースもあります。\nこの辺りは、企業やチームの文化もありますので断言はできませんが、私の経験上（ソースなし）だと、概ね上記のような運用をされている事が多かったです。\n\nまずはコメントの内容ではなく、コメントの目的を考えていきました。\nここからは、それぞれのケースに合わせてどのようなコメントをしていくか考えていきます。\n\n## コメントをする技術\nコメントの内容に触れる前に、メールの時にやっている事を思い返してみます。\n\n- 宛先（役職・宛名）を本文に含める（一番上に書く）\n- 名乗る\n- 冒頭の挨拶\n- 内容\n- 末文の挨拶\n- 署名\n\nのような構成になっていると思います。\n\n### 一番大事：内容\n基本的にチャットツールは、関係者全員が一覧できるように最初の投稿（メッセージ）は特に指名がない限りは全員に宛てている事を想定している事が多いようです。\nが、コメントが散発的であったり、内容が限定的である場合に「自分は関係ない」という心理が働いてしまいがちです。\nこの場合「分からない話だけど、自分の事じゃないからいいや」と思って積極的に動こうとはなりにくい傾向があります。\nそのため、発信者は「誰が担当かわからないので、とりあえず全員に投げてみよう」と思っても、誰も対応しないなんて事もあってしまいます。\n\nこういったケースを防ぐために、指名なしの投稿は暗黙的に「誰に対しても言っていない」とならないように、たとえばslackなどでは`@channel`とか`@here`とかにして、関係者にリプライの通知がされるようにしておく等の工夫がされています。\nそれでも自分ごとではないと思ってしまう事も考えられるため、確実に誰かに何らかのアクションをしてほしい場合は、コメント内に何をしてほしいのか明記するようにしておくのも一手です。\n\nもうひとつの方法として、タスクチケットで運用している場合は「質問」というカテゴリーを作って、タスクを発行したら自動的にチャットに投稿する仕組みを作るという手もあります。\nこの場合、ある程度のテンプレートに沿って記入するように促せるため、質問者側も品質の高い質問ができます。\nどうしてもチャットツールなどはフリーフォーマットである事が多いため、質問の品質が一定ではないのが悩みです。\nが、こういった定型句を入れられると、起票スピードも質問時の想定漏れや言葉足らずをある程度防いでいく事ができます。\n\n### 距離感\n目的：不問\nただし、内容問わず注意が必要なシーンが考えられる\n\nあまり良い文化だとは思わないのですが、たまーに不躾な方がいます。\nメールではないので、挨拶や名乗りも署名も要らないんですが、初対面（はじめてのコミュニケーション）で要件だけ投げてくる方です。\n\n顔が見えないコミュニケーションなので、画面の向こうをBOTかなんかだと思いがちです。\nこれは実務だとしても、メッセージを介して相手の顔や表情をイメージできていますか？というお話です。\n気を使う必要はない、と考えるかどうかは相手との距離感もありますので、自分が良くても相手はどうか、一度見直してみたほうが良いかもしれません。\n\n### 反論・指摘への不快感\n目的：相手の結論を考え直してもらう\n行動：相手の考えを尊重しよう\n\nこれは文字ならでは、の問題の気がします。\n要するに、言い方の問題です。\n\n対面で話す際は、多少なりとも言い方を工夫すると思います。\nたとえば「アレはダメ、こうしなさい」というような注意の際も「○○を△△になるように修正してほしいのですが、可能でしょうか」のような言い換えをする等があります。\n「○○が△△になってないからやり直し」と言葉の意味や意図は同じですが、テキストで見た時にどう感じるか。\n同様に、修正をお願いしたがもうちょっと頑張ってほしい際の頼み方もとても気を使うポイントです。\n特にコードレビューに多いのですが、「このやり方でも良いと思いますが、○○だともっと良くなります。なぜなら（＋理由）」のように書けていると、レビュイー（レビューを受けた側）としても、納得して修正対応に励みやすいです。\nただ納得させるだけではなく、類似した問題を自主的に解決してくれる可能性が高まります。\n「ダメと言われたから修正する」から「何がダメだから修正する」と意識を変える事で、モチベーションを下げすぎる事を防いでくれます。\n\n### 教えを請う\n目的：自分が分からない事を解説していただく\n行動：自分が分かる部分を伝えて、欲しい回答をしやすいように問題を絞っていく\n\nまた別のケースで、書いてある内容がよく分からなかった場合のお話です。\nメールでもよく使われるシーンなので、上記と比べると簡単かもしれません。\n\nシンプルに「○○について、△△だと思うのですが、私の認識は間違っていないでしょうか？」で良いです。\n新卒研修でも質問についてはしっかり指導された事があると思います。\nここで「○○について分かりません」だけだと、何がどう分かっていないのか、回答者が混乱するので、自分の理解した内容を話しながら質問をするのが効果的です。\nただし、一番最初に質問だと相手に伝えないと、結局何が言いたいのか意図を汲み取って、もう一度全文を初めから聞く事になりやすいです。\nチャットだとテキストに全て書いてあるはずなので、改めて読み直せば何を言っているかは理解できるようになりますが、なるべくなら回答者の手間にならないようなうまい質問を心がけたいものですね。\n\n### メールの形式で不要なもの\n要るものだけに絞ると、\n\n- 宛先\n- 内容\n\nだけで良いでしょう。\n宛先を指名して、誰に見てほしいのかを明示します。\nその上で、本来の内容を書いていけば良いと思います。\n\nただし「親しき仲にも礼儀あり」で、質問に答えてもらって当たり前の感覚だとか、そもそもコメントが無味乾燥な文章になっていないかは確認しておいた方が良いでしょう。\n\n相手がこのメッセージを読んだ時にどう考えるのか？を気にしていって、実際に送った後のリアクションなどを見ていけば難しくはありません。\nまずは手始めにいつも読んでいるQiitaユーザーからコメントを残していく方法を試してみましょう。\n\n## 次の記事\n- [(22日目) ](https://qiita.com/nomurasan/items/)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-18T18:10:35+09:00",
        "group": null,
        "id": "7e40a96228572dac5c3c",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "コメント",
                "versions": []
            }
        ],
        "title": "（コミュニケーション）コメントを「する」技術を考える",
        "updated_at": "2022-12-22T01:39:24+09:00",
        "url": "https://qiita.com/nomurasan/items/7e40a96228572dac5c3c",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 177,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<h2 data-sourcepos=\"1:1-1:9\">\n<span id=\"注意\" class=\"fragment\"></span><a href=\"#%E6%B3%A8%E6%84%8F\"><i class=\"fa fa-link\"></i></a>注意</h2>\n<p data-sourcepos=\"2:1-4:81\">※ポエムです<br>\n※来年は第一線に戻ろうと思っている元エンジニア講師の私個人の感想です<br>\n※会社や環境が変われば、真逆のご意見もあるかと思います</p>\n<h2 data-sourcepos=\"6:1-6:15\">\n<span id=\"想定読者\" class=\"fragment\"></span><a href=\"#%E6%83%B3%E5%AE%9A%E8%AA%AD%E8%80%85\"><i class=\"fa fa-link\"></i></a>想定読者</h2>\n<ul data-sourcepos=\"7:1-10:0\">\n<li data-sourcepos=\"7:1-7:68\">プログラミングスクールに入ろうと考えている方</li>\n<li data-sourcepos=\"8:1-8:38\">転職希望のエンジニアの方</li>\n<li data-sourcepos=\"9:1-10:0\">現場採用ご担当者</li>\n</ul>\n<h2 data-sourcepos=\"11:1-11:21\">\n<span id=\"言いたいこと\" class=\"fragment\"></span><a href=\"#%E8%A8%80%E3%81%84%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>言いたいこと</h2>\n<p data-sourcepos=\"12:1-12:176\">IT教育でもプログラミング・アルゴリズム以外でもある程度は就職・転職スキルを会社ごとにカスタマイズ（≒最適化）するべき。</p>\n<h2 data-sourcepos=\"14:1-14:42\">\n<span id=\"本稿執筆に向けてやったこと\" class=\"fragment\"></span><a href=\"#%E6%9C%AC%E7%A8%BF%E5%9F%B7%E7%AD%86%E3%81%AB%E5%90%91%E3%81%91%E3%81%A6%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>本稿執筆に向けてやったこと</h2>\n<ul data-sourcepos=\"15:1-16:0\">\n<li data-sourcepos=\"15:1-16:0\">機会あって親戚（文系・プログラミング未経験・社会人）をエンジニア研修</li>\n</ul>\n<p data-sourcepos=\"17:1-18:105\">本人からは喜ばれましたが、はたしてエンジニア採用に受かったのかどうか…。<br>\n今後の動向を注視していますが、今後も報告できる事はないかもしれません。</p>\n<h3 data-sourcepos=\"20:1-20:19\">\n<span id=\"現状の問題\" class=\"fragment\"></span><a href=\"#%E7%8F%BE%E7%8A%B6%E3%81%AE%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>現状の問題</h3>\n<p data-sourcepos=\"21:1-23:243\">就活においてエンジニアの採用ミスマッチの問題が、そのままスクール事業社の考えるエンジニア像と、エンジニアリング事業社の求めるエンジニア像のミスマッチになっています。<br>\nそのため、スクール事業社はコースを手広くやるより、ニッチに尖らせた方が質が高くなりやすい傾向があります。<br>\nこれは、案件ごとに特化した指導ができた方がプロジェクトに参画しやすくなるのは自明ですが、他の案件も見据えた「現場主義」が意識されているかどうかの問題とも言えます。</p>\n<h4 data-sourcepos=\"25:1-25:14\">\n<span id=\"具体例\" class=\"fragment\"></span><a href=\"#%E5%85%B7%E4%BD%93%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>具体例</h4>\n<p data-sourcepos=\"26:1-27:207\">新卒研修の例を考えます。<br>\n事業者が指導しているオープンスクールは、個別具体のケースには対応せず、一般的に技術とはこういうものです、と指導するのが主なアプローチです。</p>\n<p data-sourcepos=\"29:1-31:207\">これを、企業ごとに重視している内容にフォーカスすると、実務で採用しているケースを交えて、より身近なものとして意識を促しやすいため、受講生目線での「講義での重要なポイント」を推測しやすくなります。<br>\n特にプログラミング等実技研修より概論（手を動かさないでサーバーの話やチーム開発理論など）の学習効果が高くなる傾向が見られました。<br>\n（残念ながらソースは出せないですが、私が見てきた受講生の座学テストデータや、テストで間違えた点を復習する時の受講生コメントなどによります）</p>\n<h3 data-sourcepos=\"33:1-33:37\">\n<span id=\"就職転職希望者の対策\" class=\"fragment\"></span><a href=\"#%E5%B0%B1%E8%81%B7%E8%BB%A2%E8%81%B7%E5%B8%8C%E6%9C%9B%E8%80%85%E3%81%AE%E5%AF%BE%E7%AD%96\"><i class=\"fa fa-link\"></i></a>就職・転職希望者の対策</h3>\n<p data-sourcepos=\"34:1-36:246\">これからエンジニアを目指したいなら、とりあえずで入るプログラミングスクールよりも、エンジニア人材派遣事業社が推進している教育機関や事業を狙うほうがよいです。<br>\nそもそも、仕事をするためにお金を払ってスクールに行くのではなく、既に持っているスキルをより高めるために投資した方が費用対効果やリスク面でメリットが大きいので、プログラミングスクールに行く前に未経験でエンジニア採用を探した方が良いですね。<br>\nとはいえ、かなりハードルは高いです。一昔前ならともかく、今はプログラミングスクールもピンキリですし、人事（現場）によっては最初から戦力だと考えていない事もあります。</p>\n<p data-sourcepos=\"38:1-41:156\">これらを踏まえるとぶっちゃけ、一次面接は現場をご存知でない方が出てくるのでエンジニアリングスキルより演技力を磨いた方がいい。<br>\nまた、二次面接は自分よりも上位スキルを持った人間が出てくるので、自分よりエンジニアリングスキルが高い事を意識して話す内容を考えた方が有意義でしょう。<br>\nなお、採用担当（人事）とは<strong>面接のプロではない人</strong>なので、相手のコミュニケーションスキルが低い事があります。<br>\n採用者のプレゼンスキルによっては、代わりに自分がその場を仕切るつもりで臨んだ方がうまくいく事があります。</p>\n<h3 data-sourcepos=\"43:1-43:28\">\n<span id=\"採用事業社の対策\" class=\"fragment\"></span><a href=\"#%E6%8E%A1%E7%94%A8%E4%BA%8B%E6%A5%AD%E7%A4%BE%E3%81%AE%E5%AF%BE%E7%AD%96\"><i class=\"fa fa-link\"></i></a>採用事業社の対策</h3>\n<p data-sourcepos=\"44:1-45:90\">まずは採用側の観点で見ていきます。<br>\nだいたい三次面接までされると思いますが、採用の悩みとして多い</p>\n<ul data-sourcepos=\"47:1-50:0\">\n<li data-sourcepos=\"47:1-47:35\">書類と一次選考のコスト</li>\n<li data-sourcepos=\"48:1-48:35\">応募者のスキルや条件面</li>\n<li data-sourcepos=\"49:1-50:0\">社風に合うか合わないか</li>\n</ul>\n<p data-sourcepos=\"51:1-51:90\">の３つをどうやって見定めるか、という観点で見ていきましょう。</p>\n<h4 data-sourcepos=\"53:1-53:32\">\n<span id=\"書類選考のポイント\" class=\"fragment\"></span><a href=\"#%E6%9B%B8%E9%A1%9E%E9%81%B8%E8%80%83%E3%81%AE%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>書類選考のポイント</h4>\n<p data-sourcepos=\"54:1-56:240\">正直、このタイミングでは応募者がどういう人間か見定めるのはほぼ不可能です。<br>\nなので、書類で選ぶというよりは求人の出し方が正しかったかどうかを、書類選考の過程で見直した方が良い事が多いです。<br>\n応募が多い場合は選考コストばかりをかけてムダになり、応募が少ないと条件面以外にも求人の出し方が分かりにくいので応募者に避けられてしまっている可能性もありえます。</p>\n<p data-sourcepos=\"58:1-60:273\">こういう状況を踏まえると、書類選考する必要がないと思ってもらえるように書類を送付する前・後ぐらいのタイミングで核心をつく質問を４つぐらい投げてみて、人事の動向を窺うという方法を取らせてもらってます。<br>\nエージェントが入っている場合は、エージェントを介していますが、経歴書類を求人に合わせて最適化していく方法もあります。<br>\n要は、書類選考後の選考フロー云々だとタイミングによっては選考すらしない事があるため（怖いことに実話です。どことは言えないですが）、選考以外の方法で印象を持たせる必要性を感じています。</p>\n<h4 data-sourcepos=\"62:1-62:17\">\n<span id=\"一次面接\" class=\"fragment\"></span><a href=\"#%E4%B8%80%E6%AC%A1%E9%9D%A2%E6%8E%A5\"><i class=\"fa fa-link\"></i></a>一次面接</h4>\n<p data-sourcepos=\"63:1-64:222\">ここで重視すべきは「応募者のスキルを見極める」のではなく「応募者を一人の営業マンとして見た時に信用できるかどうか」という観点であることを、面接前に応募者に伝えておくことです。<br>\n腹の探り合いみたいな面接に意味はないので、求人を出した募集背景や求める人材かどうかの擦り合わせ・共通認識が取れているかどうかの確認に努めるべきです。</p>\n<p data-sourcepos=\"66:1-66:252\">とはいえ、応募者はうまい事やってくるので、人事サイド（非現場）としては条件面でのミスマッチになっていないかどうかだけ見定めて、後は現場に投げてしまうのも一つの方法です。</p>\n<p data-sourcepos=\"68:1-70:168\">応募者の立場から言えば、ここでやるべきは準備体操のような面談（面接）です。<br>\n条件の擦り合わせの場と割り切って、自分の認識している内容と求人に食い違いがないか確認する場としてとどめておきましょう。<br>\nこれでダメなら「社風に合わない」が大体のお断り理由です。こればかりはどうにもならないので諦めて次を求めましょう。</p>\n<h4 data-sourcepos=\"72:1-72:17\">\n<span id=\"二次面接\" class=\"fragment\"></span><a href=\"#%E4%BA%8C%E6%AC%A1%E9%9D%A2%E6%8E%A5\"><i class=\"fa fa-link\"></i></a>二次面接</h4>\n<p data-sourcepos=\"73:1-76:138\">目的は往々にして応募者のスキルを測る事にあるが、覚えているかどうかを測る筆記テストよりは現場レベルでの課題や問題を応募者に提示し、どのように解決を見出すのか見定めるのがベターです。<br>\nおそらく、リーダークラスの方が出られる事が多いはずなので、現在のチームに応募者が加わるとどういう変化が起こるのか、想像はできるかと思います。<br>\nまた、未経験者が現場でやっていけるかどうかを現状のスキルで測るのはあまり良い方法ではない事をご存知のはずなので、応募者が回答に困るようであれば情報を追加していくと設問自体の不足に気付いていけるはずです。<br>\nなお、企業スパイを警戒される方はここでは取り上げない事にします。話がややこしくなるためです。</p>\n<p data-sourcepos=\"78:1-79:51\">応募者としては、自身のスキルや方針など考え方と、既存のチームの問題点をヒアリングしてみて、解決可能かどうかをテーマに意見交換してみましょう。<br>\n思った以上に上手くいくと思います。</p>\n<h4 data-sourcepos=\"81:1-81:17\">\n<span id=\"三次面接\" class=\"fragment\"></span><a href=\"#%E4%B8%89%E6%AC%A1%E9%9D%A2%E6%8E%A5\"><i class=\"fa fa-link\"></i></a>三次面接</h4>\n<p data-sourcepos=\"82:1-84:171\">会社ごとに大事にしている事柄があると思うので、そちらを受講者とのすり合わせにしていただくと良いです。<br>\nただし、<strong>応募者は間違いなく演技をしている</strong>ので、会社からの要望を伝えて認識合わせをする場としてしまう手もあります。<br>\nこの時、率直に感想と解決策を求めてみてください。この回答が腑に落ちれば、採用後のリスクを抑えやすくなると思います。</p>\n<p data-sourcepos=\"86:1-89:171\">応募者側の話になりますが、ここまでに嘘をつくメリットがあまりないんですよね。<br>\nというのも、採用がゴールではないからです。採用後にチームとしてやっていけるか？という観点で見ると、二次面接の段階から忌憚のない意見をぶつけていっていいと思います。<br>\n面接だと思うと萎縮してしまうかもしれませんが、採用されて社内的に立場が決定するまでは会社を超えて対等な関係であるはずです。<br>\n「採用していただく」という受け身の姿勢ではなく「この会社で活躍の場はあるのか？」という攻めの姿勢で臨んでください。</p>\n<h3 data-sourcepos=\"91:1-91:34\">\n<span id=\"スクール事業社の対策\" class=\"fragment\"></span><a href=\"#%E3%82%B9%E3%82%AF%E3%83%BC%E3%83%AB%E4%BA%8B%E6%A5%AD%E7%A4%BE%E3%81%AE%E5%AF%BE%E7%AD%96\"><i class=\"fa fa-link\"></i></a>スクール事業社の対策</h3>\n<p data-sourcepos=\"92:1-93:207\">派遣登録者を有料で斡旋するスクール事業をやる手がありそうです。<br>\nあるいは、専属の教育を施す委託業社と契約する（登録スタッフを教育事業社に送るなど）方法で、他のエンジニア派遣業社と差別化していけそうです。</p>\n<p data-sourcepos=\"95:1-95:198\">toCだけど、toBのメリットや要素、営業を入れていくと講師はともかく、目的が明確になった分カリキュラムのクオリティを上げていけるはずです。</p>\n<hr data-sourcepos=\"97:1-98:0\">\n<h2 data-sourcepos=\"99:1-99:18\">\n<span id=\"やったこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やったこと</h2>\n<p data-sourcepos=\"100:1-100:102\">結論に至るまでに私がなぜこのように考えるに至ったかを示していきます。</p>\n<ul data-sourcepos=\"102:1-109:0\">\n<li data-sourcepos=\"102:1-104:74\">toC事業社\n<ul data-sourcepos=\"103:3-104:74\">\n<li data-sourcepos=\"103:3-103:61\">会議式講演型：ティーチング・コーチング</li>\n<li data-sourcepos=\"104:3-104:74\">オンライン1on1型：コーチング（一部ティーチング）</li>\n</ul>\n</li>\n<li data-sourcepos=\"105:1-109:0\">toB事業社\n<ul data-sourcepos=\"106:3-109:0\">\n<li data-sourcepos=\"106:3-106:43\">会議式講演型：ティーチング</li>\n<li data-sourcepos=\"107:3-107:49\">オンライン講演型：ティーチング</li>\n<li data-sourcepos=\"108:3-109:0\">オンライン1on1型：コーチング</li>\n</ul>\n</li>\n</ul>\n<h2 data-sourcepos=\"110:1-110:48\">\n<span id=\"定義ティーチングコーチング\" class=\"fragment\"></span><a href=\"#%E5%AE%9A%E7%BE%A9%E3%83%86%E3%82%A3%E3%83%BC%E3%83%81%E3%83%B3%E3%82%B0%E3%82%B3%E3%83%BC%E3%83%81%E3%83%B3%E3%82%B0\"><i class=\"fa fa-link\"></i></a>定義：ティーチング・コーチング</h2>\n<p data-sourcepos=\"111:1-111:54\">人によって定義が曖昧なので、ここでは</p>\n<ul data-sourcepos=\"113:1-115:0\">\n<li data-sourcepos=\"113:1-113:107\">ティーチング：聞き手が知らない事を教える（教科書やカリキュラムページ）</li>\n<li data-sourcepos=\"114:1-115:0\">コーチング：聞き手がやりたい事を導く（質疑応答、自主制作）</li>\n</ul>\n<p data-sourcepos=\"116:1-117:117\">としておきます。<br>\n（本当はもっと細かいのですが、話がややこしくなるのでざっくりと上記にしました）</p>\n<h2 data-sourcepos=\"119:1-119:18\">\n<span id=\"結論の根拠\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E8%AB%96%E3%81%AE%E6%A0%B9%E6%8B%A0\"><i class=\"fa fa-link\"></i></a>結論の根拠</h2>\n<p data-sourcepos=\"120:1-122:200\">まず、toBとtoCの教育事業で受講者のスキルに明確な差が出ました。<br>\n資料を提示できないのが悔しいですが、私感で平均値あるいは中央値を取ってみてもtoBの受講者の方が質が高くなります。<br>\nただし、toBはだいたい1〜3ヶ月、toCは長くて１年近く学べるので、個人の納得度（仕上がりの良さとは連動していません）が高いのはスクールです。</p>\n<p data-sourcepos=\"124:1-124:213\">そもそも、研修後にすぐ業務で活かしていくtoB受講者と、これから転職活動をしていくtoC受講者ではモチベーションが違うので仕方がないのかも知れません。</p>\n<h3 data-sourcepos=\"126:1-126:67\">\n<span id=\"根拠から考える就職転職として最良の方法\" class=\"fragment\"></span><a href=\"#%E6%A0%B9%E6%8B%A0%E3%81%8B%E3%82%89%E8%80%83%E3%81%88%E3%82%8B%E5%B0%B1%E8%81%B7%E8%BB%A2%E8%81%B7%E3%81%A8%E3%81%97%E3%81%A6%E6%9C%80%E8%89%AF%E3%81%AE%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>根拠から考える、就職・転職として最良の方法</h3>\n<p data-sourcepos=\"127:1-127:136\"><strong>転職するためにスクールに入るぐらいなら、まずは転職を成功してからスクールで学びましょう。</strong></p>\n<p data-sourcepos=\"129:1-131:198\">元採用担当者という立場で見ると、プログラミングスクールで学んだ方と未経験の方は同じテーブルで考えます。<br>\nこれはなぜかというと、プログラミングスクール出身者はプログラミングが好きでスクールに入ったわけではないからです。<br>\n信用できないスクールが指導したために入社希望の方に変な手垢がついてしまっていた分、プログラミングスクール出身者の方は取りにくいです。</p>\n<p data-sourcepos=\"133:1-133:214\">また、変な野心を持っている<sup><a href=\"#fn-1\" id=\"fnref-1\">1</a></sup>ことが多いので、だいたい１年ぐらい勤めたら独立されてしまう（企業としてペイできない）ので、警戒心も当然高まります。</p>\n<p data-sourcepos=\"135:1-136:291\">プログラミングスクールにお金を払って行ったのに、何もしていない人と比べて不利になるぐらいなら、最初から未経験として、会社に入ってからやりたい事を伝えた方がまだマシです。<br>\n長く就活を続けると内定を取るのが目的になりますが、自分と合っていない会社に無理やり入っても楽しくないので、あなたが「この会社は合ってないな」と思ったらお祈りした方がお互いにとって良いと思います。</p>\n<h3 data-sourcepos=\"138:1-138:67\">\n<span id=\"根拠から考える採用教育として最良の方法\" class=\"fragment\"></span><a href=\"#%E6%A0%B9%E6%8B%A0%E3%81%8B%E3%82%89%E8%80%83%E3%81%88%E3%82%8B%E6%8E%A1%E7%94%A8%E6%95%99%E8%82%B2%E3%81%A8%E3%81%97%E3%81%A6%E6%9C%80%E8%89%AF%E3%81%AE%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>根拠から考える、採用・教育として最良の方法</h3>\n<p data-sourcepos=\"139:1-140:241\"><strong>研修内容は可能な限り現場レビューをいれるようにしましょう。</strong><br>\n（とはいえ、大体の企業様は外部企業を入れるような大掛かりな研修をやらない or OJTの現場主義を採用される事がほとんどですので、外部企業をいれたケースを想定しています）</p>\n<p data-sourcepos=\"142:1-146:288\">まずそもそも、何のために研修をしているのかを伝えないと学習効果が薄まります。<br>\n講師が指導できるのはあくまで「カリキュラムを修了したら今とどう違っているのか」想像してもらうことだけです。<br>\nたとえば「IT基礎理論」という講演があり、受講者に取り組んでもらう前に「IT基礎理論を理解すると◯◯が理解できるようになります」という話をします。<br>\nが、これは「◯◯を理解しても何の役に立つんですか？」というイメージを沸かせる事はできません。<br>\n従って、事前に「研修が終わったらこういう事をやってもらいます」という話を入社後〜研修前に受講者の方にお伝えいただけないと、講演する側にもゴールが見えず、何を指導すれば良いか分からなくなります。</p>\n<h4 data-sourcepos=\"148:1-148:26\">\n<span id=\"ケーススタディ\" class=\"fragment\"></span><a href=\"#%E3%82%B1%E3%83%BC%E3%82%B9%E3%82%B9%E3%82%BF%E3%83%87%E3%82%A3\"><i class=\"fa fa-link\"></i></a>ケーススタディ</h4>\n<p data-sourcepos=\"149:1-149:69\">ちょっとイメージが難しい話なので例を挙げます。</p>\n<ul data-sourcepos=\"151:1-153:0\">\n<li data-sourcepos=\"151:1-151:35\">教育事業社にほぼ丸投げ</li>\n<li data-sourcepos=\"152:1-153:0\">人事の強い拘りによる指導方針を求める</li>\n</ul>\n<p data-sourcepos=\"154:1-155:57\">の２つを見ていきます。<br>\nそれぞれ対照的なケースを取り上げます。</p>\n<hr data-sourcepos=\"157:1-157:3\">\n<p data-sourcepos=\"158:1-160:48\">大体の場合、まずは営業と教育事業マネージャーが入って研修方針を固めます。<br>\nが、この場には新卒者（受講者）と講師（実務担当）はほぼ介在しないです。<br>\nこの時に絶対に議論できないのが、</p>\n<ul data-sourcepos=\"162:1-170:0\">\n<li data-sourcepos=\"162:1-165:39\">どういった講師がいるのか\n<ul data-sourcepos=\"163:5-165:39\">\n<li data-sourcepos=\"163:5-163:54\">何を教えるのに特化した講師なのか</li>\n<li data-sourcepos=\"164:5-164:60\">講師はどんな指導スタイルが得意なのか</li>\n<li data-sourcepos=\"165:5-165:39\">社風を理解しているのか</li>\n</ul>\n</li>\n<li data-sourcepos=\"166:1-170:0\">どういった受講者がいるのか\n<ul data-sourcepos=\"167:5-170:0\">\n<li data-sourcepos=\"167:5-167:18\">受講者数</li>\n<li data-sourcepos=\"168:5-168:24\">受講者の来歴</li>\n<li data-sourcepos=\"169:5-170:0\">受講者間の相関</li>\n</ul>\n</li>\n</ul>\n<p data-sourcepos=\"171:1-171:18\">の二点です。</p>\n<p data-sourcepos=\"173:1-175:170\">まず講師について触れますと、講師によって得意とする講義スタイルは微妙に異なります。<br>\nこの辺りは塾や予備校、家庭教師を想像してもらえれば分かりやすいです。<br>\nそして、残念ながらITスクールの講師はプロパーでも教える側の専門家ではない（教育者ではない）事が考慮されていません。</p>\n<p data-sourcepos=\"177:1-177:219\">講師側は研修なので画一的に指導しますが、当然ながら受講者との信頼関係が大きく影響しますので、人間的に合う・合わないは社会人でも出てきてしまいます。</p>\n<hr data-sourcepos=\"179:1-180:0\">\n<hr data-sourcepos=\"181:1-182:0\">\n<p data-sourcepos=\"183:1-183:120\">思った以上に長くなったんで、個人がやるべき・できる事については別記事で扱います。</p>\n<p data-sourcepos=\"185:1-185:11\">##　注釈</p>\n<h2 data-sourcepos=\"188:1-188:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"189:1-191:0\">\n<li data-sourcepos=\"189:1-189:51\"><a href=\"https://qiita.com/nomurasan/items/\">(23日目) </a></li>\n<li data-sourcepos=\"190:1-191:0\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n<section class=\"footnotes\">\n<ol>\n<li id=\"fn-1\">\n<p data-sourcepos=\"186:7-186:261\">【スクール卒業生が持つ変な野心】個人としてみると、目標があるのは立派なことだと思います。ただし、採用サイドからすると会社利益にならない個人の野心は非常に扱いにくいのです。 <a href=\"#fnref-1\" class=\"\">↩</a></p>\n</li>\n</ol>\n</section>\n",
        "body": "## 注意\n※ポエムです\n※来年は第一線に戻ろうと思っている元エンジニア講師の私個人の感想です\n※会社や環境が変われば、真逆のご意見もあるかと思います\n\n## 想定読者\n- プログラミングスクールに入ろうと考えている方\n- 転職希望のエンジニアの方\n- 現場採用ご担当者\n\n## 言いたいこと\nIT教育でもプログラミング・アルゴリズム以外でもある程度は就職・転職スキルを会社ごとにカスタマイズ（≒最適化）するべき。\n\n## 本稿執筆に向けてやったこと\n- 機会あって親戚（文系・プログラミング未経験・社会人）をエンジニア研修\n\n本人からは喜ばれましたが、はたしてエンジニア採用に受かったのかどうか…。\n今後の動向を注視していますが、今後も報告できる事はないかもしれません。\n\n### 現状の問題\n就活においてエンジニアの採用ミスマッチの問題が、そのままスクール事業社の考えるエンジニア像と、エンジニアリング事業社の求めるエンジニア像のミスマッチになっています。\nそのため、スクール事業社はコースを手広くやるより、ニッチに尖らせた方が質が高くなりやすい傾向があります。\nこれは、案件ごとに特化した指導ができた方がプロジェクトに参画しやすくなるのは自明ですが、他の案件も見据えた「現場主義」が意識されているかどうかの問題とも言えます。\n\n#### 具体例\n新卒研修の例を考えます。\n事業者が指導しているオープンスクールは、個別具体のケースには対応せず、一般的に技術とはこういうものです、と指導するのが主なアプローチです。\n\nこれを、企業ごとに重視している内容にフォーカスすると、実務で採用しているケースを交えて、より身近なものとして意識を促しやすいため、受講生目線での「講義での重要なポイント」を推測しやすくなります。\n特にプログラミング等実技研修より概論（手を動かさないでサーバーの話やチーム開発理論など）の学習効果が高くなる傾向が見られました。\n（残念ながらソースは出せないですが、私が見てきた受講生の座学テストデータや、テストで間違えた点を復習する時の受講生コメントなどによります）\n\n### 就職・転職希望者の対策\nこれからエンジニアを目指したいなら、とりあえずで入るプログラミングスクールよりも、エンジニア人材派遣事業社が推進している教育機関や事業を狙うほうがよいです。\nそもそも、仕事をするためにお金を払ってスクールに行くのではなく、既に持っているスキルをより高めるために投資した方が費用対効果やリスク面でメリットが大きいので、プログラミングスクールに行く前に未経験でエンジニア採用を探した方が良いですね。\nとはいえ、かなりハードルは高いです。一昔前ならともかく、今はプログラミングスクールもピンキリですし、人事（現場）によっては最初から戦力だと考えていない事もあります。\n\nこれらを踏まえるとぶっちゃけ、一次面接は現場をご存知でない方が出てくるのでエンジニアリングスキルより演技力を磨いた方がいい。\nまた、二次面接は自分よりも上位スキルを持った人間が出てくるので、自分よりエンジニアリングスキルが高い事を意識して話す内容を考えた方が有意義でしょう。\nなお、採用担当（人事）とは**面接のプロではない人**なので、相手のコミュニケーションスキルが低い事があります。\n採用者のプレゼンスキルによっては、代わりに自分がその場を仕切るつもりで臨んだ方がうまくいく事があります。\n\n### 採用事業社の対策\nまずは採用側の観点で見ていきます。\nだいたい三次面接までされると思いますが、採用の悩みとして多い\n\n- 書類と一次選考のコスト\n- 応募者のスキルや条件面\n- 社風に合うか合わないか\n\nの３つをどうやって見定めるか、という観点で見ていきましょう。\n\n#### 書類選考のポイント\n正直、このタイミングでは応募者がどういう人間か見定めるのはほぼ不可能です。\nなので、書類で選ぶというよりは求人の出し方が正しかったかどうかを、書類選考の過程で見直した方が良い事が多いです。\n応募が多い場合は選考コストばかりをかけてムダになり、応募が少ないと条件面以外にも求人の出し方が分かりにくいので応募者に避けられてしまっている可能性もありえます。\n\nこういう状況を踏まえると、書類選考する必要がないと思ってもらえるように書類を送付する前・後ぐらいのタイミングで核心をつく質問を４つぐらい投げてみて、人事の動向を窺うという方法を取らせてもらってます。\nエージェントが入っている場合は、エージェントを介していますが、経歴書類を求人に合わせて最適化していく方法もあります。\n要は、書類選考後の選考フロー云々だとタイミングによっては選考すらしない事があるため（怖いことに実話です。どことは言えないですが）、選考以外の方法で印象を持たせる必要性を感じています。\n\n#### 一次面接\nここで重視すべきは「応募者のスキルを見極める」のではなく「応募者を一人の営業マンとして見た時に信用できるかどうか」という観点であることを、面接前に応募者に伝えておくことです。\n腹の探り合いみたいな面接に意味はないので、求人を出した募集背景や求める人材かどうかの擦り合わせ・共通認識が取れているかどうかの確認に努めるべきです。\n\nとはいえ、応募者はうまい事やってくるので、人事サイド（非現場）としては条件面でのミスマッチになっていないかどうかだけ見定めて、後は現場に投げてしまうのも一つの方法です。\n\n応募者の立場から言えば、ここでやるべきは準備体操のような面談（面接）です。\n条件の擦り合わせの場と割り切って、自分の認識している内容と求人に食い違いがないか確認する場としてとどめておきましょう。\nこれでダメなら「社風に合わない」が大体のお断り理由です。こればかりはどうにもならないので諦めて次を求めましょう。\n\n#### 二次面接\n目的は往々にして応募者のスキルを測る事にあるが、覚えているかどうかを測る筆記テストよりは現場レベルでの課題や問題を応募者に提示し、どのように解決を見出すのか見定めるのがベターです。\nおそらく、リーダークラスの方が出られる事が多いはずなので、現在のチームに応募者が加わるとどういう変化が起こるのか、想像はできるかと思います。\nまた、未経験者が現場でやっていけるかどうかを現状のスキルで測るのはあまり良い方法ではない事をご存知のはずなので、応募者が回答に困るようであれば情報を追加していくと設問自体の不足に気付いていけるはずです。\nなお、企業スパイを警戒される方はここでは取り上げない事にします。話がややこしくなるためです。\n\n応募者としては、自身のスキルや方針など考え方と、既存のチームの問題点をヒアリングしてみて、解決可能かどうかをテーマに意見交換してみましょう。\n思った以上に上手くいくと思います。\n\n#### 三次面接\n会社ごとに大事にしている事柄があると思うので、そちらを受講者とのすり合わせにしていただくと良いです。\nただし、**応募者は間違いなく演技をしている**ので、会社からの要望を伝えて認識合わせをする場としてしまう手もあります。\nこの時、率直に感想と解決策を求めてみてください。この回答が腑に落ちれば、採用後のリスクを抑えやすくなると思います。\n\n応募者側の話になりますが、ここまでに嘘をつくメリットがあまりないんですよね。\nというのも、採用がゴールではないからです。採用後にチームとしてやっていけるか？という観点で見ると、二次面接の段階から忌憚のない意見をぶつけていっていいと思います。\n面接だと思うと萎縮してしまうかもしれませんが、採用されて社内的に立場が決定するまでは会社を超えて対等な関係であるはずです。\n「採用していただく」という受け身の姿勢ではなく「この会社で活躍の場はあるのか？」という攻めの姿勢で臨んでください。\n\n### スクール事業社の対策\n派遣登録者を有料で斡旋するスクール事業をやる手がありそうです。\nあるいは、専属の教育を施す委託業社と契約する（登録スタッフを教育事業社に送るなど）方法で、他のエンジニア派遣業社と差別化していけそうです。\n\ntoCだけど、toBのメリットや要素、営業を入れていくと講師はともかく、目的が明確になった分カリキュラムのクオリティを上げていけるはずです。\n\n---\n\n## やったこと\n結論に至るまでに私がなぜこのように考えるに至ったかを示していきます。\n\n- toC事業社\n  - 会議式講演型：ティーチング・コーチング\n  - オンライン1on1型：コーチング（一部ティーチング）\n- toB事業社\n  - 会議式講演型：ティーチング\n  - オンライン講演型：ティーチング\n  - オンライン1on1型：コーチング\n\n## 定義：ティーチング・コーチング\n人によって定義が曖昧なので、ここでは\n\n- ティーチング：聞き手が知らない事を教える（教科書やカリキュラムページ）\n- コーチング：聞き手がやりたい事を導く（質疑応答、自主制作）\n\nとしておきます。\n（本当はもっと細かいのですが、話がややこしくなるのでざっくりと上記にしました）\n\n## 結論の根拠\nまず、toBとtoCの教育事業で受講者のスキルに明確な差が出ました。\n資料を提示できないのが悔しいですが、私感で平均値あるいは中央値を取ってみてもtoBの受講者の方が質が高くなります。\nただし、toBはだいたい1〜3ヶ月、toCは長くて１年近く学べるので、個人の納得度（仕上がりの良さとは連動していません）が高いのはスクールです。\n\nそもそも、研修後にすぐ業務で活かしていくtoB受講者と、これから転職活動をしていくtoC受講者ではモチベーションが違うので仕方がないのかも知れません。\n\n### 根拠から考える、就職・転職として最良の方法\n**転職するためにスクールに入るぐらいなら、まずは転職を成功してからスクールで学びましょう。**\n\n元採用担当者という立場で見ると、プログラミングスクールで学んだ方と未経験の方は同じテーブルで考えます。\nこれはなぜかというと、プログラミングスクール出身者はプログラミングが好きでスクールに入ったわけではないからです。\n信用できないスクールが指導したために入社希望の方に変な手垢がついてしまっていた分、プログラミングスクール出身者の方は取りにくいです。\n\nまた、変な野心を持っている[^1]ことが多いので、だいたい１年ぐらい勤めたら独立されてしまう（企業としてペイできない）ので、警戒心も当然高まります。\n\nプログラミングスクールにお金を払って行ったのに、何もしていない人と比べて不利になるぐらいなら、最初から未経験として、会社に入ってからやりたい事を伝えた方がまだマシです。\n長く就活を続けると内定を取るのが目的になりますが、自分と合っていない会社に無理やり入っても楽しくないので、あなたが「この会社は合ってないな」と思ったらお祈りした方がお互いにとって良いと思います。\n\n### 根拠から考える、採用・教育として最良の方法\n**研修内容は可能な限り現場レビューをいれるようにしましょう。**\n（とはいえ、大体の企業様は外部企業を入れるような大掛かりな研修をやらない or OJTの現場主義を採用される事がほとんどですので、外部企業をいれたケースを想定しています）\n\nまずそもそも、何のために研修をしているのかを伝えないと学習効果が薄まります。\n講師が指導できるのはあくまで「カリキュラムを修了したら今とどう違っているのか」想像してもらうことだけです。\nたとえば「IT基礎理論」という講演があり、受講者に取り組んでもらう前に「IT基礎理論を理解すると◯◯が理解できるようになります」という話をします。\nが、これは「◯◯を理解しても何の役に立つんですか？」というイメージを沸かせる事はできません。\n従って、事前に「研修が終わったらこういう事をやってもらいます」という話を入社後〜研修前に受講者の方にお伝えいただけないと、講演する側にもゴールが見えず、何を指導すれば良いか分からなくなります。\n\n#### ケーススタディ\nちょっとイメージが難しい話なので例を挙げます。\n\n- 教育事業社にほぼ丸投げ\n- 人事の強い拘りによる指導方針を求める\n\nの２つを見ていきます。\nそれぞれ対照的なケースを取り上げます。\n\n---\n大体の場合、まずは営業と教育事業マネージャーが入って研修方針を固めます。\nが、この場には新卒者（受講者）と講師（実務担当）はほぼ介在しないです。\nこの時に絶対に議論できないのが、\n\n- どういった講師がいるのか\n    - 何を教えるのに特化した講師なのか\n    - 講師はどんな指導スタイルが得意なのか\n    - 社風を理解しているのか\n- どういった受講者がいるのか\n    - 受講者数\n    - 受講者の来歴\n    - 受講者間の相関\n\nの二点です。\n\nまず講師について触れますと、講師によって得意とする講義スタイルは微妙に異なります。\nこの辺りは塾や予備校、家庭教師を想像してもらえれば分かりやすいです。\nそして、残念ながらITスクールの講師はプロパーでも教える側の専門家ではない（教育者ではない）事が考慮されていません。\n\n講師側は研修なので画一的に指導しますが、当然ながら受講者との信頼関係が大きく影響しますので、人間的に合う・合わないは社会人でも出てきてしまいます。\n\n---\n\n---\n\n思った以上に長くなったんで、個人がやるべき・できる事については別記事で扱います。\n\n##　注釈\n[^1]: 【スクール卒業生が持つ変な野心】個人としてみると、目標があるのは立派なことだと思います。ただし、採用サイドからすると会社利益にならない個人の野心は非常に扱いにくいのです。\n\n## 次の記事\n- [(23日目) ](https://qiita.com/nomurasan/items/)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-17T01:47:32+09:00",
        "group": null,
        "id": "a9d59eff0c2642833644",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "ポエム",
                "versions": []
            }
        ],
        "title": "家庭教育（プログラミング）に取り組んだ体験から後進育成（IT教育）と採用・被採用について思ったこと",
        "updated_at": "2022-12-22T02:18:01+09:00",
        "url": "https://qiita.com/nomurasan/items/a9d59eff0c2642833644",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 543,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<p data-sourcepos=\"1:1-1:15\">本稿では、</p>\n<ul data-sourcepos=\"3:1-6:0\">\n<li data-sourcepos=\"3:1-3:59\">たかがwordpressのためにお金を払いたくない</li>\n<li data-sourcepos=\"4:1-4:47\">Webサービスにお金を払いたくない</li>\n<li data-sourcepos=\"5:1-6:0\">無料ホスティングはいっぱいあるのに、動的サービスが有料なのはおかしい</li>\n</ul>\n<p data-sourcepos=\"7:1-7:105\">という、前時代的なおじさんがデモデモダッテする様子を見る事ができます。</p>\n<h2 data-sourcepos=\"9:1-9:33\">\n<span id=\"wordpressって使えるの\" class=\"fragment\"></span><a href=\"#wordpress%E3%81%A3%E3%81%A6%E4%BD%BF%E3%81%88%E3%82%8B%E3%81%AE\"><i class=\"fa fa-link\"></i></a>WordPressって使えるの？</h2>\n<p data-sourcepos=\"10:1-10:129\">A. アウトプットが目的でなければアリ、アウトプットツールとして使いたいだけならナシです。</p>\n<p data-sourcepos=\"12:1-12:126\">要するに、wordpressの案件をやりたいなら使うべきで、そうでなければ使うべきではないです。</p>\n<h3 data-sourcepos=\"14:1-14:39\">\n<span id=\"個人レベルでdbは必要ない\" class=\"fragment\"></span><a href=\"#%E5%80%8B%E4%BA%BA%E3%83%AC%E3%83%99%E3%83%AB%E3%81%A7db%E3%81%AF%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>個人レベルでDBは必要ない</h3>\n<p data-sourcepos=\"15:1-15:140\">WordPressというより動的CMSを全否定しますが、個人のアウトプットツールとして考えると、DBは不要です。</p>\n<p data-sourcepos=\"17:1-19:269\">たとえば個人で使用している2台のPCがあり、どちらもほどほどに使っているとします。<br>\n筆者の環境でもWindowsPC(WSL)とMacPCの２台が存在しており、案件に合わせて使い分けています。<br>\nこの２台にwordpressを入れた後に、片方の更新をもう一方のPCに適用するのに手動で操作したり、gitなどを使ってプラグインなどを最新化した後にデータベースを書き換える必要があるかもしれません。</p>\n<p data-sourcepos=\"21:1-21:289\">DBの代わりになるファイル（いわゆるテキストDB）を作って、そちらを読み込む事で解決できればgit管理もできそうですが、wordpressの場合はなんだかんだでうまく行ったり行かなかったりするので非推奨です（２敗）</p>\n<h3 data-sourcepos=\"23:1-23:16\">\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h3>\n<p data-sourcepos=\"24:1-25:95\">ローカルPCでwordpressの運用をしないのがベターです。<br>\nつまり、クラウドPCを作ってその中にwordpressを入れれば解決できます。</p>\n<p data-sourcepos=\"27:1-30:144\">もう一つの手段としては、wordpressを入れた端末にネットワーク経由でアクセスする方法です。<br>\nリモートツールを使っても構いません。<br>\nただし、wordpressを入れた端末を落とす時に、リモート接続される可能性を考えるとなかなか電源を落としにくくなります。<br>\nまた、いつでも気軽に電源を落とせないとなると、電気代が気になるのであまり良い選択とは言えません。</p>\n<p data-sourcepos=\"32:1-32:57\">あなたの環境に合わせて選んでください。</p>\n<h2 data-sourcepos=\"34:1-34:18\">\n<span id=\"求める要件\" class=\"fragment\"></span><a href=\"#%E6%B1%82%E3%82%81%E3%82%8B%E8%A6%81%E4%BB%B6\"><i class=\"fa fa-link\"></i></a>求める要件</h2>\n<ul data-sourcepos=\"35:1-52:0\">\n<li data-sourcepos=\"35:1-35:18\"><strong>完全無料</strong></li>\n<li data-sourcepos=\"36:1-37:55\">収益化できる（＝アフィリエイトが容易）\n<ul data-sourcepos=\"37:3-37:55\">\n<li data-sourcepos=\"37:3-37:55\">マルチサイト・マルチブログができる</li>\n</ul>\n</li>\n<li data-sourcepos=\"38:1-38:29\">ページの表示が爆速</li>\n<li data-sourcepos=\"39:1-52:0\">\n<strong>運用でイラつかない</strong>\n<ul data-sourcepos=\"40:3-52:0\">\n<li data-sourcepos=\"40:3-40:28\">記事の書きやすさ</li>\n<li data-sourcepos=\"41:3-41:34\">プレビュー機能がある</li>\n<li data-sourcepos=\"42:3-42:28\">ビルド時間が短い</li>\n<li data-sourcepos=\"43:3-43:34\">簡単で直感的な操作性</li>\n<li data-sourcepos=\"44:3-44:37\">開発時に環境を選ばない</li>\n<li data-sourcepos=\"45:3-45:34\">技術的要件が高くない</li>\n<li data-sourcepos=\"46:3-49:48\">メンテナンスコストが少ない\n<ul data-sourcepos=\"47:5-49:48\">\n<li data-sourcepos=\"47:5-47:27\">バニラで使える</li>\n<li data-sourcepos=\"48:5-48:45\">障害発生時の原因特定が容易</li>\n<li data-sourcepos=\"49:5-49:48\">バックアップ・リストアが容易</li>\n</ul>\n</li>\n<li data-sourcepos=\"50:3-50:53\">markdownに独自性がある（拡張markdown）</li>\n<li data-sourcepos=\"51:3-52:0\">fontawesomeが使える</li>\n</ul>\n</li>\n</ul>\n<p data-sourcepos=\"53:1-54:132\">書いていて、婚活かなんかを想起しました…。<br>\n要求は多いですが、可能な限り満たせる（＝全部が出来なくても良い）ように検討していきます。</p>\n<h3 data-sourcepos=\"56:1-56:34\">\n<span id=\"要件を満たす解決方法\" class=\"fragment\"></span><a href=\"#%E8%A6%81%E4%BB%B6%E3%82%92%E6%BA%80%E3%81%9F%E3%81%99%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>要件を満たす解決方法</h3>\n<p data-sourcepos=\"57:1-59:150\">WordPressにはプラグインがあります。<br>\nこれがとても優秀で、導入すると当然バニラではなくなりますが、やりたい事（複雑な事）は大体先駆者がいい感じにやって公開してくれています。<br>\n後は必要な情報を集めて、あるいは試行錯誤しながら導入をしてみてうまくいったものを採用すればよいです。</p>\n<p data-sourcepos=\"61:1-63:99\">今年に私が運用してみたところ、要件のほとんどを解決する事ができました。<br>\nが、結局WordPressを選ばなかったため、導入は見送っています。<br>\n今回WordPressで解決できたことと、見送った理由について触れていきます。</p>\n<h3 data-sourcepos=\"65:1-65:85\">\n<span id=\"異なる端末で環境構築ができない冪等性を担保できない\" class=\"fragment\"></span><a href=\"#%E7%95%B0%E3%81%AA%E3%82%8B%E7%AB%AF%E6%9C%AB%E3%81%A7%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E5%86%AA%E7%AD%89%E6%80%A7%E3%82%92%E6%8B%85%E4%BF%9D%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>異なる端末で環境構築ができない（冪等性を担保できない）</h3>\n<p data-sourcepos=\"66:1-67:525\">まず、これが致命的でした。<br>\nバックアップやリストアの手順は確立しているので、新規で導入する環境も同様の操作をすれば良いのですが、問題は端末ごとに環境が異なるため、プラグインの設定（パス情報など、データベース側）を都度いじる必要があり、バックアップ促進のため開発環境ごとgitに入れていたのですが、同一環境のためのバックアップとなってしまい、本来想定していた運用ができなくなりました。</p>\n<p data-sourcepos=\"69:1-71:180\">たとえば、ハイパワーマシンでビルド、シンクライアントで記事を作成したい場合は活用できません。<br>\nこれを実現する場合、ハイパワーマシンに接続できるようにして、シンクライアントから記事を作成する方法が手っ取り早いですが、ネットワークから遮断されるとこの方法もうまくいきません。<br>\n今回はたまたまネットワークが不安定な場所でマシンを触る機会が多かったため、代案もうまくいかず運用が破綻してしまいました。</p>\n<h3 data-sourcepos=\"73:1-73:34\">\n<span id=\"ビルドに時間がかかる\" class=\"fragment\"></span><a href=\"#%E3%83%93%E3%83%AB%E3%83%89%E3%81%AB%E6%99%82%E9%96%93%E3%81%8C%E3%81%8B%E3%81%8B%E3%82%8B\"><i class=\"fa fa-link\"></i></a>ビルドに時間がかかる</h3>\n<p data-sourcepos=\"74:1-77:123\">記事数が増えればどうしてもビルドに時間がかかるようになってしまいます。<br>\nこれは静的サイトジェネレーターを使うなら許容するしかない事象です。<br>\n組み方にも寄ると思いますが、200記事のうち、1記事を更新するだけでもビルドに30分掛かるようになってきた頃から、精神衛生上よろしくないので運用が難しく感じてきました。<br>\nせっかくgitを使うので、差分だけ取って更新する仕組みを最初から考えておくべきでした。</p>\n<h3 data-sourcepos=\"79:1-79:61\">\n<span id=\"メンテナンスバージョンアップが面倒\" class=\"fragment\"></span><a href=\"#%E3%83%A1%E3%83%B3%E3%83%86%E3%83%8A%E3%83%B3%E3%82%B9%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%83%E3%83%97%E3%81%8C%E9%9D%A2%E5%80%92\"><i class=\"fa fa-link\"></i></a>メンテナンス（バージョンアップ）が面倒</h3>\n<p data-sourcepos=\"80:1-83:366\">これはWordPressの宿命です。<br>\n結構な頻度でマイナーアップデートがされているので、しっかりと運営されているという意味では信頼感がありますが、アップデートのたびにデグレテストをするのは精神衛生上よろしくないです。<br>\nアップデートを検知したらバックアップを取って、念のためにビルドを実施しておきます。<br>\nビルドに成功すれば、アップデートをして再度ビルドし、問題なければgitに組み込む、という運用をしていたわけですが、ビルドに時間がかかりすぎたため、だんだん面倒くさくなりついにはアップデートを放置する状態になったので、思い切って捨てたという経緯です。</p>\n<h2 data-sourcepos=\"85:1-85:39\">\n<span id=\"どうすれば良かったのか\" class=\"fragment\"></span><a href=\"#%E3%81%A9%E3%81%86%E3%81%99%E3%82%8C%E3%81%B0%E8%89%AF%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>どうすれば良かったのか？</h2>\n<p data-sourcepos=\"86:1-88:393\">メンテナンスコストを許容しつつ、なるべくメンテナンスで負荷にならないよう、なるべくプラグインを使わないようにすべきでした。<br>\nプラグインは便利な反面、アップデート時のデグレテストの手間が増えます。<br>\nただし、プラグインが動くことを前提とした運用をせざるを得ない場合は、WordPress本体とほぼ同じ位置に当該プラグインの重要性を置き、将来的な変更または他とのバッティングが発生する可能性があった時は取捨選択の判断が必要になる部分を最初から考慮しておいたほうが良いでしょう。</p>\n<h3 data-sourcepos=\"90:1-90:34\">\n<span id=\"それでもcmsを使いたい\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%82%8C%E3%81%A7%E3%82%82cms%E3%82%92%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>それでもCMSを使いたい</h3>\n<p data-sourcepos=\"91:1-93:129\">なぜCMSを使いたいのか？の部分が明確でないんですが、要望として結構多いと感じたのが「自分のサイトを持ちたい」というものです。<br>\nここでは「メンテナンスはしたくないけど、自分のサイトを持ちたい。ただし、既存サイトのサービスに登録して自分のアカウントを運用するものについては自分のサイトとして扱わない」と要件定義します。<br>\n「メンテナンスが不要でなるべくバニラで使える高機能なCMSが欲しい」というお話になります。</p>\n<p data-sourcepos=\"95:1-95:202\">私が使ってきた中だけの話なので、上記要件を満たせる良いCMSがあればぜひご教示いただいたいですが、ここで推せるのは<a href=\"https://adiary.org\" rel=\"nofollow noopener\" target=\"_blank\">adiary</a>です。</p>\n<p data-sourcepos=\"97:1-97:18\"><iframe id=\"qiita-embed-content__bc2cad50521fd62a95eacc3fb968f3e2\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__bc2cad50521fd62a95eacc3fb968f3e2\" data-content=\"https%3A%2F%2Fadiary.org\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"99:1-100:309\">中身がcgi(perl)なので言語としてはかなり古めかしいですが、管理画面も含めて機能もシンプルにまとまっているため、学習コストは相当低いです。<br>\nブログの設定欄やテーマデザイナーがやや複雑ですが、この辺りはwordpressと比べてもどちらも直感的に使うにはやや難しい設計ですが、プラグインで拡張（複雑化）されるケースを考えるとバニラがベストだと思ってしまいます。</p>\n<h4 data-sourcepos=\"102:1-102:26\">\n<span id=\"執筆のしやすさ\" class=\"fragment\"></span><a href=\"#%E5%9F%B7%E7%AD%86%E3%81%AE%E3%81%97%E3%82%84%E3%81%99%E3%81%95\"><i class=\"fa fa-link\"></i></a>執筆のしやすさ</h4>\n<p data-sourcepos=\"103:1-108:213\">記事を書くためのツールであるので、絶対に触れておきたいのが執筆のしやすさです。<br>\nadiaryは記事を書く時にリアルタイムプレビューがない（運用で対処する必要がある）ため、書きやすさではWordPressに軍配が上がります。<br>\n今の御時世だと、リアルタイムプレビューが出来ないのは大きなディスアドバンテージになるので、これだけでadiaryを選択しないという判断も出来ると思います。<br>\n正直、私がadiaryからWordPressに出戻りした理由もこれです。<br>\n当時はVSCodeで書いてadiaryに移植するという書き方をしていましたが、運用に負担があるといずれ使わなくなるので、初期に感じた直感は大事にしてください。<br>\nボロクソに言っていますが、今もadiaryは独自記法の面白さやテーマの切り替えの楽さ（＝プラグインの設定）と、コミュニティ（公式サイト）は大好きです。</p>\n<h4 data-sourcepos=\"110:1-110:17\">\n<span id=\"表示速度\" class=\"fragment\"></span><a href=\"#%E8%A1%A8%E7%A4%BA%E9%80%9F%E5%BA%A6\"><i class=\"fa fa-link\"></i></a>表示速度</h4>\n<p data-sourcepos=\"111:1-113:230\">処理速度の速さをPRに打ち出しており、サイトの各所に速度を計測できるプラグインが置けるので、その自信ぶりが窺えます。<br>\n実際に１年ぐらい開発用・アフィリエイト用などで愛用していましたが、サブディレクトリ型で<br>\n凝った事をしたい場合は、直接<code>.htaccess</code>をいじる必要があるため、やや上級者向けですがWebサーバーの知識をつけるという目的には限りなくシンプルに学習しやすいです。</p>\n<p data-sourcepos=\"115:1-116:185\">また、実際にサーバーをいじれる環境なら、<code>.htaccess</code>ではなくconfファイルを書き換えてみましょう。<br>\n設定によっては更に高速化が期待できます。分かりやすいのはアクセスが多くなったサイトをapacheからnginxに移行してみた話とかですね。</p>\n<h4 data-sourcepos=\"118:1-118:26\">\n<span id=\"メンテナンス性\" class=\"fragment\"></span><a href=\"#%E3%83%A1%E3%83%B3%E3%83%86%E3%83%8A%E3%83%B3%E3%82%B9%E6%80%A7\"><i class=\"fa fa-link\"></i></a>メンテナンス性</h4>\n<p data-sourcepos=\"119:1-121:127\">なお、これはadiaryだろうがWordPressだろうが、自前でサーバーを持つ・運用するということはサーバーメンテナンスのコスト自体から逃れる事はできません。<br>\n自身でメンテナンスしたくない場合はやはりSaasかPaasがベストですが、今回の要件（既存のサイトに～）を考えると考えようによってはIaasでさえも要件から外れる可能性があります。<br>\nどちらにせよ、Iaas以上の管理を要求される場合はメンテナンスコストからは逃れられません。</p>\n<h2 data-sourcepos=\"123:1-123:78\">\n<span id=\"エンジニアのアウトプットツールとしてwordpressを考える\" class=\"fragment\"></span><a href=\"#%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E3%82%A2%E3%82%A6%E3%83%88%E3%83%97%E3%83%83%E3%83%88%E3%83%84%E3%83%BC%E3%83%AB%E3%81%A8%E3%81%97%E3%81%A6wordpress%E3%82%92%E8%80%83%E3%81%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>エンジニアのアウトプットツールとしてwordpressを考える</h2>\n<p data-sourcepos=\"124:1-126:74\">最初に述べたとおりですが、アウトプットが目的でなければアリ、アウトプットツールとして使いたいだけならナシです。<br>\nアウトプットに集中したい場合は、シンプルにQiitaやnoteをはじめとしたブログサービスを使いましょう。<br>\n公開しないのであれば、evernoteなんかもオススメです。</p>\n<p data-sourcepos=\"128:1-129:234\">要望が多くなればなるほど、技術的要件が高くなるのは実務でも同じですね。<br>\n機能は多くの要望を叶えるより、運用でカバーできるものは対応しない方に進めるのが、運用も見据えた長期的なカスタマイズパッケージとしては優秀なのかもしれません。</p>\n<p data-sourcepos=\"131:1-132:138\">アウトプットを目的にしないのであれば、よく使われているwordpressの仕様やアップデート状況などを把握する意味でも、普段使いをしておくと近況に敏感になれます。<br>\nまた、wordpress独自のナレッジも蓄積されるので、案件獲得を目指すなら積極的に活用してみましょう。</p>\n<h2 data-sourcepos=\"134:1-134:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"135:1-136:88\">\n<li data-sourcepos=\"135:1-135:214\"><a href=\"https://qiita.com/nomurasan/items/a9d59eff0c2642833644\" id=\"reference-2d9543b8b1eaf9801b13\">(21日目) 家庭教育（プログラミング）に取り組んだ体験から後進育成（IT教育）と採用・被採用について思ったこと</a></li>\n<li data-sourcepos=\"136:1-136:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n",
        "body": "本稿では、\n\n- たかがwordpressのためにお金を払いたくない\n- Webサービスにお金を払いたくない\n- 無料ホスティングはいっぱいあるのに、動的サービスが有料なのはおかしい\n\nという、前時代的なおじさんがデモデモダッテする様子を見る事ができます。\n\n## WordPressって使えるの？\nA. アウトプットが目的でなければアリ、アウトプットツールとして使いたいだけならナシです。\n\n要するに、wordpressの案件をやりたいなら使うべきで、そうでなければ使うべきではないです。\n\n### 個人レベルでDBは必要ない\nWordPressというより動的CMSを全否定しますが、個人のアウトプットツールとして考えると、DBは不要です。\n\nたとえば個人で使用している2台のPCがあり、どちらもほどほどに使っているとします。\n筆者の環境でもWindowsPC(WSL)とMacPCの２台が存在しており、案件に合わせて使い分けています。\nこの２台にwordpressを入れた後に、片方の更新をもう一方のPCに適用するのに手動で操作したり、gitなどを使ってプラグインなどを最新化した後にデータベースを書き換える必要があるかもしれません。\n\nDBの代わりになるファイル（いわゆるテキストDB）を作って、そちらを読み込む事で解決できればgit管理もできそうですが、wordpressの場合はなんだかんだでうまく行ったり行かなかったりするので非推奨です（２敗）\n\n### 解決方法\nローカルPCでwordpressの運用をしないのがベターです。\nつまり、クラウドPCを作ってその中にwordpressを入れれば解決できます。\n\nもう一つの手段としては、wordpressを入れた端末にネットワーク経由でアクセスする方法です。\nリモートツールを使っても構いません。\nただし、wordpressを入れた端末を落とす時に、リモート接続される可能性を考えるとなかなか電源を落としにくくなります。\nまた、いつでも気軽に電源を落とせないとなると、電気代が気になるのであまり良い選択とは言えません。\n\nあなたの環境に合わせて選んでください。\n\n## 求める要件\n- **完全無料**\n- 収益化できる（＝アフィリエイトが容易）\n  - マルチサイト・マルチブログができる\n- ページの表示が爆速\n- **運用でイラつかない**\n  - 記事の書きやすさ\n  - プレビュー機能がある\n  - ビルド時間が短い\n  - 簡単で直感的な操作性\n  - 開発時に環境を選ばない\n  - 技術的要件が高くない\n  - メンテナンスコストが少ない\n    - バニラで使える\n    - 障害発生時の原因特定が容易\n    - バックアップ・リストアが容易\n  - markdownに独自性がある（拡張markdown）\n  - fontawesomeが使える\n\n書いていて、婚活かなんかを想起しました…。\n要求は多いですが、可能な限り満たせる（＝全部が出来なくても良い）ように検討していきます。\n\n### 要件を満たす解決方法\nWordPressにはプラグインがあります。\nこれがとても優秀で、導入すると当然バニラではなくなりますが、やりたい事（複雑な事）は大体先駆者がいい感じにやって公開してくれています。\n後は必要な情報を集めて、あるいは試行錯誤しながら導入をしてみてうまくいったものを採用すればよいです。\n\n今年に私が運用してみたところ、要件のほとんどを解決する事ができました。\nが、結局WordPressを選ばなかったため、導入は見送っています。\n今回WordPressで解決できたことと、見送った理由について触れていきます。\n\n### 異なる端末で環境構築ができない（冪等性を担保できない）\nまず、これが致命的でした。\nバックアップやリストアの手順は確立しているので、新規で導入する環境も同様の操作をすれば良いのですが、問題は端末ごとに環境が異なるため、プラグインの設定（パス情報など、データベース側）を都度いじる必要があり、バックアップ促進のため開発環境ごとgitに入れていたのですが、同一環境のためのバックアップとなってしまい、本来想定していた運用ができなくなりました。\n\nたとえば、ハイパワーマシンでビルド、シンクライアントで記事を作成したい場合は活用できません。\nこれを実現する場合、ハイパワーマシンに接続できるようにして、シンクライアントから記事を作成する方法が手っ取り早いですが、ネットワークから遮断されるとこの方法もうまくいきません。\n今回はたまたまネットワークが不安定な場所でマシンを触る機会が多かったため、代案もうまくいかず運用が破綻してしまいました。\n\n### ビルドに時間がかかる\n記事数が増えればどうしてもビルドに時間がかかるようになってしまいます。\nこれは静的サイトジェネレーターを使うなら許容するしかない事象です。\n組み方にも寄ると思いますが、200記事のうち、1記事を更新するだけでもビルドに30分掛かるようになってきた頃から、精神衛生上よろしくないので運用が難しく感じてきました。\nせっかくgitを使うので、差分だけ取って更新する仕組みを最初から考えておくべきでした。\n\n### メンテナンス（バージョンアップ）が面倒\nこれはWordPressの宿命です。\n結構な頻度でマイナーアップデートがされているので、しっかりと運営されているという意味では信頼感がありますが、アップデートのたびにデグレテストをするのは精神衛生上よろしくないです。\nアップデートを検知したらバックアップを取って、念のためにビルドを実施しておきます。\nビルドに成功すれば、アップデートをして再度ビルドし、問題なければgitに組み込む、という運用をしていたわけですが、ビルドに時間がかかりすぎたため、だんだん面倒くさくなりついにはアップデートを放置する状態になったので、思い切って捨てたという経緯です。\n\n## どうすれば良かったのか？\nメンテナンスコストを許容しつつ、なるべくメンテナンスで負荷にならないよう、なるべくプラグインを使わないようにすべきでした。\nプラグインは便利な反面、アップデート時のデグレテストの手間が増えます。\nただし、プラグインが動くことを前提とした運用をせざるを得ない場合は、WordPress本体とほぼ同じ位置に当該プラグインの重要性を置き、将来的な変更または他とのバッティングが発生する可能性があった時は取捨選択の判断が必要になる部分を最初から考慮しておいたほうが良いでしょう。\n\n### それでもCMSを使いたい\nなぜCMSを使いたいのか？の部分が明確でないんですが、要望として結構多いと感じたのが「自分のサイトを持ちたい」というものです。\nここでは「メンテナンスはしたくないけど、自分のサイトを持ちたい。ただし、既存サイトのサービスに登録して自分のアカウントを運用するものについては自分のサイトとして扱わない」と要件定義します。\n「メンテナンスが不要でなるべくバニラで使える高機能なCMSが欲しい」というお話になります。\n\n私が使ってきた中だけの話なので、上記要件を満たせる良いCMSがあればぜひご教示いただいたいですが、ここで推せるのは[adiary](https://adiary.org)です。\n\nhttps://adiary.org\n\n中身がcgi(perl)なので言語としてはかなり古めかしいですが、管理画面も含めて機能もシンプルにまとまっているため、学習コストは相当低いです。\nブログの設定欄やテーマデザイナーがやや複雑ですが、この辺りはwordpressと比べてもどちらも直感的に使うにはやや難しい設計ですが、プラグインで拡張（複雑化）されるケースを考えるとバニラがベストだと思ってしまいます。\n\n#### 執筆のしやすさ\n記事を書くためのツールであるので、絶対に触れておきたいのが執筆のしやすさです。\nadiaryは記事を書く時にリアルタイムプレビューがない（運用で対処する必要がある）ため、書きやすさではWordPressに軍配が上がります。\n今の御時世だと、リアルタイムプレビューが出来ないのは大きなディスアドバンテージになるので、これだけでadiaryを選択しないという判断も出来ると思います。\n正直、私がadiaryからWordPressに出戻りした理由もこれです。\n当時はVSCodeで書いてadiaryに移植するという書き方をしていましたが、運用に負担があるといずれ使わなくなるので、初期に感じた直感は大事にしてください。\nボロクソに言っていますが、今もadiaryは独自記法の面白さやテーマの切り替えの楽さ（＝プラグインの設定）と、コミュニティ（公式サイト）は大好きです。\n\n#### 表示速度\n処理速度の速さをPRに打ち出しており、サイトの各所に速度を計測できるプラグインが置けるので、その自信ぶりが窺えます。\n実際に１年ぐらい開発用・アフィリエイト用などで愛用していましたが、サブディレクトリ型で\n凝った事をしたい場合は、直接`.htaccess`をいじる必要があるため、やや上級者向けですがWebサーバーの知識をつけるという目的には限りなくシンプルに学習しやすいです。\n\nまた、実際にサーバーをいじれる環境なら、`.htaccess`ではなくconfファイルを書き換えてみましょう。\n設定によっては更に高速化が期待できます。分かりやすいのはアクセスが多くなったサイトをapacheからnginxに移行してみた話とかですね。\n\n#### メンテナンス性\nなお、これはadiaryだろうがWordPressだろうが、自前でサーバーを持つ・運用するということはサーバーメンテナンスのコスト自体から逃れる事はできません。\n自身でメンテナンスしたくない場合はやはりSaasかPaasがベストですが、今回の要件（既存のサイトに～）を考えると考えようによってはIaasでさえも要件から外れる可能性があります。\nどちらにせよ、Iaas以上の管理を要求される場合はメンテナンスコストからは逃れられません。\n\n## エンジニアのアウトプットツールとしてwordpressを考える\n最初に述べたとおりですが、アウトプットが目的でなければアリ、アウトプットツールとして使いたいだけならナシです。\nアウトプットに集中したい場合は、シンプルにQiitaやnoteをはじめとしたブログサービスを使いましょう。\n公開しないのであれば、evernoteなんかもオススメです。\n\n要望が多くなればなるほど、技術的要件が高くなるのは実務でも同じですね。\n機能は多くの要望を叶えるより、運用でカバーできるものは対応しない方に進めるのが、運用も見据えた長期的なカスタマイズパッケージとしては優秀なのかもしれません。\n\nアウトプットを目的にしないのであれば、よく使われているwordpressの仕様やアップデート状況などを把握する意味でも、普段使いをしておくと近況に敏感になれます。\nまた、wordpress独自のナレッジも蓄積されるので、案件獲得を目指すなら積極的に活用してみましょう。\n\n## 次の記事\n- [(21日目) 家庭教育（プログラミング）に取り組んだ体験から後進育成（IT教育）と採用・被採用について思ったこと](https://qiita.com/nomurasan/items/a9d59eff0c2642833644)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-17T01:45:34+09:00",
        "group": null,
        "id": "b5e61e51e1caad8b5fe0",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "WordPress",
                "versions": []
            },
            {
                "name": "CMS",
                "versions": []
            },
            {
                "name": "ポエム",
                "versions": []
            },
            {
                "name": "投稿",
                "versions": []
            },
            {
                "name": "アウトプット",
                "versions": []
            }
        ],
        "title": "アウトプットツールとしてのCMSを考える（wordpressと代替案あり）",
        "updated_at": "2022-12-23T12:22:16+09:00",
        "url": "https://qiita.com/nomurasan/items/b5e61e51e1caad8b5fe0",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 766,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<h2 data-sourcepos=\"1:1-1:21\">\n<span id=\"完走した感想\" class=\"fragment\"></span><a href=\"#%E5%AE%8C%E8%B5%B0%E3%81%97%E3%81%9F%E6%84%9F%E6%83%B3\"><i class=\"fa fa-link\"></i></a>完走した感想</h2>\n<h3 data-sourcepos=\"2:1-2:125\">\n<span id=\"q-アドベントカレンダー2022の当初のモチベーションと今のモチベーションが変わったか\" class=\"fragment\"></span><a href=\"#q-%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC2022%E3%81%AE%E5%BD%93%E5%88%9D%E3%81%AE%E3%83%A2%E3%83%81%E3%83%99%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%A8%E4%BB%8A%E3%81%AE%E3%83%A2%E3%83%81%E3%83%99%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C%E5%A4%89%E3%82%8F%E3%81%A3%E3%81%9F%E3%81%8B\"><i class=\"fa fa-link\"></i></a>Q. アドベントカレンダー2022の当初のモチベーションと今のモチベーションが変わったか？</h3>\n<p data-sourcepos=\"3:1-3:24\">A. 変わりました。</p>\n<p data-sourcepos=\"5:1-5:9\">当初は</p>\n<h3 data-sourcepos=\"7:1-7:28\">\n<span id=\"反省準備が大事\" class=\"fragment\"></span><a href=\"#%E5%8F%8D%E7%9C%81%E6%BA%96%E5%82%99%E3%81%8C%E5%A4%A7%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>反省：準備が大事</h3>\n<p data-sourcepos=\"8:1-11:261\">今回、記事が難産だった事より体調不良に苦しめられました。<br>\n精神的なものなら事前準備するぐらいしか緩和策が思いつかないんですが、カゼから始まったものでした。<br>\nまさかここまで悪性が強いとは思いませんでしたが、これ本業だけだと最悪、納品さえ間に合わせられれば何とかアフターフォローで挽回できますが、副業（今回はアドベントカレンダーが該当するものと考えてください）の場合が大変です。<br>\n実際の案件だとカゼや身内の不幸は当たり前ですが言い訳になりません。ブラック企業とかそういう話ではなく、事業主だと会社間での取引になるので、損害賠償が発生する可能性があります。</p>\n<p data-sourcepos=\"13:1-16:165\">本題から外れますが、大事な話なので触れておきますね。<br>\nやむを得ず個人事業主になる場合でも、契約時に再委託の可能性を残しておくか、再委託禁止を盛り込まれる場合はやむを得ない理由での取引遅延については交渉の余地を残すようにしましょう。<br>\n今回は広報も宣伝もしていませんし、Qiitaのアドベントカレンダーを書くだけの話なので遅延損害もありませんでした。<br>\nその結果として体調を優先する事ができましたが、実際は再委託の交渉あるいは遅延時の取り決めをしているところです。</p>\n<h3 data-sourcepos=\"18:1-18:54\">\n<span id=\"qiitaの仕様も研究しておくべきだった\" class=\"fragment\"></span><a href=\"#qiita%E3%81%AE%E4%BB%95%E6%A7%98%E3%82%82%E7%A0%94%E7%A9%B6%E3%81%97%E3%81%A6%E3%81%8A%E3%81%8F%E3%81%B9%E3%81%8D%E3%81%A0%E3%81%A3%E3%81%9F\"><i class=\"fa fa-link\"></i></a>Qiitaの仕様も研究しておくべきだった</h3>\n<p data-sourcepos=\"19:1-20:9\">嬉しい誤算なのですが、Qiitaのリンクカード（正式名称をど忘れしてしまったんで、意図が伝わってほしい）が非常にリッチだったのでリンク関連は改行しておけばよかったです。<br>\nまた、</p>\n<div data-sourcepos=\"22:1-24:3\" class=\"note info\">\n<span class=\"fa fa-fw fa-check-circle\"></span><div>\n<p data-sourcepos=\"23:1-23:15\">この書き方</p>\n</div>\n</div>\n<p data-sourcepos=\"26:1-29:129\">関連はQiita独自記法だったので避けていましたが、置換自体は難しくなかったので組み込めば他の場所でも活用できたはずです。<br>\n執筆するまで完全に忘れていましたが、見やすくなる機能があるなら使っていくべきでした。<br>\nなお、アコーディオンの書き方はhtmlタグで頑張っているので、これはこちら側の仕様の問題で諦めました。<br>\nあまり有効活用するシーンもなかったので、大きな障害にはなっていないのが救いでしょうか。</p>\n<h2 data-sourcepos=\"31:1-31:39\">\n<span id=\"ネタバラシ初動の進め方\" class=\"fragment\"></span><a href=\"#%E3%83%8D%E3%82%BF%E3%83%90%E3%83%A9%E3%82%B7%E5%88%9D%E5%8B%95%E3%81%AE%E9%80%B2%E3%82%81%E6%96%B9\"><i class=\"fa fa-link\"></i></a>ネタバラシ：初動の進め方</h2>\n<p data-sourcepos=\"32:1-36:114\">「要件は確定してないけど、多分これやらないとダメだから先行して実装しておこう」というプロダクト推進をするチームの経験が多かったため、初日から翌日などの記事をぼちぼち書き進めていったんですが、今回はこれが活きました。<br>\n初日までに25日分（当時はその想定だった）の記事のネタを決め、初日から一週間までに25日分の書き始めと書き終わり、やりたい事だけ箇条書きなりやりやすいスタイルで書くだけ書いて、後は上から順番につなげていくだけの作業をする予定でした。<br>\nこれは私がアフィリエイター時代に培った、独自流のやりやすい記事の書き方のスタイルなので人によってやり方は変わりますが、とりあえず方針が決められたのです。<br>\nこのやり方で私が一番苦労するのが、このつなぎ合わせの作業で不自然な部分を消していくという工程を繰り返していく事になります。<br>\nなぜこの方法を採用しているのか、というと記事にも納期がある事が挙げられます。</p>\n<ol data-sourcepos=\"38:1-41:0\">\n<li data-sourcepos=\"38:1-38:105\">しっかりとした記事を書き上げるために書き上げた直後の状態を叩き台原稿</li>\n<li data-sourcepos=\"39:1-39:75\">１日時間を置いて繋ぎこみの甘さを是正した推敲原稿</li>\n<li data-sourcepos=\"40:1-41:0\">レビュー（セルフの場合、自身で記事を読んだ感想を踏まえて期待する結果と異なる部分の書き直しなど）を経て公開している完成稿</li>\n</ol>\n<p data-sourcepos=\"42:1-44:189\">といったステップを踏んで品質を上げていくやり方をしているので「とりあえず納期までに出す」を叩き台原稿でできるのが強みです。<br>\nと、同時にデメリットとして進捗状況（記事の書きやすさ）によって露骨に品質に差が出ます。<br>\n初見だと比較ができないのですが、ソロのアドベントカレンダーという性質上、記事を読んでいくとどれがどの段階なのか透けやすいです。</p>\n<h3 data-sourcepos=\"46:1-46:13\">\n<span id=\"問題点\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C%E7%82%B9\"><i class=\"fa fa-link\"></i></a>問題点</h3>\n<p data-sourcepos=\"47:1-47:162\">当初単発記事として書こうとして、結局ネタ不足になって書ききれなかった記事たちを「まとめ」として供養しました。</p>\n<h3 data-sourcepos=\"50:1-50:75\">\n<span id=\"余談aiに記事を書かせて校正する方法は現実的か\" class=\"fragment\"></span><a href=\"#%E4%BD%99%E8%AB%87ai%E3%81%AB%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%8B%E3%81%9B%E3%81%A6%E6%A0%A1%E6%AD%A3%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95%E3%81%AF%E7%8F%BE%E5%AE%9F%E7%9A%84%E3%81%8B\"><i class=\"fa fa-link\"></i></a>余談：AIに記事を書かせて校正する方法は現実的か？</h3>\n<p data-sourcepos=\"51:1-51:144\">正直、毎日投稿を前提にする場合は本稿レベルのボリュームですら書き続けるのはちょっとした苦行です。</p>\n<p data-sourcepos=\"53:1-55:111\"><a href=\"https://ai-novel.com/\" rel=\"nofollow noopener\" target=\"_blank\">AIのべりすと</a>のようなサービスあるいはツール（AI）を作って書かせて、まずい部分を修正する方が作業としてはラクだったりしますが、既に出来上がった文章自体がそもそも使い物になるのか？という観点で見てみると単純に作業工程が増えるだけになってしまいます。<br>\nいわば「人が書いたテキストを修正して投稿する」という作業が考えている以上に重労働である事に理解があると、１から自分で書いたほうがマシなシーンもあったりします。<br>\nそれが、自分が苦手な分野の記事を投稿するケースだったりするとつらいですね。</p>\n<h2 data-sourcepos=\"57:1-57:45\">\n<span id=\"本アドベントカレンダーの縛り\" class=\"fragment\"></span><a href=\"#%E6%9C%AC%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC%E3%81%AE%E7%B8%9B%E3%82%8A\"><i class=\"fa fa-link\"></i></a>本アドベントカレンダーの縛り</h2>\n<p data-sourcepos=\"58:1-62:279\">実は、今回のアドベントカレンダーはなるべくコードを書かない事を意識しました。<br>\n実際は業務の都合上、ほとんど書けないものばかりだったので、ポエムの傾向に寄ってしまいました。<br>\nこれは予想通りというか、反省すべき点でもあります。<br>\nなるべく実績ベースの話になるようにしていたのですが、NDAの関係もあり最新のお話が難しいものやデータを開示できないものが多かったために体験談に説得力を持たせるために解説や事例紹介を盛り込みました。<br>\nしかしながら、根本的な問題であるノーデータであるという点は変えられないため、アドベントカレンダー内でも講師向け、あるいは受講者に向けて書く傾向を増やす＝ボリュームアップで対応しています。</p>\n<p data-sourcepos=\"64:1-71:297\">自分が主張したい事はきちんとデータを示しましょう。<br>\nデータを示さず（示せず）に主張すると、当たり前ですが非常に苦労します。<br>\n今回は私が書いている話ですが、いざ自分がデータを示せずに主張したい内容があったとすると、相当苦労する事は容易に想像ができるかと思います。<br>\nいざ記事を書いてみると、想像以上に大変だと言うことにも気付きました。<br>\n何より、表現の仕方に恐ろしく気を遣うので難産になる傾向があります。今にして思えばそりゃそーだと思うんですが、決して楽ではなかったです。<br>\n一番主張したい内容と、解消できない根拠不十分な状況を少しでも解決したい思いで空回りがちです。<br>\n書いているときには全く気付かなかったんですが、今読み返すと色々と粗い・拙い部分が目立ちます。<br>\n何度か本音をポロリしていますが、記事を書く時にもリアルタイム性を出したいという思いがあったので、上述した推敲原稿や完成原稿でも表現の部分については可能な限り叩き台の書き方を尊重するようにしています。</p>\n<p data-sourcepos=\"73:1-75:234\">そのため、アドベントカレンダーの執筆期間中は過去記事の内容を修正を含めた変更をしないようにしています。<br>\nいいねやコメントは気付いていて、きちんと確認はしていますが全てリアクションはしていません。<br>\n私が「（この結果は）やっぱりな」と思っているか「マジか予想外でした」と思っているかも見てもらえれば、原稿がどの段階での投稿なのかも見えやすいかもしれません。</p>\n<p data-sourcepos=\"77:1-77:126\">回答発表はしませんが、カゼを引いたので品質の違いが露骨すぎるかな…とは思っています。</p>\n<h2 data-sourcepos=\"79:1-79:12\">\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n<p data-sourcepos=\"80:1-83:174\">ここまでお付き合いいただき、誠にありがとうございました。<br>\n末文になってしまい恐縮ですが、<br>\nまた本稿からご覧頂いた方は、特に講師・受講生向けの書き方の苦悩部分を意識しながら、本アドベントカレンダーを巡回していただくと「多分本当はこういう話がしたかったんだろうな」というのが見えてくると思います。<br>\n既に他の日から飛んできた方は、新鮮な気持ちで読める一回目と、本稿の内容を踏まえて読めるので二度美味しい（ハズ）です。</p>\n<p data-sourcepos=\"85:1-86:309\">実は、こういう記事構成を書くのは結構好きで、寄稿した記事もアドベントカレンダーのようにシリーズ化が決まっていれば今回のように最後を読むと見方が変わるようになる事を心がけています。<br>\n「小説家になろう」とかではないんですが、当初から最初に構成を考えて１周でエンドコンテンツにならないようにしようと決めていましたが、これがうまく行ったかどうかはあなたが内心だけで決めていただければと思います。</p>\n<h2 data-sourcepos=\"88:1-88:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"89:1-90:88\">\n<li data-sourcepos=\"89:1-89:143\"><a href=\"https://qiita.com/nomurasan/items/ff6f3b13ed679cc6feba\" id=\"reference-fd3df156686d36bc9f00\">(1日目) 俺のカレンダー2022を読み進めるにあたっての留意事項</a></li>\n<li data-sourcepos=\"90:1-90:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n",
        "body": "## 完走した感想\n### Q. アドベントカレンダー2022の当初のモチベーションと今のモチベーションが変わったか？\nA. 変わりました。\n\n当初は\n\n### 反省：準備が大事\n今回、記事が難産だった事より体調不良に苦しめられました。\n精神的なものなら事前準備するぐらいしか緩和策が思いつかないんですが、カゼから始まったものでした。\nまさかここまで悪性が強いとは思いませんでしたが、これ本業だけだと最悪、納品さえ間に合わせられれば何とかアフターフォローで挽回できますが、副業（今回はアドベントカレンダーが該当するものと考えてください）の場合が大変です。\n実際の案件だとカゼや身内の不幸は当たり前ですが言い訳になりません。ブラック企業とかそういう話ではなく、事業主だと会社間での取引になるので、損害賠償が発生する可能性があります。\n\n本題から外れますが、大事な話なので触れておきますね。\nやむを得ず個人事業主になる場合でも、契約時に再委託の可能性を残しておくか、再委託禁止を盛り込まれる場合はやむを得ない理由での取引遅延については交渉の余地を残すようにしましょう。\n今回は広報も宣伝もしていませんし、Qiitaのアドベントカレンダーを書くだけの話なので遅延損害もありませんでした。\nその結果として体調を優先する事ができましたが、実際は再委託の交渉あるいは遅延時の取り決めをしているところです。\n\n### Qiitaの仕様も研究しておくべきだった\n嬉しい誤算なのですが、Qiitaのリンクカード（正式名称をど忘れしてしまったんで、意図が伝わってほしい）が非常にリッチだったのでリンク関連は改行しておけばよかったです。\nまた、\n\n:::note\nこの書き方\n:::\n\n関連はQiita独自記法だったので避けていましたが、置換自体は難しくなかったので組み込めば他の場所でも活用できたはずです。\n執筆するまで完全に忘れていましたが、見やすくなる機能があるなら使っていくべきでした。\nなお、アコーディオンの書き方はhtmlタグで頑張っているので、これはこちら側の仕様の問題で諦めました。\nあまり有効活用するシーンもなかったので、大きな障害にはなっていないのが救いでしょうか。\n\n## ネタバラシ：初動の進め方\n「要件は確定してないけど、多分これやらないとダメだから先行して実装しておこう」というプロダクト推進をするチームの経験が多かったため、初日から翌日などの記事をぼちぼち書き進めていったんですが、今回はこれが活きました。\n初日までに25日分（当時はその想定だった）の記事のネタを決め、初日から一週間までに25日分の書き始めと書き終わり、やりたい事だけ箇条書きなりやりやすいスタイルで書くだけ書いて、後は上から順番につなげていくだけの作業をする予定でした。\nこれは私がアフィリエイター時代に培った、独自流のやりやすい記事の書き方のスタイルなので人によってやり方は変わりますが、とりあえず方針が決められたのです。\nこのやり方で私が一番苦労するのが、このつなぎ合わせの作業で不自然な部分を消していくという工程を繰り返していく事になります。\nなぜこの方法を採用しているのか、というと記事にも納期がある事が挙げられます。\n\n1. しっかりとした記事を書き上げるために書き上げた直後の状態を叩き台原稿\n1. １日時間を置いて繋ぎこみの甘さを是正した推敲原稿\n1. レビュー（セルフの場合、自身で記事を読んだ感想を踏まえて期待する結果と異なる部分の書き直しなど）を経て公開している完成稿\n\nといったステップを踏んで品質を上げていくやり方をしているので「とりあえず納期までに出す」を叩き台原稿でできるのが強みです。\nと、同時にデメリットとして進捗状況（記事の書きやすさ）によって露骨に品質に差が出ます。\n初見だと比較ができないのですが、ソロのアドベントカレンダーという性質上、記事を読んでいくとどれがどの段階なのか透けやすいです。\n\n### 問題点\n当初単発記事として書こうとして、結局ネタ不足になって書ききれなかった記事たちを「まとめ」として供養しました。\n\n\n### 余談：AIに記事を書かせて校正する方法は現実的か？\n正直、毎日投稿を前提にする場合は本稿レベルのボリュームですら書き続けるのはちょっとした苦行です。\n\n[AIのべりすと](https://ai-novel.com/)のようなサービスあるいはツール（AI）を作って書かせて、まずい部分を修正する方が作業としてはラクだったりしますが、既に出来上がった文章自体がそもそも使い物になるのか？という観点で見てみると単純に作業工程が増えるだけになってしまいます。\nいわば「人が書いたテキストを修正して投稿する」という作業が考えている以上に重労働である事に理解があると、１から自分で書いたほうがマシなシーンもあったりします。\nそれが、自分が苦手な分野の記事を投稿するケースだったりするとつらいですね。\n\n## 本アドベントカレンダーの縛り\n実は、今回のアドベントカレンダーはなるべくコードを書かない事を意識しました。\n実際は業務の都合上、ほとんど書けないものばかりだったので、ポエムの傾向に寄ってしまいました。\nこれは予想通りというか、反省すべき点でもあります。\nなるべく実績ベースの話になるようにしていたのですが、NDAの関係もあり最新のお話が難しいものやデータを開示できないものが多かったために体験談に説得力を持たせるために解説や事例紹介を盛り込みました。\nしかしながら、根本的な問題であるノーデータであるという点は変えられないため、アドベントカレンダー内でも講師向け、あるいは受講者に向けて書く傾向を増やす＝ボリュームアップで対応しています。\n\n自分が主張したい事はきちんとデータを示しましょう。\nデータを示さず（示せず）に主張すると、当たり前ですが非常に苦労します。\n今回は私が書いている話ですが、いざ自分がデータを示せずに主張したい内容があったとすると、相当苦労する事は容易に想像ができるかと思います。\nいざ記事を書いてみると、想像以上に大変だと言うことにも気付きました。\n何より、表現の仕方に恐ろしく気を遣うので難産になる傾向があります。今にして思えばそりゃそーだと思うんですが、決して楽ではなかったです。\n一番主張したい内容と、解消できない根拠不十分な状況を少しでも解決したい思いで空回りがちです。\n書いているときには全く気付かなかったんですが、今読み返すと色々と粗い・拙い部分が目立ちます。\n何度か本音をポロリしていますが、記事を書く時にもリアルタイム性を出したいという思いがあったので、上述した推敲原稿や完成原稿でも表現の部分については可能な限り叩き台の書き方を尊重するようにしています。\n\nそのため、アドベントカレンダーの執筆期間中は過去記事の内容を修正を含めた変更をしないようにしています。\nいいねやコメントは気付いていて、きちんと確認はしていますが全てリアクションはしていません。\n私が「（この結果は）やっぱりな」と思っているか「マジか予想外でした」と思っているかも見てもらえれば、原稿がどの段階での投稿なのかも見えやすいかもしれません。\n\n回答発表はしませんが、カゼを引いたので品質の違いが露骨すぎるかな…とは思っています。\n\n## 最後に\nここまでお付き合いいただき、誠にありがとうございました。\n末文になってしまい恐縮ですが、\nまた本稿からご覧頂いた方は、特に講師・受講生向けの書き方の苦悩部分を意識しながら、本アドベントカレンダーを巡回していただくと「多分本当はこういう話がしたかったんだろうな」というのが見えてくると思います。\n既に他の日から飛んできた方は、新鮮な気持ちで読める一回目と、本稿の内容を踏まえて読めるので二度美味しい（ハズ）です。\n\n実は、こういう記事構成を書くのは結構好きで、寄稿した記事もアドベントカレンダーのようにシリーズ化が決まっていれば今回のように最後を読むと見方が変わるようになる事を心がけています。\n「小説家になろう」とかではないんですが、当初から最初に構成を考えて１周でエンドコンテンツにならないようにしようと決めていましたが、これがうまく行ったかどうかはあなたが内心だけで決めていただければと思います。\n\n## 次の記事\n- [(1日目) 俺のカレンダー2022を読み進めるにあたっての留意事項](https://qiita.com/nomurasan/items/ff6f3b13ed679cc6feba)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-17T01:44:49+09:00",
        "group": null,
        "id": "7974edd43c24fae38d9f",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "アドベントカレンダー",
                "versions": []
            }
        ],
        "title": "25日完走した感想と、今からQiitaアドベントカレンダー2023に向けてのテーマ・抱負",
        "updated_at": "2022-12-25T07:05:57+09:00",
        "url": "https://qiita.com/nomurasan/items/7974edd43c24fae38d9f",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 125,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<h2 data-sourcepos=\"1:1-1:15\">\n<span id=\"事の発端\" class=\"fragment\"></span><a href=\"#%E4%BA%8B%E3%81%AE%E7%99%BA%E7%AB%AF\"><i class=\"fa fa-link\"></i></a>事の発端</h2>\n<p data-sourcepos=\"2:1-2:55\"><strong>アドカレに書くには記事が薄すぎた。</strong></p>\n<p data-sourcepos=\"4:1-5:75\">タグに困りました。<br>\nそれ以上に、各コンテンツが薄過ぎるのが悩みでした。</p>\n<p data-sourcepos=\"7:1-7:120\">せっかくアドベントカレンダー用に考えたネタ達なので、本稿で供養したいと思います。</p>\n<hr data-sourcepos=\"9:1-10:0\">\n<h2 data-sourcepos=\"11:1-11:85\">\n<span id=\"1-nox-playerなど仮想スマートデバイスの端末情報を調べてみた\" class=\"fragment\"></span><a href=\"#1-nox-player%E3%81%AA%E3%81%A9%E4%BB%AE%E6%83%B3%E3%82%B9%E3%83%9E%E3%83%BC%E3%83%88%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%81%AE%E7%AB%AF%E6%9C%AB%E6%83%85%E5%A0%B1%E3%82%92%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%BF%E3%81%9F\"><i class=\"fa fa-link\"></i></a>1. Nox Playerなど仮想スマートデバイスの端末情報を調べてみた</h2>\n<p data-sourcepos=\"12:1-13:187\">仮想スマートデバイスのgoogleアカウントを普段使いのアカウントを指定しており、googleの「スマートフォンを探す」で出てきた正体不明のデバイスを何だコレ？と言っていたんですね。<br>\n調査に4時間かかったんですが、原因が分かった＆自分だったので実害もなく良かった（ただただ自分で恥ずかしくなっただけ）んですが、</p>\n<p data-sourcepos=\"15:1-17:150\">なお、設定についてはググれば出てくるので取り上げません。<br>\nここで言いたいのは「仮想デバイスに自分のアカウントを登録した時は、他のgoogleサービスにも表示されるよ」という事です。<br>\n仮想端末名は、仮想端末だとわかりやすい名前にしておきましょう。ハード名だけにするとマジで混乱します。</p>\n<hr data-sourcepos=\"19:1-20:0\">\n<h2 data-sourcepos=\"21:1-21:102\">\n<span id=\"2-研修資料増刊版新人教育のgit研修では教えないgitの履歴の消し方\" class=\"fragment\"></span><a href=\"#2-%E7%A0%94%E4%BF%AE%E8%B3%87%E6%96%99%E5%A2%97%E5%88%8A%E7%89%88%E6%96%B0%E4%BA%BA%E6%95%99%E8%82%B2%E3%81%AEgit%E7%A0%94%E4%BF%AE%E3%81%A7%E3%81%AF%E6%95%99%E3%81%88%E3%81%AA%E3%81%84git%E3%81%AE%E5%B1%A5%E6%AD%B4%E3%81%AE%E6%B6%88%E3%81%97%E6%96%B9\"><i class=\"fa fa-link\"></i></a>2. 【研修資料増刊版】新人教育のgit研修では教えない、gitの履歴の消し方</h2>\n<p data-sourcepos=\"22:1-23:196\">なんで教えないのか、という話ですがgit経験者なら分かりますが、初心者がいきなりgit履歴を消せると取り返しが付かない事になります。<br>\n履歴改ざんで有名なforce pushも取り返しがつかない操作ですが、gitの履歴操作コマンドは名前の通り、過去にも干渉ができる激ヤバコマンドです。</p>\n<p data-sourcepos=\"25:1-25:101\"><code>git filter-branch --index-filter 'git rm --cached --ignore-unmatch (消したいファイル)' HEAD</code></p>\n<p data-sourcepos=\"27:1-30:126\">私も頻繁に使わないので、いつもググるんですが、その度にオプションの意味なんだっけ？と勉強しなおしています。<br>\nこれは<code>git filter-branch</code>と<code>git rm</code>の２つのコマンドが実行されており、前者はインデックスを書き換える時に、どんなgitコマンドを適用するか引数として与える必要があります。<br>\n後者で消し込みをするんですが、ガチャガチャやって既にファイル自体を削除（履歴は残っている）した場合でも<code>--ignore-unmatch</code>でエラーにしないようにしているとイメージ（理解）しています。<br>\nオプションは他にもありますが、基本的には上記で解決できるため、使った事はありません。</p>\n<hr data-sourcepos=\"32:1-33:0\">\n<h2 data-sourcepos=\"34:1-34:69\">\n<span id=\"3-ソートアルゴリズムをノーコードでやってみた\" class=\"fragment\"></span><a href=\"#3-%E3%82%BD%E3%83%BC%E3%83%88%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%92%E3%83%8E%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89%E3%81%A7%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\"><i class=\"fa fa-link\"></i></a>3. ソートアルゴリズムをノーコードでやってみた</h2>\n<p data-sourcepos=\"35:1-38:198\">見せて面白いものではありませんが、テキストに書いてある内容をコードで書く事って研修だとあまりないんですよね。<br>\nこれは時間の都合上もありますが、プログラミングは後の方にやって、アルゴリズムの時にコードで書くケースが少ないからです。<br>\n言い換えると、難しい単元をやる前にステップアップしながら教えていくので、プログラミング入門の前に出てくる単元はコード化されない事が多いです。<br>\n良し悪しの話ではないですが、過去に学んだテキストの内容を研修で学び直した知識を使って読み直すと、更に理解に深さが出てくる事でしょう。</p>\n<ul data-sourcepos=\"40:1-43:0\">\n<li data-sourcepos=\"40:1-40:37\"><a href=\"https://scratch.mit.edu/\" rel=\"nofollow noopener\" target=\"_blank\">scratch</a></li>\n<li data-sourcepos=\"41:1-41:129\"><a href=\"https://amzn.to/3FFKNhg\" rel=\"nofollow noopener\" target=\"_blank\">(Nintendo Switch)　ナビつき！ つくってわかる はじめてゲームプログラミング</a></li>\n<li data-sourcepos=\"42:1-43:0\"><a href=\"https://nodered.org/#get-started\" rel=\"nofollow noopener\" target=\"_blank\">NodeRED</a></li>\n</ul>\n<hr data-sourcepos=\"44:1-45:0\">\n<h2 data-sourcepos=\"46:1-46:68\">\n<span id=\"4-考察wslの定期処理はどうやって書くべきか\" class=\"fragment\"></span><a href=\"#4-%E8%80%83%E5%AF%9Fwsl%E3%81%AE%E5%AE%9A%E6%9C%9F%E5%87%A6%E7%90%86%E3%81%AF%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E6%9B%B8%E3%81%8F%E3%81%B9%E3%81%8D%E3%81%8B\"><i class=\"fa fa-link\"></i></a>4. [考察]WSLの定期処理はどうやって書くべきか？</h2>\n<p data-sourcepos=\"47:1-47:75\">WSLの定期処理について、２通りの方法を見ていきます。</p>\n<ul data-sourcepos=\"49:1-54:0\">\n<li data-sourcepos=\"49:1-50:94\">cronから実行する場合\n<ul data-sourcepos=\"50:3-50:94\">\n<li data-sourcepos=\"50:3-50:94\">wslを実行するプロセスは落とさない（必ず１つは実行されている）</li>\n</ul>\n</li>\n<li data-sourcepos=\"51:1-54:0\">Windowsのタスクスケジューラ機能を使う\n<ul data-sourcepos=\"52:3-54:0\">\n<li data-sourcepos=\"52:3-54:0\">\n<code>wsl</code>コマンドで実行されるディストリビューションは、今回定期処理で動かしたいディストリビューション\n<ul data-sourcepos=\"53:5-54:0\">\n<li data-sourcepos=\"53:5-54:0\">違うディストリビューションを使いたい場合は、wslコマンドに引数で指定できます</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p data-sourcepos=\"55:1-56:103\">使いやすい方を選択すれば良いですが、WSLを使う場合はWindowsの機能から使った方が安定しやすいので、タスクスケジューラで設定するのがおすすめです。<br>\n今回はWSLを想定しましたが、DockerであろうとHyper-Vなどであろうと同じです。</p>\n<hr data-sourcepos=\"58:1-59:0\">\n<h2 data-sourcepos=\"60:1-60:9\">\n<span id=\"総括\" class=\"fragment\"></span><a href=\"#%E7%B7%8F%E6%8B%AC\"><i class=\"fa fa-link\"></i></a>総括</h2>\n<p data-sourcepos=\"61:1-64:87\">小ネタ集としてまとめたら、書いていた内容の半分以上も削ってようやっとスリムになったなぁ、と思いました。<br>\n書きたい量や書きたい事だけ書き捨てる、というのにQiitaは向いてないかもしれませんね。<br>\n特にアドカレに載せる記事にしようと考えると、それなりのクオリティである必要を感じるので、そういう意味ではこの記事の各コンテンツは記事になりきれなかった（うまく記事に出来なかった）私の力不足を感じる内容と言い換える事もできます。<br>\n（テーマ的に、本当に書く事ないぞ？みたいなのもありますが）</p>\n<p data-sourcepos=\"66:1-67:225\">今にして思えば、各項目に扉絵（アイキャッチ）を貼って目を引くぐらいはやっても良かったかもしれません。<br>\nアフィリエイト感が出てあまり好きなやり方ではないですが、本稿についてはテーマが大きく異なるので、読者目線でどこが区切りになるのか分かりにくかったです。</p>\n<p data-sourcepos=\"69:1-69:168\">今年はもうこういったまとめ・供養記事を書く事はないですが、来年や他の記事でまとめを書く時に活かせると思いました。</p>\n<h2 data-sourcepos=\"71:1-71:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"72:1-73:88\">\n<li data-sourcepos=\"72:1-72:18\"><a href=\"#\">(20日目) </a></li>\n<li data-sourcepos=\"73:1-73:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n",
        "body": "## 事の発端\n**アドカレに書くには記事が薄すぎた。**\n\nタグに困りました。\nそれ以上に、各コンテンツが薄過ぎるのが悩みでした。\n\nせっかくアドベントカレンダー用に考えたネタ達なので、本稿で供養したいと思います。\n\n---\n\n## 1. Nox Playerなど仮想スマートデバイスの端末情報を調べてみた\n仮想スマートデバイスのgoogleアカウントを普段使いのアカウントを指定しており、googleの「スマートフォンを探す」で出てきた正体不明のデバイスを何だコレ？と言っていたんですね。\n調査に4時間かかったんですが、原因が分かった＆自分だったので実害もなく良かった（ただただ自分で恥ずかしくなっただけ）んですが、\n\nなお、設定についてはググれば出てくるので取り上げません。\nここで言いたいのは「仮想デバイスに自分のアカウントを登録した時は、他のgoogleサービスにも表示されるよ」という事です。\n仮想端末名は、仮想端末だとわかりやすい名前にしておきましょう。ハード名だけにするとマジで混乱します。\n\n---\n\n## 2. 【研修資料増刊版】新人教育のgit研修では教えない、gitの履歴の消し方\nなんで教えないのか、という話ですがgit経験者なら分かりますが、初心者がいきなりgit履歴を消せると取り返しが付かない事になります。\n履歴改ざんで有名なforce pushも取り返しがつかない操作ですが、gitの履歴操作コマンドは名前の通り、過去にも干渉ができる激ヤバコマンドです。\n\n`git filter-branch --index-filter 'git rm --cached --ignore-unmatch (消したいファイル)' HEAD`\n\n私も頻繁に使わないので、いつもググるんですが、その度にオプションの意味なんだっけ？と勉強しなおしています。\nこれは`git filter-branch`と`git rm`の２つのコマンドが実行されており、前者はインデックスを書き換える時に、どんなgitコマンドを適用するか引数として与える必要があります。\n後者で消し込みをするんですが、ガチャガチャやって既にファイル自体を削除（履歴は残っている）した場合でも`--ignore-unmatch`でエラーにしないようにしているとイメージ（理解）しています。\nオプションは他にもありますが、基本的には上記で解決できるため、使った事はありません。\n\n---\n\n## 3. ソートアルゴリズムをノーコードでやってみた\n見せて面白いものではありませんが、テキストに書いてある内容をコードで書く事って研修だとあまりないんですよね。\nこれは時間の都合上もありますが、プログラミングは後の方にやって、アルゴリズムの時にコードで書くケースが少ないからです。\n言い換えると、難しい単元をやる前にステップアップしながら教えていくので、プログラミング入門の前に出てくる単元はコード化されない事が多いです。\n良し悪しの話ではないですが、過去に学んだテキストの内容を研修で学び直した知識を使って読み直すと、更に理解に深さが出てくる事でしょう。\n\n- [scratch](https://scratch.mit.edu/)\n- [(Nintendo Switch)　ナビつき！ つくってわかる はじめてゲームプログラミング](https://amzn.to/3FFKNhg)\n- [NodeRED](https://nodered.org/#get-started)\n\n---\n\n## 4. [考察]WSLの定期処理はどうやって書くべきか？\nWSLの定期処理について、２通りの方法を見ていきます。\n\n- cronから実行する場合\n  - wslを実行するプロセスは落とさない（必ず１つは実行されている）\n- Windowsのタスクスケジューラ機能を使う\n  - `wsl`コマンドで実行されるディストリビューションは、今回定期処理で動かしたいディストリビューション\n    - 違うディストリビューションを使いたい場合は、wslコマンドに引数で指定できます\n\n使いやすい方を選択すれば良いですが、WSLを使う場合はWindowsの機能から使った方が安定しやすいので、タスクスケジューラで設定するのがおすすめです。\n今回はWSLを想定しましたが、DockerであろうとHyper-Vなどであろうと同じです。\n\n---\n\n## 総括\n小ネタ集としてまとめたら、書いていた内容の半分以上も削ってようやっとスリムになったなぁ、と思いました。\n書きたい量や書きたい事だけ書き捨てる、というのにQiitaは向いてないかもしれませんね。\n特にアドカレに載せる記事にしようと考えると、それなりのクオリティである必要を感じるので、そういう意味ではこの記事の各コンテンツは記事になりきれなかった（うまく記事に出来なかった）私の力不足を感じる内容と言い換える事もできます。\n（テーマ的に、本当に書く事ないぞ？みたいなのもありますが）\n\n今にして思えば、各項目に扉絵（アイキャッチ）を貼って目を引くぐらいはやっても良かったかもしれません。\nアフィリエイト感が出てあまり好きなやり方ではないですが、本稿についてはテーマが大きく異なるので、読者目線でどこが区切りになるのか分かりにくかったです。\n\n今年はもうこういったまとめ・供養記事を書く事はないですが、来年や他の記事でまとめを書く時に活かせると思いました。\n\n## 次の記事\n- [(20日目) ](#)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-17T01:44:31+09:00",
        "group": null,
        "id": "8c30d70ccb127ba15c2a",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "ポエム",
                "versions": []
            },
            {
                "name": "まとめ",
                "versions": []
            },
            {
                "name": "小ネタ",
                "versions": []
            },
            {
                "name": "アドベンドカレンダー2022",
                "versions": []
            }
        ],
        "title": "一本のトピックにまとめられなかった小ネタ集",
        "updated_at": "2022-12-19T07:05:06+09:00",
        "url": "https://qiita.com/nomurasan/items/8c30d70ccb127ba15c2a",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 598,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<p data-sourcepos=\"1:1-1:162\">どこに価値があるか分からないので、ちょいちょい質問がくる掲題について、理由や時代背景も含めて語っていきます。</p>\n<h2 data-sourcepos=\"3:1-3:33\">\n<span id=\"一番良いエディタとは\" class=\"fragment\"></span><a href=\"#%E4%B8%80%E7%95%AA%E8%89%AF%E3%81%84%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>一番良いエディタとは</h2>\n<ol data-sourcepos=\"4:1-7:0\">\n<li data-sourcepos=\"4:1-4:60\">開発環境にあったものを使ってください。</li>\n<li data-sourcepos=\"5:1-5:60\">指定がなければ好きなものを使えばよく、</li>\n<li data-sourcepos=\"6:1-7:0\">好きなものがなければVSCodeをおすすめします。</li>\n</ol>\n<p data-sourcepos=\"8:1-8:33\">上記の優先度でどうぞ。</p>\n<h2 data-sourcepos=\"10:1-10:12\">\n<span id=\"言い訳\" class=\"fragment\"></span><a href=\"#%E8%A8%80%E3%81%84%E8%A8%B3\"><i class=\"fa fa-link\"></i></a>言い訳</h2>\n<p data-sourcepos=\"11:1-13:123\">この記事を初めて書いたのがいつだったか分からないぐらい昔です、たぶん5年とかそれぐらいでしょうか。<br>\nずっと下書きで寝かせっぱなしだったので、2022年仕様に変えてお届けします。<br>\nなお、未公開（ずっと下書き）なのでリファクタリング記事ではないです、たぶんきっと。</p>\n<h2 data-sourcepos=\"15:1-15:30\">\n<span id=\"愛着があったnotepad\" class=\"fragment\"></span><a href=\"#%E6%84%9B%E7%9D%80%E3%81%8C%E3%81%82%E3%81%A3%E3%81%9Fnotepad\"><i class=\"fa fa-link\"></i></a>愛着があったNotepad++</h2>\n<p data-sourcepos=\"16:1-18:81\">カスタマイズの手軽さ、というかプラグインマネージャーですよね。タブも使えるし、ウィンドウ分割もできるし軽い！<br>\nAtomだとちょっとした事をやるだけにしては大げさだったので、敢えて使うまでもないかな、と思っていたのですが…<br>\nあとは余計な勉強コストを積みたくなかったのはあります。</p>\n<h3 data-sourcepos=\"20:1-20:37\">\n<span id=\"捨てる決心をした出来事\" class=\"fragment\"></span><a href=\"#%E6%8D%A8%E3%81%A6%E3%82%8B%E6%B1%BA%E5%BF%83%E3%82%92%E3%81%97%E3%81%9F%E5%87%BA%E6%9D%A5%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>捨てる決心をした出来事</h3>\n<p data-sourcepos=\"21:1-21:151\"><strong>プラグインマネージャーを使おうとするとプラグインリストのダウンロードに失敗してNotepad++ごと落ちます。</strong></p>\n<p data-sourcepos=\"23:1-23:57\"><iframe id=\"qiita-embed-content__bac09f9b25fa3d37bc212f92659e9d70\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__bac09f9b25fa3d37bc212f92659e9d70\" data-content=\"https%3A%2F%2Fgithub.com%2Fbruderstein%2FnppPluginManager%2Fissues%2F57\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"25:1-26:153\">私もこれにやられました。<br>\nさすがにもう解消していると思ったんですが、当時色々調べても私の環境では解決できなかったので諦めました。</p>\n<h3 data-sourcepos=\"28:1-28:34\">\n<span id=\"元々やりたかったこと\" class=\"fragment\"></span><a href=\"#%E5%85%83%E3%80%85%E3%82%84%E3%82%8A%E3%81%9F%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>元々やりたかったこと</h3>\n<ul data-sourcepos=\"30:1-37:88\">\n<li data-sourcepos=\"30:1-30:23\">プラグイン拡張</li>\n<li data-sourcepos=\"31:1-31:8\">タブ</li>\n<li data-sourcepos=\"32:1-32:23\">ウィンドウ分割</li>\n<li data-sourcepos=\"33:1-33:8\">比較</li>\n<li data-sourcepos=\"34:1-37:88\">言語ごとのスタイル変更\n<ul data-sourcepos=\"35:3-37:88\">\n<li data-sourcepos=\"35:3-35:59\">似たような内容のスクリプトを組む時<sup><a href=\"#fn-1\" id=\"fnref-1\">1</a></sup>\n</li>\n<li data-sourcepos=\"36:3-36:49\">python, perl, rubyなどが共存している</li>\n<li data-sourcepos=\"37:3-37:88\">逆に統合しようとして、特定の言語へ移植する必要がある場合</li>\n</ul>\n</li>\n</ul>\n<h3 data-sourcepos=\"40:1-40:46\">\n<span id=\"あればいいなと思っていたこと\" class=\"fragment\"></span><a href=\"#%E3%81%82%E3%82%8C%E3%81%B0%E3%81%84%E3%81%84%E3%81%AA%E3%81%A8%E6%80%9D%E3%81%A3%E3%81%A6%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>あればいいなと思っていたこと</h3>\n<ul data-sourcepos=\"42:1-44:0\">\n<li data-sourcepos=\"42:1-42:8\">公正</li>\n<li data-sourcepos=\"43:1-44:0\">Lintっぽいもの。Rubocopとか</li>\n</ul>\n<p data-sourcepos=\"45:1-46:84\">Atom(今はVSCodeですね。当時はAtomの方が強い時代でした)だと全部できそうですよね。<br>\nまだ調べきれてないので、分かり次第都度追加していきます。</p>\n<h3 data-sourcepos=\"48:1-48:16\">\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h3>\n<p data-sourcepos=\"49:1-50:279\">だいたいは<a href=\"https://eng-entrance.com/atom-editor\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>の手順通りです。<br>\nエンジニア向けのブログと違ってすごく読みやすく、分かりやすいのでこういうデザイン志向のブログは好きなんですが、いかんせん広告をチラつかされるのがたまらない人なので、そこさえなければ……。</p>\n<p data-sourcepos=\"52:1-52:100\">（当時のメモはここまで下書き中でした。Atomいじってた頃だと思います）</p>\n<h2 data-sourcepos=\"54:1-54:42\">\n<span id=\"2022年追記-時代はvscode一強に\" class=\"fragment\"></span><a href=\"#2022%E5%B9%B4%E8%BF%BD%E8%A8%98-%E6%99%82%E4%BB%A3%E3%81%AFvscode%E4%B8%80%E5%BC%B7%E3%81%AB\"><i class=\"fa fa-link\"></i></a>2022年追記: 時代はVSCode一強に</h2>\n<p data-sourcepos=\"55:1-57:152\">もうNotepad++もAtomも使ってないですね…<br>\n当時はなんだかんだNotepad++は軽量でタブが使えるエディタ、AtomがLinterとか入れて使っていた全部盛り（ただし起動が遅い）IDEとして使っていたのですが、どちらもVSCodeで両立できます。はじめてVSCodeを使った当時の私がVSCodeマジかすげぇな！ってなりました。<br>\n分かる人向けですが、Java開発はEclipseだけではなく、VSCodeでも開発できますよ、と言われた時並のショックです。</p>\n<p data-sourcepos=\"59:1-62:127\">今更VSCodeの解説はしません。<br>\nただし、ここで上がらなかったエディタで操作を覚えておいたほうが良いものがあります。<br>\nEmacsとかVim、Nanoなどターミナルに標準装備しているエディタです。<br>\nつまり、GUIエディタとCUIエディタの2種類は使えるようにしておきましょう、というお話です。</p>\n<p data-sourcepos=\"64:1-65:150\">ただし、チームで開発環境が決まっている場合はチームに合わせましょう。<br>\n開発環境レベルで管理されているので、過去にそれぞれのエディタを使おうとして失敗した可能性があります。</p>\n<p data-sourcepos=\"67:1-68:111\">ちなみに、環境を統一したい場合にVSCodeを使う場合はsettings syncの設定を普段使いのものと異なるものを使うようにする必要があります。<br>\n実際に運用する前にバックアップをかならず手元に持っておくようにしましょう。</p>\n<h2 data-sourcepos=\"70:1-70:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"71:1-72:88\">\n<li data-sourcepos=\"71:1-71:178\"><a href=\"https://qiita.com/nomurasan/items/9e4e67c588d3dfde4ead\" id=\"reference-70532700254625e8f04d\">(18日目) 勉強会で「LT会」というと参入敷居を感じさせるので「ポエム会」って呼ぼうぜ</a></li>\n<li data-sourcepos=\"72:1-72:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n<section class=\"footnotes\">\n<ol>\n<li id=\"fn-1\">\n<p data-sourcepos=\"38:7-38:128\">スタイル変更・似たような内容のスクリプトを組む時：たとえばshellと他の何かをさわる時 <a href=\"#fnref-1\" class=\"\">↩</a></p>\n</li>\n</ol>\n</section>\n",
        "body": "どこに価値があるか分からないので、ちょいちょい質問がくる掲題について、理由や時代背景も含めて語っていきます。\n\n## 一番良いエディタとは\n1. 開発環境にあったものを使ってください。\n1. 指定がなければ好きなものを使えばよく、\n1. 好きなものがなければVSCodeをおすすめします。\n\n上記の優先度でどうぞ。\n\n## 言い訳\nこの記事を初めて書いたのがいつだったか分からないぐらい昔です、たぶん5年とかそれぐらいでしょうか。\nずっと下書きで寝かせっぱなしだったので、2022年仕様に変えてお届けします。\nなお、未公開（ずっと下書き）なのでリファクタリング記事ではないです、たぶんきっと。\n\n## 愛着があったNotepad++\nカスタマイズの手軽さ、というかプラグインマネージャーですよね。タブも使えるし、ウィンドウ分割もできるし軽い！\nAtomだとちょっとした事をやるだけにしては大げさだったので、敢えて使うまでもないかな、と思っていたのですが…\nあとは余計な勉強コストを積みたくなかったのはあります。\n\n### 捨てる決心をした出来事\n**プラグインマネージャーを使おうとするとプラグインリストのダウンロードに失敗してNotepad++ごと落ちます。**\n\nhttps://github.com/bruderstein/nppPluginManager/issues/57\n\n私もこれにやられました。\nさすがにもう解消していると思ったんですが、当時色々調べても私の環境では解決できなかったので諦めました。\n\n### 元々やりたかったこと\n\n* プラグイン拡張\n* タブ\n* ウィンドウ分割\n* 比較\n* 言語ごとのスタイル変更\n  * 似たような内容のスクリプトを組む時[^1]\n  * python, perl, rubyなどが共存している\n  * 逆に統合しようとして、特定の言語へ移植する必要がある場合\n[^1]: スタイル変更・似たような内容のスクリプトを組む時：たとえばshellと他の何かをさわる時\n\n### あればいいなと思っていたこと\n\n* 公正\n* Lintっぽいもの。Rubocopとか\n\nAtom(今はVSCodeですね。当時はAtomの方が強い時代でした)だと全部できそうですよね。\nまだ調べきれてないので、分かり次第都度追加していきます。\n\n### 導入手順\nだいたいは<a href=\"https://eng-entrance.com/atom-editor\">こちら</a>の手順通りです。\nエンジニア向けのブログと違ってすごく読みやすく、分かりやすいのでこういうデザイン志向のブログは好きなんですが、いかんせん広告をチラつかされるのがたまらない人なので、そこさえなければ……。\n\n（当時のメモはここまで下書き中でした。Atomいじってた頃だと思います）\n\n## 2022年追記: 時代はVSCode一強に\nもうNotepad++もAtomも使ってないですね…\n当時はなんだかんだNotepad++は軽量でタブが使えるエディタ、AtomがLinterとか入れて使っていた全部盛り（ただし起動が遅い）IDEとして使っていたのですが、どちらもVSCodeで両立できます。はじめてVSCodeを使った当時の私がVSCodeマジかすげぇな！ってなりました。\n分かる人向けですが、Java開発はEclipseだけではなく、VSCodeでも開発できますよ、と言われた時並のショックです。\n\n今更VSCodeの解説はしません。\nただし、ここで上がらなかったエディタで操作を覚えておいたほうが良いものがあります。\nEmacsとかVim、Nanoなどターミナルに標準装備しているエディタです。\nつまり、GUIエディタとCUIエディタの2種類は使えるようにしておきましょう、というお話です。\n\nただし、チームで開発環境が決まっている場合はチームに合わせましょう。\n開発環境レベルで管理されているので、過去にそれぞれのエディタを使おうとして失敗した可能性があります。\n\nちなみに、環境を統一したい場合にVSCodeを使う場合はsettings syncの設定を普段使いのものと異なるものを使うようにする必要があります。\n実際に運用する前にバックアップをかならず手元に持っておくようにしましょう。\n\n## 次の記事\n- [(18日目) 勉強会で「LT会」というと参入敷居を感じさせるので「ポエム会」って呼ぼうぜ](https://qiita.com/nomurasan/items/9e4e67c588d3dfde4ead)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-17T01:26:28+09:00",
        "group": null,
        "id": "db69d80af8c90bbeaafe",
        "likes_count": 1,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "ATOM",
                "versions": []
            },
            {
                "name": "Notepad++",
                "versions": []
            },
            {
                "name": "VSCode",
                "versions": []
            }
        ],
        "title": "【俺のエディタ年表】現役エンジニア講師のエディタ変遷〜なぜそのエディタを選んだのか〜",
        "updated_at": "2022-12-18T17:03:56+09:00",
        "url": "https://qiita.com/nomurasan/items/db69d80af8c90bbeaafe",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 653,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<h2 data-sourcepos=\"1:1-1:60\">\n<span id=\"後記新人研修で教えられないforのお話\" class=\"fragment\"></span><a href=\"#%E5%BE%8C%E8%A8%98%E6%96%B0%E4%BA%BA%E7%A0%94%E4%BF%AE%E3%81%A7%E6%95%99%E3%81%88%E3%82%89%E3%82%8C%E3%81%AA%E3%81%84for%E3%81%AE%E3%81%8A%E8%A9%B1\"><i class=\"fa fa-link\"></i></a>【後記】新人研修で教えられないforのお話</h2>\n<p data-sourcepos=\"2:1-3:45\">これ結構良かったので、勝手にパクリます（なお、パクもラレも本人です）<br>\nなんで下書きに残っとるんや…！</p>\n<p data-sourcepos=\"5:1-6:124\">元々は過去日に公開していたテーマだったんですが、結構ブラッシュアップしたので別記事になりました。<br>\nとはいえ、同じ事を言っているのでそのまま更新して2022アドカレに登録する運びにします。</p>\n<h2 data-sourcepos=\"8:1-8:27\">\n<span id=\"今日いいたいこと\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E6%97%A5%E3%81%84%E3%81%84%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>今日いいたいこと</h2>\n<p data-sourcepos=\"9:1-9:33\">タイトルの通り、for文の</p>\n<div class=\"code-frame\" data-lang=\"php\" data-sourcepos=\"11:1-19:3\"><div class=\"highlight\"><pre><code><span class=\"k\">for</span><span class=\"p\">(</span>\n  <span class=\"mf\">1.</span> <span class=\"n\">これ</span><span class=\"p\">;</span>\n  <span class=\"mf\">2.</span> <span class=\"n\">これ</span><span class=\"p\">;</span>\n  <span class=\"mf\">3.</span> <span class=\"n\">これ</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 処理</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"21:1-21:63\">を正しく説明できるか？というのが本旨です。</p>\n<h2 data-sourcepos=\"23:1-23:24\">\n<span id=\"研修中の説明例\" class=\"fragment\"></span><a href=\"#%E7%A0%94%E4%BF%AE%E4%B8%AD%E3%81%AE%E8%AA%AC%E6%98%8E%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>研修中の説明例</h2>\n<div class=\"code-frame\" data-lang=\"php\" data-sourcepos=\"24:1-32:3\"><div class=\"highlight\"><pre><code><span class=\"k\">for</span><span class=\"p\">(</span>\n  <span class=\"n\">変数の初期値</span><span class=\"p\">;</span>\n  <span class=\"n\">繰り返しの条件</span><span class=\"p\">;</span>\n  <span class=\"n\">カッコが終わった後にすること</span><span class=\"err\">・</span><span class=\"n\">繰り返しの条件が終わるようにする</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 処理</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"34:1-36:100\">です。<br>\n研修など時間が限られている中で解説するため、forを使うだけならこの説明でも良いです。<br>\nが、今回取り上げたいのは、この説明は<strong>間違っている</strong>ということです。</p>\n<h3 data-sourcepos=\"38:1-38:45\">\n<span id=\"for文をwhile文で書き直してみる\" class=\"fragment\"></span><a href=\"#for%E6%96%87%E3%82%92while%E6%96%87%E3%81%A7%E6%9B%B8%E3%81%8D%E7%9B%B4%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>for文をwhile文で書き直してみる</h3>\n<p data-sourcepos=\"39:1-40:63\">下記にコード例を示します。<br>\nいずれも出力は以下のような結果になります。</p>\n<ol data-sourcepos=\"42:1-47:0\">\n<li data-sourcepos=\"42:1-42:10\"><code>1 / 0</code></li>\n<li data-sourcepos=\"43:1-43:10\"><code>1 / 1</code></li>\n<li data-sourcepos=\"44:1-44:10\"><code>1 / 2</code></li>\n<li data-sourcepos=\"45:1-45:10\"><code>1 / 3</code></li>\n<li data-sourcepos=\"46:1-47:0\"><code>1 / 4</code></li>\n</ol>\n<div class=\"code-frame\" data-lang=\"php\" data-sourcepos=\"48:1-63:3\">\n<div class=\"code-lang\"><span class=\"bold\">for.php</span></div>\n<div class=\"highlight\"><pre><code><span class=\"cp\">&lt;?php</span>\n<span class=\"nv\">$i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"nv\">$before</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"nv\">$after</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"k\">for</span><span class=\"p\">(</span>\n  <span class=\"nv\">$before</span><span class=\"o\">++</span><span class=\"p\">;</span>\n  <span class=\"nv\">$i</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n  <span class=\"nv\">$after</span><span class=\"o\">++</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nv\">$i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n  <span class=\"k\">echo</span> <span class=\"nv\">$before</span> <span class=\"mf\">.</span> <span class=\"s2\">\" / \"</span> <span class=\"mf\">.</span> <span class=\"nv\">$after</span> <span class=\"mf\">.</span> <span class=\"s2\">\"&lt;br /&gt;\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">?&gt;</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"65:1-65:58\">これをfor-&gt;whileにリファクタリングします。</p>\n<div class=\"code-frame\" data-lang=\"php\" data-sourcepos=\"67:1-81:3\">\n<div class=\"code-lang\"><span class=\"bold\">while.php</span></div>\n<div class=\"highlight\"><pre><code><span class=\"cp\">&lt;?php</span>\n<span class=\"nv\">$i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"nv\">$before</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"nv\">$after</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"nv\">$before</span><span class=\"o\">++</span><span class=\"p\">;</span>  <span class=\"c1\">// for文の１行目</span>\n<span class=\"k\">while</span><span class=\"p\">(</span><span class=\"nv\">$i</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"c1\">// for文の2行目</span>\n  <span class=\"nv\">$i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n  <span class=\"k\">echo</span> <span class=\"nv\">$before</span> <span class=\"mf\">.</span> <span class=\"s2\">\" / \"</span> <span class=\"mf\">.</span> <span class=\"nv\">$after</span> <span class=\"mf\">.</span> <span class=\"s2\">\"&lt;br /&gt;\"</span><span class=\"p\">;</span>\n\n  <span class=\"nv\">$after</span><span class=\"o\">++</span><span class=\"p\">;</span><span class=\"c1\">// for文の3行目</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">?&gt;</span>\n</code></pre></div>\n</div>\n<h3 data-sourcepos=\"83:1-83:14\">\n<span id=\"javascript\" class=\"fragment\"></span><a href=\"#javascript\"><i class=\"fa fa-link\"></i></a>JavaScript</h3>\n<p data-sourcepos=\"84:1-84:51\">（※）PHP側の書き方に寄せています。</p>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"86:1-100:3\">\n<div class=\"code-lang\"><span class=\"bold\">for.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">before</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">after</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"k\">for </span><span class=\"p\">(</span>\n  <span class=\"nx\">before</span><span class=\"o\">++</span><span class=\"p\">;</span>\n  <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n  <span class=\"nx\">after</span><span class=\"o\">++</span>\n<span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span> <span class=\"nx\">before</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\"> / </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">after</span> <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"102:1-102:58\">これをfor-&gt;whileにリファクタリングします。</p>\n<div class=\"code-frame\" data-lang=\"javascript\" data-sourcepos=\"104:1-117:3\">\n<div class=\"code-lang\"><span class=\"bold\">while.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">before</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">after</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"nx\">before</span><span class=\"o\">++</span><span class=\"p\">;</span>  <span class=\"c1\">// for文の１行目</span>\n<span class=\"k\">while </span><span class=\"p\">(</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span> <span class=\"p\">)</span>  <span class=\"c1\">// for文の２行目</span>\n<span class=\"p\">{</span>\n  <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span> <span class=\"nx\">before</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\"> / </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">after</span> <span class=\"p\">);</span>\n\n  <span class=\"nx\">after</span><span class=\"o\">++</span><span class=\"p\">;</span>  <span class=\"c1\">// for文の3行目</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n<h2 data-sourcepos=\"119:1-119:39\">\n<span id=\"勘違いしていても使えます\" class=\"fragment\"></span><a href=\"#%E5%8B%98%E9%81%95%E3%81%84%E3%81%97%E3%81%A6%E3%81%84%E3%81%A6%E3%82%82%E4%BD%BF%E3%81%88%E3%81%BE%E3%81%99\"><i class=\"fa fa-link\"></i></a>勘違いしていても使えます</h2>\n<p data-sourcepos=\"120:1-121:231\">プログラミングの世界では、「厳密に意味を正しく理解していなくても使えてしまう」ものがいっぱいあります。<br>\nこれは言語仕様であったりフレームワーク仕様などで「何となくいい感じにしてくれる」ものがある事を認識して使うのと、認識せず使うのでは意味が大きく異なります。</p>\n<p data-sourcepos=\"123:1-123:438\">本来であれば、しっかりと指導するべきなのですが実際問題として指導できていないという問題があるので、せめてこういった時間を意識しなくても良い場では、ガチャガチャいじって予測と実験をする練習する機会を作っていくと、言語やフレームワークだけでなく、特にインフラ周りは理解が大幅に進みやすくなります。</p>\n<h2 data-sourcepos=\"125:1-125:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"126:1-127:88\">\n<li data-sourcepos=\"126:1-126:197\"><a href=\"https://qiita.com/nomurasan/items/db69d80af8c90bbeaafe\" id=\"reference-22918cd35b38216b53e2\">(17日目) 【俺のエディタ年表】現役エンジニア講師のエディタ変遷〜なぜそのエディタを選んだのか〜</a></li>\n<li data-sourcepos=\"127:1-127:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n",
        "body": "## 【後記】新人研修で教えられないforのお話\nこれ結構良かったので、勝手にパクリます（なお、パクもラレも本人です）\nなんで下書きに残っとるんや…！\n\n元々は過去日に公開していたテーマだったんですが、結構ブラッシュアップしたので別記事になりました。\nとはいえ、同じ事を言っているのでそのまま更新して2022アドカレに登録する運びにします。\n\n## 今日いいたいこと\nタイトルの通り、for文の\n\n``` php\nfor(\n  1. これ;\n  2. これ;\n  3. これ\n) {\n  // 処理\n}\n```\n\nを正しく説明できるか？というのが本旨です。\n\n## 研修中の説明例\n``` php\nfor(\n  変数の初期値;\n  繰り返しの条件;\n  カッコが終わった後にすること・繰り返しの条件が終わるようにする\n) {\n  // 処理\n}\n```\n\nです。\n研修など時間が限られている中で解説するため、forを使うだけならこの説明でも良いです。\nが、今回取り上げたいのは、この説明は**間違っている**ということです。\n\n### for文をwhile文で書き直してみる\n下記にコード例を示します。\nいずれも出力は以下のような結果になります。\n\n1. `1 / 0`\n1. `1 / 1`\n1. `1 / 2`\n1. `1 / 3`\n1. `1 / 4`\n\n``` for.php\n<?php\n$i = 1;\n$before = 0;\n$after = 0;\n\nfor(\n  $before++;\n  $i <= 5;\n  $after++\n) {\n  $i++;\n  echo $before . \" / \" . $after . \"<br />\";\n}\n?>\n```\n\nこれをfor->whileにリファクタリングします。\n\n``` while.php\n<?php\n$i = 1;\n$before = 0;\n$after = 0;\n\n$before++;  // for文の１行目\nwhile($i <= 5) {  // for文の2行目\n  $i++;\n  echo $before . \" / \" . $after . \"<br />\";\n\n  $after++;// for文の3行目\n}\n?>\n```\n\n### JavaScript\n（※）PHP側の書き方に寄せています。\n\n``` for.js\nlet i = 1;\nlet before = 0;\nlet after = 0;\n\nfor (\n  before++;\n  i < 5;\n  after++\n)\n{\n  i++;\n  console.log( before + \" / \" + after );\n}\n```\n\nこれをfor->whileにリファクタリングします。\n\n``` while.js\nlet i = 1;\nlet before = 0;\nlet after = 0;\n\nbefore++;  // for文の１行目\nwhile ( i < 5 )  // for文の２行目\n{\n  i++;\n  console.log( before + \" / \" + after );\n\n  after++;  // for文の3行目\n}\n```\n\n## 勘違いしていても使えます\nプログラミングの世界では、「厳密に意味を正しく理解していなくても使えてしまう」ものがいっぱいあります。\nこれは言語仕様であったりフレームワーク仕様などで「何となくいい感じにしてくれる」ものがある事を認識して使うのと、認識せず使うのでは意味が大きく異なります。\n\n本来であれば、しっかりと指導するべきなのですが実際問題として指導できていないという問題があるので、せめてこういった時間を意識しなくても良い場では、ガチャガチャいじって予測と実験をする練習する機会を作っていくと、言語やフレームワークだけでなく、特にインフラ周りは理解が大幅に進みやすくなります。\n\n## 次の記事\n- [(17日目) 【俺のエディタ年表】現役エンジニア講師のエディタ変遷〜なぜそのエディタを選んだのか〜](https://qiita.com/nomurasan/items/db69d80af8c90bbeaafe)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 2,
        "created_at": "2022-12-16T23:36:10+09:00",
        "group": null,
        "id": "162964f6fb2914cd348c",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "PHP",
                "versions": []
            },
            {
                "name": "JavaScript",
                "versions": []
            },
            {
                "name": "基礎",
                "versions": []
            },
            {
                "name": "for文",
                "versions": []
            },
            {
                "name": "初学者向け",
                "versions": []
            }
        ],
        "title": "【リファクタリング記事】for文【for(これ;これ;これ)】の内容を正しく説明できますか？よくある勘違いを解説します。",
        "updated_at": "2022-12-17T01:27:49+09:00",
        "url": "https://qiita.com/nomurasan/items/162964f6fb2914cd348c",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 982,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<h2 data-sourcepos=\"1:1-1:12\">\n<span id=\"与太話\" class=\"fragment\"></span><a href=\"#%E4%B8%8E%E5%A4%AA%E8%A9%B1\"><i class=\"fa fa-link\"></i></a>与太話</h2>\n<p data-sourcepos=\"2:1-6:75\">今さっき難産の講師哲学の話を書いてひと段落した時に、アドカレの記事だけじゃなくて、カレンダー自体の❤️に気付きました、ありがとうございます。<br>\n通知になかったんでいつ押してくれたか分からないんですが、率直に嬉しいです！<br>\nあんまりこう言うといいね乞食みたいで嫌（少なくとも、私が見る側の立場だった時はそう思ってます）なんですが、書いている側だと「ちゃんと見てるよ」って言った方が良いんじゃないか？と思うこの違いはなんなんでしょうね。<br>\nきっと、明日の私がこれ見たら「コイツいいね乞食してんじゃん」って絶対言う。断言します。<br>\nなので、今の率直な私の気持ちを書き残しておきます。</p>\n<p data-sourcepos=\"8:1-8:40\"><strong>いいねくれてありがとう！</strong></p>\n<p data-sourcepos=\"10:1-12:81\">もう疲れてんね、でもあと10時間以内（日が変わるまで）にこれ書きあげるよ。<br>\n明日の分も書いて余裕作ってゆっくり寝るよ！<br>\nじゃないと、何のために今日を休みにしたか分からんです。</p>\n<h3 data-sourcepos=\"14:1-14:53\">\n<span id=\"アドベントカレンダーの購読-is-何\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC%E3%81%AE%E8%B3%BC%E8%AA%AD-is-%E4%BD%95\"><i class=\"fa fa-link\"></i></a>アドベントカレンダーの購読 is 何？</h3>\n<p data-sourcepos=\"15:1-18:94\">いいねボタンは自分では押せない（わかる）ですが、購読する（RSS）ボタンは自分でも押せる（？？？）みたいですね。<br>\n使った事ないんで、これやったらどうなるんだろう？と思って自分のカレンダーを購読してます。つまり購読者の一人は私です。<br>\nこういうのにウソは良くないからね、自らゲロっていきますよ！<br>\n（単純に、積極的にアクセスを取りに行く気がないとも言います😅）</p>\n<h3 data-sourcepos=\"20:1-20:67\">\n<span id=\"どうしても気になるカレンダーページのコレ\" class=\"fragment\"></span><a href=\"#%E3%81%A9%E3%81%86%E3%81%97%E3%81%A6%E3%82%82%E6%B0%97%E3%81%AB%E3%81%AA%E3%82%8B%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E3%82%B3%E3%83%AC\"><i class=\"fa fa-link\"></i></a>どうしても気になる、カレンダーページのコレ</h3>\n<p data-sourcepos=\"21:1-22:163\">俺のカレンダーは俺の一人踊りを披露する場所にしたいので参加者を募集してないんですが、この表示がいつも気になってます。<br>\n<a href=\"https://camo.qiitausercontent.com/40574f6cbcabbb3235364c0399fb23c043f4453a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3132323830302f33666264363961362d326432322d653561642d326565322d3264326261633937316635352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F122800%2F3fbd69a6-2d22-e5ad-2ee2-2d2bac971f55.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0b50eb3fcec144f904f551ff6a30704f\" alt=\"スクリーンショット 2022-12-15 13.57.42.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/3fbd69a6-2d22-e5ad-2ee2-2d2bac971f55.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F122800%2F3fbd69a6-2d22-e5ad-2ee2-2d2bac971f55.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9aab5e2cedf5b6c6da14d841ce7464bb 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"24:1-24:207\">誰も招待しなければ一人しか書いてないわけだし、気にしなくてもいいと思うんですが、この表示を見るたびに「募集してないわい」と突っ込んでます。</p>\n<hr data-sourcepos=\"26:1-27:0\">\n<p data-sourcepos=\"28:1-28:24\">以下、本題です。</p>\n<h2 data-sourcepos=\"30:1-30:24\">\n<span id=\"前提想定読者\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90%E6%83%B3%E5%AE%9A%E8%AA%AD%E8%80%85\"><i class=\"fa fa-link\"></i></a>前提・想定読者</h2>\n<ul data-sourcepos=\"31:1-32:0\">\n<li data-sourcepos=\"31:1-32:0\">Githubアカウントが必要</li>\n</ul>\n<p data-sourcepos=\"33:1-33:21\">これだけです。</p>\n<h2 data-sourcepos=\"35:1-35:48\">\n<span id=\"q-githubdevとかgithub-codespacesとは\" class=\"fragment\"></span><a href=\"#q-githubdev%E3%81%A8%E3%81%8Bgithub-codespaces%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Q. Github.devとかGitHub Codespacesとは？</h2>\n<p data-sourcepos=\"36:1-36:42\">A. Githubリポジトリ上で動くVSCode</p>\n<p data-sourcepos=\"38:1-40:69\">つまり、VSCodeを使いたくなったら<del>cloneして</del>commitしてpushするステップのようになります。<br>\ncloneがなくなるので、不要になったら捨てる作業がなくなります。<br>\n捨て忘れがなくなると考えるとかなり大きいです。</p>\n<div data-sourcepos=\"42:1-44:3\" class=\"note warn\">\n<span class=\"fa fa-fw fa-exclamation-circle\"></span><div>\n<p data-sourcepos=\"43:1-43:49\">Github.devはターミナルが使えません。</p>\n</div>\n</div>\n<div data-sourcepos=\"46:1-48:3\" class=\"note info\">\n<span class=\"fa fa-fw fa-check-circle\"></span><div>\n<p data-sourcepos=\"47:1-47:53\">Github Codespacesはターミナルも使えます。</p>\n</div>\n</div>\n<h3 data-sourcepos=\"50:1-50:44\">\n<span id=\"githubdev-or-codespacesの利用費用\" class=\"fragment\"></span><a href=\"#githubdev-or-codespaces%E3%81%AE%E5%88%A9%E7%94%A8%E8%B2%BB%E7%94%A8\"><i class=\"fa fa-link\"></i></a>GitHub(dev or Codespaces)の利用費用</h3>\n<p data-sourcepos=\"51:1-51:109\"><iframe id=\"qiita-embed-content__52428f70547cfdbf3ecbad0ae35c58df\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__52428f70547cfdbf3ecbad0ae35c58df\" data-content=\"https%3A%2F%2Fdocs.github.com%2Fja%2Fbilling%2Fmanaging-billing-for-github-codespaces%2Fabout-billing-for-github-codespaces\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"53:1-54:37\">今後変わりそうなので、本稿で触れるのは控えます。<br>\nなお、Github.devは無料です。</p>\n<h2 data-sourcepos=\"56:1-56:12\">\n<span id=\"使い方\" class=\"fragment\"></span><a href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\"><i class=\"fa fa-link\"></i></a>使い方</h2>\n<table data-sourcepos=\"57:1-60:183\">\n<thead>\n<tr data-sourcepos=\"57:1-57:25\">\n<th data-sourcepos=\"57:2-57:9\">操作</th>\n<th data-sourcepos=\"57:11-57:24\">実行方法</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"59:1-59:107\">\n<td data-sourcepos=\"59:2-59:13\">Github.dev</td>\n<td data-sourcepos=\"59:15-59:106\">ブラウザから使いたいリポジトリに移動して[.]キーで起動します。</td>\n</tr>\n<tr data-sourcepos=\"60:1-60:183\">\n<td data-sourcepos=\"60:2-60:20\">Github Codespaces</td>\n<td data-sourcepos=\"60:22-60:182\">いつもcloneなりダウンロードしている緑の「Code」ボタンを押すと、タブが表示されます。それぞれLocalとCodespacesです。</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"62:1-62:81\">繰り返しですが、ターミナルが使えるかどうかが違いです。</p>\n<h3 data-sourcepos=\"64:1-64:31\">\n<span id=\"真価を発揮する場合\" class=\"fragment\"></span><a href=\"#%E7%9C%9F%E4%BE%A1%E3%82%92%E7%99%BA%E6%8F%AE%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>真価を発揮する場合</h3>\n<p data-sourcepos=\"65:1-68:83\">github.devについては正直大きな価値はないです。位置付けとしては便利な機能の一つぐらいの感覚です。<br>\nCodespaces＝クラウドコンピューティングのメリットがそのまま使えます。<br>\nいわゆるAWSやらGCPなどと同じカテゴリです。ストレージはGithubなので、作ったファイルはGithubに格納する事ができます。<br>\nただし、gitで管理しているので終了前にcommit-pushは忘れずに。</p>\n<h2 data-sourcepos=\"70:1-70:81\">\n<span id=\"せっかくgithubでvscodeを使うのなら１画面で全部やりたい\" class=\"fragment\"></span><a href=\"#%E3%81%9B%E3%81%A3%E3%81%8B%E3%81%8Fgithub%E3%81%A7vscode%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AE%E3%81%AA%E3%82%89%EF%BC%91%E7%94%BB%E9%9D%A2%E3%81%A7%E5%85%A8%E9%83%A8%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>せっかくgithubでVSCodeを使うのなら、１画面で全部やりたい</h2>\n<p data-sourcepos=\"71:1-71:126\">何が言いたいかというと、VSCodeだけでGithubのリポジトリの機能を全部使おうというお話です。</p>\n<h3 data-sourcepos=\"73:1-73:35\">\n<span id=\"github-pull-requests-and-issues\" class=\"fragment\"></span><a href=\"#github-pull-requests-and-issues\"><i class=\"fa fa-link\"></i></a>GitHub Pull Requests and Issues</h3>\n<p data-sourcepos=\"74:1-74:85\"><iframe id=\"qiita-embed-content__33fe5727fa50a295f2cb1654c550b82e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__33fe5727fa50a295f2cb1654c550b82e\" data-content=\"https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DGitHub.vscode-pull-request-github\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"76:1-77:38\">github.devデフォルトで入ってますが、ローカルでも適用できます。<br>\nプルリクとIssueが見れます。</p>\n<h3 data-sourcepos=\"79:1-79:23\">\n<span id=\"github-repositories\" class=\"fragment\"></span><a href=\"#github-repositories\"><i class=\"fa fa-link\"></i></a>GitHub Repositories</h3>\n<p data-sourcepos=\"80:1-80:68\"><iframe id=\"qiita-embed-content__59e88827fa012d4f2880f3e810c69e05\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__59e88827fa012d4f2880f3e810c69e05\" data-content=\"https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DGitHub.remotehub\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"82:1-83:90\">これもデフォルトで入ってます。<br>\n別のリポジトリにVSCodeから切り替えができるのが非常に便利です。</p>\n<h3 data-sourcepos=\"85:1-85:18\">\n<span id=\"github-actions\" class=\"fragment\"></span><a href=\"#github-actions\"><i class=\"fa fa-link\"></i></a>GitHub Actions</h3>\n<p data-sourcepos=\"86:1-86:84\"><iframe id=\"qiita-embed-content__74ceaeccff1a2ed22941a0e28cafa020\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__74ceaeccff1a2ed22941a0e28cafa020\" data-content=\"https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dcschleiden.vscode-github-actions\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"88:1-88:104\">公式ではないですが、CIガンガンに回している場合は結果も見れて快適です。</p>\n<h3 data-sourcepos=\"90:1-90:11\">\n<span id=\"gistpad\" class=\"fragment\"></span><a href=\"#gistpad\"><i class=\"fa fa-link\"></i></a>GistPad</h3>\n<p data-sourcepos=\"91:1-91:71\"><iframe id=\"qiita-embed-content__7b4ff92321e243035216191f8cbb052b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7b4ff92321e243035216191f8cbb052b\" data-content=\"https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dvsls-contrib.gistfs\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"93:1-94:154\">こちらも公式ではないですが、gistを活用している方に重宝します。<br>\nこの拡張を入れる事で、リポジトリを横断してメモを共有する事ができるというgistの新しい使い方が見出せます。</p>\n<h3 data-sourcepos=\"96:1-96:22\">\n<span id=\"使えない機能\" class=\"fragment\"></span><a href=\"#%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84%E6%A9%9F%E8%83%BD\"><i class=\"fa fa-link\"></i></a>使えない機能</h3>\n<p data-sourcepos=\"97:1-97:45\">以下を閲覧（参照）できません。</p>\n<ul data-sourcepos=\"99:1-103:0\">\n<li data-sourcepos=\"99:1-99:6\">Wiki</li>\n<li data-sourcepos=\"100:1-100:9\">Project</li>\n<li data-sourcepos=\"101:1-101:12\">Discussion</li>\n<li data-sourcepos=\"102:1-103:0\">Pages</li>\n</ul>\n<p data-sourcepos=\"104:1-105:162\">WikiについてはVSCodeではなく、Githubでやりようはあるんですが、編集ができません。<br>\n厳密に言えば、編集はできますが編集内容が本来のWikiに反映されないため、こちらにも専用のCIを作る必要があります。</p>\n<p data-sourcepos=\"107:1-107:54\">たとえば、以下のようなイメージです。</p>\n<ol data-sourcepos=\"109:1-112:0\">\n<li data-sourcepos=\"109:1-109:67\">元リポジトリ.wiki.gitを通常リポジトリにforce push</li>\n<li data-sourcepos=\"110:1-110:74\">force pushしたリポジトリ（Wikiの内容）を編集して保存</li>\n<li data-sourcepos=\"111:1-112:0\">pushをトリガーにして元リポジトリ.wiki.gitにforce push</li>\n</ol>\n<p data-sourcepos=\"113:1-115:124\">このやり方で実施する場合は、github.devではできない（force pushができない）ため、ターミナル(ここではCodespaces)からforce pushを実行する必要があるんですね。<br>\nファイリングするだけならwikiを使うよりwikiディレクトリを作って、以下に格納しておけば良いわけですが、従来のWikiのような感覚でブラウジングしていく際には非常に見えにくいです。<br>\nもしwikiを充実させたい場合は、現行のGithubWebエディターを使った方がいいかもしれません。</p>\n<h2 data-sourcepos=\"117:1-117:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"118:1-119:88\">\n<li data-sourcepos=\"118:1-118:195\"><a href=\"https://qiita.com/nomurasan/items/162964f6fb2914cd348c\" id=\"reference-ba32527da3862fb19666\">(16日目) for文【for(これ;これ;これ)】の内容を正しく説明できますか？よくある勘違いを解説します。</a></li>\n<li data-sourcepos=\"119:1-119:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n",
        "body": "## 与太話\n今さっき難産の講師哲学の話を書いてひと段落した時に、アドカレの記事だけじゃなくて、カレンダー自体の❤️に気付きました、ありがとうございます。\n通知になかったんでいつ押してくれたか分からないんですが、率直に嬉しいです！\nあんまりこう言うといいね乞食みたいで嫌（少なくとも、私が見る側の立場だった時はそう思ってます）なんですが、書いている側だと「ちゃんと見てるよ」って言った方が良いんじゃないか？と思うこの違いはなんなんでしょうね。\nきっと、明日の私がこれ見たら「コイツいいね乞食してんじゃん」って絶対言う。断言します。\nなので、今の率直な私の気持ちを書き残しておきます。\n\n**いいねくれてありがとう！**\n\nもう疲れてんね、でもあと10時間以内（日が変わるまで）にこれ書きあげるよ。\n明日の分も書いて余裕作ってゆっくり寝るよ！\nじゃないと、何のために今日を休みにしたか分からんです。\n\n### アドベントカレンダーの購読 is 何？\nいいねボタンは自分では押せない（わかる）ですが、購読する（RSS）ボタンは自分でも押せる（？？？）みたいですね。\n使った事ないんで、これやったらどうなるんだろう？と思って自分のカレンダーを購読してます。つまり購読者の一人は私です。\nこういうのにウソは良くないからね、自らゲロっていきますよ！\n（単純に、積極的にアクセスを取りに行く気がないとも言います😅）\n\n### どうしても気になる、カレンダーページのコレ\n俺のカレンダーは俺の一人踊りを披露する場所にしたいので参加者を募集してないんですが、この表示がいつも気になってます。\n![スクリーンショット 2022-12-15 13.57.42.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/3fbd69a6-2d22-e5ad-2ee2-2d2bac971f55.png)\n\n誰も招待しなければ一人しか書いてないわけだし、気にしなくてもいいと思うんですが、この表示を見るたびに「募集してないわい」と突っ込んでます。\n\n---\n\n以下、本題です。\n\n## 前提・想定読者\n- Githubアカウントが必要\n\nこれだけです。\n\n## Q. Github.devとかGitHub Codespacesとは？\nA. Githubリポジトリ上で動くVSCode\n\nつまり、VSCodeを使いたくなったら~~cloneして~~commitしてpushするステップのようになります。\ncloneがなくなるので、不要になったら捨てる作業がなくなります。\n捨て忘れがなくなると考えるとかなり大きいです。\n\n:::note warn\nGithub.devはターミナルが使えません。\n:::\n\n:::note\nGithub Codespacesはターミナルも使えます。\n:::\n\n### GitHub(dev or Codespaces)の利用費用\nhttps://docs.github.com/ja/billing/managing-billing-for-github-codespaces/about-billing-for-github-codespaces\n\n今後変わりそうなので、本稿で触れるのは控えます。\nなお、Github.devは無料です。\n\n## 使い方\n| 操作 | 実行方法 |\n| --- | --- |\n| Github.dev | ブラウザから使いたいリポジトリに移動して[.]キーで起動します。 |\n| Github Codespaces | いつもcloneなりダウンロードしている緑の「Code」ボタンを押すと、タブが表示されます。それぞれLocalとCodespacesです。 |\n\n繰り返しですが、ターミナルが使えるかどうかが違いです。\n\n### 真価を発揮する場合\ngithub.devについては正直大きな価値はないです。位置付けとしては便利な機能の一つぐらいの感覚です。\nCodespaces＝クラウドコンピューティングのメリットがそのまま使えます。\nいわゆるAWSやらGCPなどと同じカテゴリです。ストレージはGithubなので、作ったファイルはGithubに格納する事ができます。\nただし、gitで管理しているので終了前にcommit-pushは忘れずに。\n\n## せっかくgithubでVSCodeを使うのなら、１画面で全部やりたい\n何が言いたいかというと、VSCodeだけでGithubのリポジトリの機能を全部使おうというお話です。\n\n### GitHub Pull Requests and Issues\nhttps://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github\n\ngithub.devデフォルトで入ってますが、ローカルでも適用できます。\nプルリクとIssueが見れます。\n\n### GitHub Repositories\nhttps://marketplace.visualstudio.com/items?itemName=GitHub.remotehub\n\nこれもデフォルトで入ってます。\n別のリポジトリにVSCodeから切り替えができるのが非常に便利です。\n\n### GitHub Actions\nhttps://marketplace.visualstudio.com/items?itemName=cschleiden.vscode-github-actions\n\n公式ではないですが、CIガンガンに回している場合は結果も見れて快適です。\n\n### GistPad\nhttps://marketplace.visualstudio.com/items?itemName=vsls-contrib.gistfs\n\nこちらも公式ではないですが、gistを活用している方に重宝します。\nこの拡張を入れる事で、リポジトリを横断してメモを共有する事ができるというgistの新しい使い方が見出せます。\n\n### 使えない機能\n以下を閲覧（参照）できません。\n\n- Wiki\n- Project\n- Discussion\n- Pages\n\nWikiについてはVSCodeではなく、Githubでやりようはあるんですが、編集ができません。\n厳密に言えば、編集はできますが編集内容が本来のWikiに反映されないため、こちらにも専用のCIを作る必要があります。\n\nたとえば、以下のようなイメージです。\n\n1. 元リポジトリ.wiki.gitを通常リポジトリにforce push\n1. force pushしたリポジトリ（Wikiの内容）を編集して保存\n1. pushをトリガーにして元リポジトリ.wiki.gitにforce push\n\nこのやり方で実施する場合は、github.devではできない（force pushができない）ため、ターミナル(ここではCodespaces)からforce pushを実行する必要があるんですね。\nファイリングするだけならwikiを使うよりwikiディレクトリを作って、以下に格納しておけば良いわけですが、従来のWikiのような感覚でブラウジングしていく際には非常に見えにくいです。\nもしwikiを充実させたい場合は、現行のGithubWebエディターを使った方がいいかもしれません。\n\n## 次の記事\n- [(16日目) for文【for(これ;これ;これ)】の内容を正しく説明できますか？よくある勘違いを解説します。](https://qiita.com/nomurasan/items/162964f6fb2914cd348c)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-16T00:04:12+09:00",
        "group": null,
        "id": "7b95c71e78a96ad1af27",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "GitHub",
                "versions": []
            },
            {
                "name": "開発環境",
                "versions": []
            },
            {
                "name": "ブラウザ",
                "versions": []
            },
            {
                "name": "VSCode",
                "versions": []
            },
            {
                "name": "Codespaces",
                "versions": []
            }
        ],
        "title": "ブラウザでVSCodeが使えるらしいgithub.devとかGitHub Codespacesを検証してみた",
        "updated_at": "2022-12-17T09:30:00+09:00",
        "url": "https://qiita.com/nomurasan/items/7b95c71e78a96ad1af27",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 691,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<p data-sourcepos=\"1:1-2:57\">xxx会って書くとゼット会みたいだなぁ、と思ったのは私だけかもしれません。<br>\n世代を測るモノサシにしてみてください。</p>\n<h2 data-sourcepos=\"4:1-4:24\">\n<span id=\"昔の勉強会の姿\" class=\"fragment\"></span><a href=\"#%E6%98%94%E3%81%AE%E5%8B%89%E5%BC%B7%E4%BC%9A%E3%81%AE%E5%A7%BF\"><i class=\"fa fa-link\"></i></a>昔の勉強会の姿</h2>\n<p data-sourcepos=\"5:1-8:156\">当時は意識高い系という言葉はなかったんですが、概念は世紀を超えて存在していただろうなので、ここでは取り上げません。<br>\n大学だとガチ系サークルに多いです。残念ながら私のサークル時代はコミケサークルだったので、勉強会というより研修会？今だともくもく会でした。<br>\nとにかく部誌（作品）を書かない事には始まらなかったため、教えるというよりは「やれ」で押し通していた（実際、それしかない）<br>\n色々な「勉強」の形がありますが、学ぼうという姿勢は形や熱量は違うものの、ベクトル？としては同じはずです。</p>\n<h2 data-sourcepos=\"10:1-10:77\">\n<span id=\"ltも参入敷居を下げるために使われていた側面があった\" class=\"fragment\"></span><a href=\"#lt%E3%82%82%E5%8F%82%E5%85%A5%E6%95%B7%E5%B1%85%E3%82%92%E4%B8%8B%E3%81%92%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AB%E4%BD%BF%E3%82%8F%E3%82%8C%E3%81%A6%E3%81%84%E3%81%9F%E5%81%B4%E9%9D%A2%E3%81%8C%E3%81%82%E3%81%A3%E3%81%9F\"><i class=\"fa fa-link\"></i></a>LTも参入敷居を下げるために使われていた側面があった</h2>\n<p data-sourcepos=\"11:1-11:176\">ソースを示せないのでつらいですが、LTが普及していった話に触れないわけには行かないのでおぢさんの体験談だけ垂れ流します。</p>\n<p data-sourcepos=\"13:1-16:78\">勉強会も登壇スピーカーがガッツリ40分とか短くて15分も話す事が多かった（＝それしかなかった）時代があったんですが、大体はメインスピーカーが一人で登壇して、発表資料も今のような説明とか解説ではなく講義スタイルを取っている事が主流だったんですね。<br>\n今もメイン登壇者は内容や方針こそ違えど、時間枠は同じぐらいで設定される事が多いです（自己申告のパターンもありますし、主催側から尺の相談を受ける事もあります）<br>\n実務としての講義だと50～70分1コマが連続的に続きますので、話す時間としてはこれでもまだ短いかな？<br>\n今回はややこしくなるのでハンズオン系は考慮しません。</p>\n<p data-sourcepos=\"18:1-19:213\">これらを一括りに「登壇」あるいは「スピーカー」枠としていたので、主催者がオファーをせず、有志で登壇＝LT枠を作ることで主催側にも参加者側にもある種のパラダイムシフトが生じたのは確かです。<br>\nどちらにしても、初期の頃は登壇すると発表内容に興味があるユーザーが集まって意見交換がされていたため、ネットワーキングはしやすかったと思います。</p>\n<h3 data-sourcepos=\"21:1-21:76\">\n<span id=\"それでもまだまだ勉強会参加登壇への敷居が高い\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%82%8C%E3%81%A7%E3%82%82%E3%81%BE%E3%81%A0%E3%81%BE%E3%81%A0%E5%8B%89%E5%BC%B7%E4%BC%9A%E5%8F%82%E5%8A%A0%E7%99%BB%E5%A3%87%E3%81%B8%E3%81%AE%E6%95%B7%E5%B1%85%E3%81%8C%E9%AB%98%E3%81%84\"><i class=\"fa fa-link\"></i></a>それでもまだまだ勉強会参加（登壇）への敷居が高い</h3>\n<p data-sourcepos=\"22:1-26:217\">今はオンラインが主流になりましたし、参加費も無料なので思いついたらふらっと新規参加ができましたが、当時はコミュニティ間の結びつきも弱かったんですね。<br>\nそれもそのはず、情報発信もTwitterが普及するまではmixiのボイス（でしたっけ？正式名称が思い出せないです）でフォロワー（友達の友達まで）しか見ることが出来なかったので、人間関係が主催に近い位置にいなければ存在を知ることもできませんでした。<br>\nTwitterが普及すると爆発的に勉強会の情報が発信され、これらをまとめるべく？勉強会の情報を集約するために様々な方法が模索されました。<br>\ngoogleカレンダーが多かった気がします<br>\nこれでようやく、connpassやdots、doorkeeperといったエンジニアイベントを集めたり主催するサイトが生まれる土壌が出来上がっていきました（と私は思っています）</p>\n<h2 data-sourcepos=\"28:1-28:74\">\n<span id=\"はじめてltに参加してみると気付くもの変わるもの\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6lt%E3%81%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B%E3%81%A8%E6%B0%97%E4%BB%98%E3%81%8F%E3%82%82%E3%81%AE%E5%A4%89%E3%82%8F%E3%82%8B%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>はじめてLTに参加してみると気付くもの・変わるもの</h2>\n<p data-sourcepos=\"29:1-29:161\">意図とは外れますが、未参加の方に、LTに参加をするとこんなに変わるよ（変わらないよ）というお話をしておきます。</p>\n<h3 data-sourcepos=\"31:1-31:37\">\n<span id=\"終わってみると呆気ない\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B%E3%81%A8%E5%91%86%E6%B0%97%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>終わってみると呆気ない</h3>\n<p data-sourcepos=\"32:1-33:75\">初めての5分間は準備してきた割に大した事ないんですよね。<br>\n特に初めての登壇なので、気合を入れて臨むはずです。</p>\n<p data-sourcepos=\"35:1-37:101\">が、やった結果というか、感想が↑の方も多いと思います。<br>\n多いよね？<br>\n最初に考える5分と、慣れてきた5分は感じ方が変わってくる事に気付きます</p>\n<p data-sourcepos=\"39:1-40:120\">なお、慣れてくるとスライドとか何もナシに喋りはじめます。<br>\nむしろ、スライドなどプレゼンツールは所詮プレゼンツールでしかない事に気付きます。</p>\n<p data-sourcepos=\"42:1-42:96\">本当の始まりは、プレゼンツールのないプレゼンなのかもしれません。</p>\n<h3 data-sourcepos=\"44:1-44:79\">\n<span id=\"目に見える変化はないが次の参加への抵抗感が和らぐ\" class=\"fragment\"></span><a href=\"#%E7%9B%AE%E3%81%AB%E8%A6%8B%E3%81%88%E3%82%8B%E5%A4%89%E5%8C%96%E3%81%AF%E3%81%AA%E3%81%84%E3%81%8C%E6%AC%A1%E3%81%AE%E5%8F%82%E5%8A%A0%E3%81%B8%E3%81%AE%E6%8A%B5%E6%8A%97%E6%84%9F%E3%81%8C%E5%92%8C%E3%82%89%E3%81%90\"><i class=\"fa fa-link\"></i></a>目に見える変化はないが、次の参加への抵抗感が和らぐ</h3>\n<p data-sourcepos=\"45:1-46:102\">LTの経験を積んだからと言って、何かが変わるか？というと目に見える変化はないです。<br>\nただし、2回目のLT会への参加障壁がかなり低くなっている事に気付きます。</p>\n<p data-sourcepos=\"48:1-49:90\">受験戦争を頑張って勝ち抜いて入学式を迎えたからといって、変わった事はないですよね？というぐらいないです。<br>\n入学した後に大学生のイメージが少し変わったぐらいでしょうか。</p>\n<h3 data-sourcepos=\"51:1-51:64\">\n<span id=\"他の人がどうやって登壇しているか気になる\" class=\"fragment\"></span><a href=\"#%E4%BB%96%E3%81%AE%E4%BA%BA%E3%81%8C%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E7%99%BB%E5%A3%87%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%8B%E6%B0%97%E3%81%AB%E3%81%AA%E3%82%8B\"><i class=\"fa fa-link\"></i></a>他の人がどうやって登壇しているか気になる</h3>\n<p data-sourcepos=\"52:1-53:54\">これはLTに限った話ではありませんが、一度やったら他の人がどうやっているのか気になりはじめます。<br>\n既に次の対策を考え始める事でしょう。</p>\n<p data-sourcepos=\"55:1-55:281\">ただし、次回参加するまでに時間が経ち過ぎると初参加と同じ状態になるので、初参加前から次回を見据えておくか、既に定期的に参加している勉強会コミュニティがあればそちらで初LTに臨むのもアリです。</p>\n<h2 data-sourcepos=\"57:1-57:17\">\n<span id=\"lt--ポエム\" class=\"fragment\"></span><a href=\"#lt--%E3%83%9D%E3%82%A8%E3%83%A0\"><i class=\"fa fa-link\"></i></a>LT &lt; ポエム</h2>\n<p data-sourcepos=\"58:1-60:54\">そもそも指標がおかしいんですが、ここではLTに参加するよりQiitaなどにポエムを投稿する方が参入障壁は低いよね？というポイントに言及していきます。<br>\n勉強会も今はオンラインで参加できるので、時間的制約と伝える方法以外はポエムを投稿するのと同じ状態ではないでしょうか。<br>\n伝える方法が書き物か口かの違いです。</p>\n<p data-sourcepos=\"62:1-64:116\">痴呆を認知症、援助交際をパパ活と言い換えただけでしかないんですが、LT会をポエム会と呼び替えて効果を測定してみたいですね。<br>\nあ、これいいポエム駆動になりそうですね。計測する方法とかは各コミュニティでやり方が異なると思いますが、シンプルにやるならA-Bテストでしょうか。<br>\nLTやる時にいつものメンバーは除外して、新規が何人登壇してくれるか、でしょうか。</p>\n<p data-sourcepos=\"66:1-66:156\">あっと、今更ですがデータとかない（これから作る）ので、今日の時点では共感してくれただけで私は嬉しいです。</p>\n<h2 data-sourcepos=\"68:1-68:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"69:1-70:88\">\n<li data-sourcepos=\"69:1-69:134\"><a href=\"https://qiita.com/nomurasan/items/8c30d70ccb127ba15c2a\" id=\"reference-e6c38d15fe2ac611421b\">(19日目) 一本のトピックにまとめられなかった小ネタ集</a></li>\n<li data-sourcepos=\"70:1-70:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n",
        "body": "xxx会って書くとゼット会みたいだなぁ、と思ったのは私だけかもしれません。\n世代を測るモノサシにしてみてください。\n\n## 昔の勉強会の姿\n当時は意識高い系という言葉はなかったんですが、概念は世紀を超えて存在していただろうなので、ここでは取り上げません。\n大学だとガチ系サークルに多いです。残念ながら私のサークル時代はコミケサークルだったので、勉強会というより研修会？今だともくもく会でした。\nとにかく部誌（作品）を書かない事には始まらなかったため、教えるというよりは「やれ」で押し通していた（実際、それしかない）\n色々な「勉強」の形がありますが、学ぼうという姿勢は形や熱量は違うものの、ベクトル？としては同じはずです。\n\n## LTも参入敷居を下げるために使われていた側面があった\nソースを示せないのでつらいですが、LTが普及していった話に触れないわけには行かないのでおぢさんの体験談だけ垂れ流します。\n\n勉強会も登壇スピーカーがガッツリ40分とか短くて15分も話す事が多かった（＝それしかなかった）時代があったんですが、大体はメインスピーカーが一人で登壇して、発表資料も今のような説明とか解説ではなく講義スタイルを取っている事が主流だったんですね。\n今もメイン登壇者は内容や方針こそ違えど、時間枠は同じぐらいで設定される事が多いです（自己申告のパターンもありますし、主催側から尺の相談を受ける事もあります）\n実務としての講義だと50～70分1コマが連続的に続きますので、話す時間としてはこれでもまだ短いかな？\n今回はややこしくなるのでハンズオン系は考慮しません。\n\nこれらを一括りに「登壇」あるいは「スピーカー」枠としていたので、主催者がオファーをせず、有志で登壇＝LT枠を作ることで主催側にも参加者側にもある種のパラダイムシフトが生じたのは確かです。\nどちらにしても、初期の頃は登壇すると発表内容に興味があるユーザーが集まって意見交換がされていたため、ネットワーキングはしやすかったと思います。\n\n### それでもまだまだ勉強会参加（登壇）への敷居が高い\n今はオンラインが主流になりましたし、参加費も無料なので思いついたらふらっと新規参加ができましたが、当時はコミュニティ間の結びつきも弱かったんですね。\nそれもそのはず、情報発信もTwitterが普及するまではmixiのボイス（でしたっけ？正式名称が思い出せないです）でフォロワー（友達の友達まで）しか見ることが出来なかったので、人間関係が主催に近い位置にいなければ存在を知ることもできませんでした。\nTwitterが普及すると爆発的に勉強会の情報が発信され、これらをまとめるべく？勉強会の情報を集約するために様々な方法が模索されました。\ngoogleカレンダーが多かった気がします\nこれでようやく、connpassやdots、doorkeeperといったエンジニアイベントを集めたり主催するサイトが生まれる土壌が出来上がっていきました（と私は思っています）\n\n## はじめてLTに参加してみると気付くもの・変わるもの\n意図とは外れますが、未参加の方に、LTに参加をするとこんなに変わるよ（変わらないよ）というお話をしておきます。\n\n### 終わってみると呆気ない\n初めての5分間は準備してきた割に大した事ないんですよね。\n特に初めての登壇なので、気合を入れて臨むはずです。\n\nが、やった結果というか、感想が↑の方も多いと思います。\n多いよね？\n最初に考える5分と、慣れてきた5分は感じ方が変わってくる事に気付きます\n\nなお、慣れてくるとスライドとか何もナシに喋りはじめます。\nむしろ、スライドなどプレゼンツールは所詮プレゼンツールでしかない事に気付きます。\n\n本当の始まりは、プレゼンツールのないプレゼンなのかもしれません。\n\n### 目に見える変化はないが、次の参加への抵抗感が和らぐ\nLTの経験を積んだからと言って、何かが変わるか？というと目に見える変化はないです。\nただし、2回目のLT会への参加障壁がかなり低くなっている事に気付きます。\n\n受験戦争を頑張って勝ち抜いて入学式を迎えたからといって、変わった事はないですよね？というぐらいないです。\n入学した後に大学生のイメージが少し変わったぐらいでしょうか。\n\n### 他の人がどうやって登壇しているか気になる\nこれはLTに限った話ではありませんが、一度やったら他の人がどうやっているのか気になりはじめます。\n既に次の対策を考え始める事でしょう。\n\nただし、次回参加するまでに時間が経ち過ぎると初参加と同じ状態になるので、初参加前から次回を見据えておくか、既に定期的に参加している勉強会コミュニティがあればそちらで初LTに臨むのもアリです。\n\n## LT < ポエム\nそもそも指標がおかしいんですが、ここではLTに参加するよりQiitaなどにポエムを投稿する方が参入障壁は低いよね？というポイントに言及していきます。\n勉強会も今はオンラインで参加できるので、時間的制約と伝える方法以外はポエムを投稿するのと同じ状態ではないでしょうか。\n伝える方法が書き物か口かの違いです。\n\n痴呆を認知症、援助交際をパパ活と言い換えただけでしかないんですが、LT会をポエム会と呼び替えて効果を測定してみたいですね。\nあ、これいいポエム駆動になりそうですね。計測する方法とかは各コミュニティでやり方が異なると思いますが、シンプルにやるならA-Bテストでしょうか。\nLTやる時にいつものメンバーは除外して、新規が何人登壇してくれるか、でしょうか。\n\nあっと、今更ですがデータとかない（これから作る）ので、今日の時点では共感してくれただけで私は嬉しいです。\n\n## 次の記事\n- [(19日目) 一本のトピックにまとめられなかった小ネタ集](https://qiita.com/nomurasan/items/8c30d70ccb127ba15c2a)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-14T20:32:26+09:00",
        "group": null,
        "id": "9e4e67c588d3dfde4ead",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "勉強会",
                "versions": []
            },
            {
                "name": "ポエム",
                "versions": []
            },
            {
                "name": "コミュニティ",
                "versions": []
            }
        ],
        "title": "勉強会で「LT会」というと参入敷居を感じさせるので「ポエム会」って呼ぼうぜ",
        "updated_at": "2022-12-18T18:04:41+09:00",
        "url": "https://qiita.com/nomurasan/items/9e4e67c588d3dfde4ead",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 720,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<p data-sourcepos=\"1:1-1:141\">※本稿または本プロジェクトはPDD（ポエム駆動開発）であるため、ポエムはとても重要な位置付けです。</p>\n<h2 data-sourcepos=\"3:1-3:75\">\n<span id=\"カリキュラムでオリジナルブログサイトを作ろう\" class=\"fragment\"></span><a href=\"#%E3%82%AB%E3%83%AA%E3%82%AD%E3%83%A5%E3%83%A9%E3%83%A0%E3%81%A7%E3%82%AA%E3%83%AA%E3%82%B8%E3%83%8A%E3%83%AB%E3%83%96%E3%83%AD%E3%82%B0%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8D%E3%81%86\"><i class=\"fa fa-link\"></i></a>カリキュラムでオリジナルブログ（サイト）を作ろう</h2>\n<p data-sourcepos=\"4:1-7:156\">「卒業制作でコピーサイトをチーム開発で作る」という運用をしている事が多いんですが、まずはこれをやめます。<br>\nやめます、と言っても私の周囲を動かす事はできないので、私が取り組んでいる範囲についてはやめます。<br>\n卒業制作した作品を、卒業後もきちんと使っていける環境を作ることで、スクールでは教えることが難しい「運用」を学んでもらう事ができます。<br>\nポイントは、制作して終わりではなく「自分で使ってみてどう感じるか」を通じて開発を学んでいく事にあります。</p>\n<h2 data-sourcepos=\"9:1-9:36\">\n<span id=\"書いた記事をなくさない\" class=\"fragment\"></span><a href=\"#%E6%9B%B8%E3%81%84%E3%81%9F%E8%A8%98%E4%BA%8B%E3%82%92%E3%81%AA%E3%81%8F%E3%81%95%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>書いた記事をなくさない</h2>\n<p data-sourcepos=\"10:1-11:105\">私は昔から（小学生の頃から）記事をなんだかんだ書き続けてきて、全部残っていればアフィリエイト用のコンテンツを除いて4000記事ぐらいあったように思えてならないんですね。<br>\n同じような経験をしている方は決して少なくないのではないか、と思います。</p>\n<p data-sourcepos=\"13:1-15:147\">これだけクラウドが出てきたりしていますが、環境によっては使えなくなったりWordPressに突っ込んでしまってサイトごと消失したり、なんて悲しい事もありましたが、こんな悲しいことはもうナシにしたい。<br>\nという目標自体は本プロジェクト発足時点から目標に掲げていたんですが、今のところ安定的に保存はできても、公開や運用に至っていないものばかりです。<br>\n特にバックアップが鬼門。バックアップ自体はできるけど、バックアップした後に活用するのが難しいです。</p>\n<p data-sourcepos=\"17:1-17:286\">現状は、各サービス毎にオレオレラッパーを作っていましたが、Zennなどマークダウンで書いたものをそのまま手元に残せるサービスも出てきたので、今後は活用面で見ても難度は大きく下がったように思います。</p>\n<h2 data-sourcepos=\"19:1-19:84\">\n<span id=\"エージェントが欲しいデータを抽出できる仕組みを整備する\" class=\"fragment\"></span><a href=\"#%E3%82%A8%E3%83%BC%E3%82%B8%E3%82%A7%E3%83%B3%E3%83%88%E3%81%8C%E6%AC%B2%E3%81%97%E3%81%84%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E6%8A%BD%E5%87%BA%E3%81%A7%E3%81%8D%E3%82%8B%E4%BB%95%E7%B5%84%E3%81%BF%E3%82%92%E6%95%B4%E5%82%99%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>エージェントが欲しいデータを抽出できる仕組みを整備する</h2>\n<p data-sourcepos=\"20:1-24:48\">需要があるかは分かりませんが、各社ごとに必要な情報が異なっている事はなんとなく理解しています。<br>\nで「欲しい情報が具体的にどれだ」という話が難しいので、結局のところはエージェントの要望あるいは応募したい案件に合わせて、自前で作ったシートを渡しているのが実情です。<br>\nというのも、私の場合はキャリアが多いのと広すぎて全部読んでもらおうとするとどれだけ圧縮（文字を削るのは当然として、小さなフォントや行間、余白いっぱいにしてもA4で5ページ）以上は必要になってしまうため、選考としてはそんな長い書類を見たくないわけです。<br>\n5ページぐらいなら経験者ならよくある事として読んでいく事はできるんですが、詰めた上に文字も小さい5ページではワケが違います。<br>\n私が採用側なら読みたくないです。</p>\n<p data-sourcepos=\"26:1-28:90\">これを少しでも解消するべく、欲しい情報をうまく抽出する仕組みを考えたいです。<br>\nサイトやブログの検索システムのようなものを、経歴書に置き換えればできますが、問題はフリーワード検索はしないはずなので、検索項目に合わせて書類の情報を整備してデータベースとして活用できるようにする事です。<br>\n過去のデータなどは欠損しているものもあるので、検索項目として</p>\n<h2 data-sourcepos=\"30:1-30:99\">\n<span id=\"プラットフォームとしてのgithubかプレゼンテーションとしてのgithubか\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AEgithub%E3%81%8B%E3%83%97%E3%83%AC%E3%82%BC%E3%83%B3%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AEgithub%E3%81%8B\"><i class=\"fa fa-link\"></i></a>プラットフォームとしてのGithubか、プレゼンテーションとしてのGithubか</h2>\n<p data-sourcepos=\"31:1-32:51\">要するに、Githubをどうやって使っていくか、というお話です。<br>\n具体的には、アカウントの運用です。</p>\n<p data-sourcepos=\"34:1-37:301\">本来は開発者然としてGitの細かい制御や開発をしながら、データハブとして使うのが元々のGit関連のサービスが想定しているものです。<br>\nが、Githubに限った話をすると、色々な機能があり、ユーザーがいじれる範囲が広くてやりごたえがあります。<br>\n元々のGithub就活・転職プロジェクトも、こういったGithubの仕様をうまく使いながらポートフォリオを作成し、Githubにあげたソースをスコア化して応募したり、スカウトをいただいたりしていたのが発端でした。<br>\nが、近年はGithubを使ったスカウトより発信者のアカウント（Twitterやその他SNSなど）を経由して情報を収集する動きが多く見られるようになったため、Githubに注力するのは効果が薄くなってしまっている傾向を感じています。</p>\n<p data-sourcepos=\"39:1-39:195\">であれば、Github（Git）に力を入れるよりは、発信力を高める方法を検討していった方が良いだろう、というのでGithubの使い方を検討しています。</p>\n<h2 data-sourcepos=\"41:1-41:84\">\n<span id=\"githubを使わない就活転職はプロジェクトと称するべきか\" class=\"fragment\"></span><a href=\"#github%E3%82%92%E4%BD%BF%E3%82%8F%E3%81%AA%E3%81%84%E5%B0%B1%E6%B4%BB%E8%BB%A2%E8%81%B7%E3%81%AF%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A8%E7%A7%B0%E3%81%99%E3%82%8B%E3%81%B9%E3%81%8D%E3%81%8B\"><i class=\"fa fa-link\"></i></a>Githubを使わない就活・転職はプロジェクトと称するべきか？</h2>\n<p data-sourcepos=\"42:1-43:252\">困った話ですが、メインとなる場所がGithubではなくなってしまう可能性が出てきたので、Github就活・転職プロジェクトという名前に違和感が生まれてしまっています。<br>\nGithubを使ったスカウトがなければ、Githubでの就活も転職もないので、そもそもプロジェクト自体が破綻ーエンジニア転職としてそぐわないのではないか、という気がしないでもないです。</p>\n<p data-sourcepos=\"45:1-46:240\">この辺りは実際にエージェントの方に聞いてみたくもありますね。<br>\n自社サイト等で求人を出している以外に応募者を募る方法って広告以外にあるかな？という段階なので、この辺りは自分で求人を出してみたり採用側になってみてからですね…。</p>\n<h2 data-sourcepos=\"48:1-48:28\">\n<span id=\"github就活転職2023\" class=\"fragment\"></span><a href=\"#github%E5%B0%B1%E6%B4%BB%E8%BB%A2%E8%81%B72023\"><i class=\"fa fa-link\"></i></a>Github就活・転職2023</h2>\n<p data-sourcepos=\"49:1-51:75\">現状は積極的にGithubを使うというより、Githubをプラットフォーム/プレゼンテーションツールとして考えて活用していく方針です。<br>\n目的が不明瞭なので、現状で重要度が高いのは、書いたデータをなくさない・活用できるようにフォーマットを整える方ですね。<br>\n良い情報が分かり次第シェアしていきたいと思います。</p>\n<h2 data-sourcepos=\"53:1-53:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"54:1-55:88\">\n<li data-sourcepos=\"54:1-54:51\"><a href=\"https://qiita.com/nomurasan/items/\">(24日目) </a></li>\n<li data-sourcepos=\"55:1-55:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n",
        "body": "※本稿または本プロジェクトはPDD（ポエム駆動開発）であるため、ポエムはとても重要な位置付けです。\n\n## カリキュラムでオリジナルブログ（サイト）を作ろう\n「卒業制作でコピーサイトをチーム開発で作る」という運用をしている事が多いんですが、まずはこれをやめます。\nやめます、と言っても私の周囲を動かす事はできないので、私が取り組んでいる範囲についてはやめます。\n卒業制作した作品を、卒業後もきちんと使っていける環境を作ることで、スクールでは教えることが難しい「運用」を学んでもらう事ができます。\nポイントは、制作して終わりではなく「自分で使ってみてどう感じるか」を通じて開発を学んでいく事にあります。\n\n## 書いた記事をなくさない\n私は昔から（小学生の頃から）記事をなんだかんだ書き続けてきて、全部残っていればアフィリエイト用のコンテンツを除いて4000記事ぐらいあったように思えてならないんですね。\n同じような経験をしている方は決して少なくないのではないか、と思います。\n\nこれだけクラウドが出てきたりしていますが、環境によっては使えなくなったりWordPressに突っ込んでしまってサイトごと消失したり、なんて悲しい事もありましたが、こんな悲しいことはもうナシにしたい。\nという目標自体は本プロジェクト発足時点から目標に掲げていたんですが、今のところ安定的に保存はできても、公開や運用に至っていないものばかりです。\n特にバックアップが鬼門。バックアップ自体はできるけど、バックアップした後に活用するのが難しいです。\n\n現状は、各サービス毎にオレオレラッパーを作っていましたが、Zennなどマークダウンで書いたものをそのまま手元に残せるサービスも出てきたので、今後は活用面で見ても難度は大きく下がったように思います。\n\n## エージェントが欲しいデータを抽出できる仕組みを整備する\n需要があるかは分かりませんが、各社ごとに必要な情報が異なっている事はなんとなく理解しています。\nで「欲しい情報が具体的にどれだ」という話が難しいので、結局のところはエージェントの要望あるいは応募したい案件に合わせて、自前で作ったシートを渡しているのが実情です。\nというのも、私の場合はキャリアが多いのと広すぎて全部読んでもらおうとするとどれだけ圧縮（文字を削るのは当然として、小さなフォントや行間、余白いっぱいにしてもA4で5ページ）以上は必要になってしまうため、選考としてはそんな長い書類を見たくないわけです。\n5ページぐらいなら経験者ならよくある事として読んでいく事はできるんですが、詰めた上に文字も小さい5ページではワケが違います。\n私が採用側なら読みたくないです。\n\nこれを少しでも解消するべく、欲しい情報をうまく抽出する仕組みを考えたいです。\nサイトやブログの検索システムのようなものを、経歴書に置き換えればできますが、問題はフリーワード検索はしないはずなので、検索項目に合わせて書類の情報を整備してデータベースとして活用できるようにする事です。\n過去のデータなどは欠損しているものもあるので、検索項目として\n\n## プラットフォームとしてのGithubか、プレゼンテーションとしてのGithubか\n要するに、Githubをどうやって使っていくか、というお話です。\n具体的には、アカウントの運用です。\n\n本来は開発者然としてGitの細かい制御や開発をしながら、データハブとして使うのが元々のGit関連のサービスが想定しているものです。\nが、Githubに限った話をすると、色々な機能があり、ユーザーがいじれる範囲が広くてやりごたえがあります。\n元々のGithub就活・転職プロジェクトも、こういったGithubの仕様をうまく使いながらポートフォリオを作成し、Githubにあげたソースをスコア化して応募したり、スカウトをいただいたりしていたのが発端でした。\nが、近年はGithubを使ったスカウトより発信者のアカウント（Twitterやその他SNSなど）を経由して情報を収集する動きが多く見られるようになったため、Githubに注力するのは効果が薄くなってしまっている傾向を感じています。\n\nであれば、Github（Git）に力を入れるよりは、発信力を高める方法を検討していった方が良いだろう、というのでGithubの使い方を検討しています。\n\n## Githubを使わない就活・転職はプロジェクトと称するべきか？\n困った話ですが、メインとなる場所がGithubではなくなってしまう可能性が出てきたので、Github就活・転職プロジェクトという名前に違和感が生まれてしまっています。\nGithubを使ったスカウトがなければ、Githubでの就活も転職もないので、そもそもプロジェクト自体が破綻ーエンジニア転職としてそぐわないのではないか、という気がしないでもないです。\n\nこの辺りは実際にエージェントの方に聞いてみたくもありますね。\n自社サイト等で求人を出している以外に応募者を募る方法って広告以外にあるかな？という段階なので、この辺りは自分で求人を出してみたり採用側になってみてからですね…。\n\n## Github就活・転職2023\n現状は積極的にGithubを使うというより、Githubをプラットフォーム/プレゼンテーションツールとして考えて活用していく方針です。\n目的が不明瞭なので、現状で重要度が高いのは、書いたデータをなくさない・活用できるようにフォーマットを整える方ですね。\n良い情報が分かり次第シェアしていきたいと思います。\n\n## 次の記事\n- [(24日目) ](https://qiita.com/nomurasan/items/)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-14T14:12:03+09:00",
        "group": null,
        "id": "b289934728c26261ed6e",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "GitHub",
                "versions": []
            },
            {
                "name": "ポエム",
                "versions": []
            },
            {
                "name": "ノウハウ",
                "versions": []
            },
            {
                "name": "転職",
                "versions": []
            },
            {
                "name": "就活",
                "versions": []
            }
        ],
        "title": "Github就活・転職2023に向けての方針・抱負",
        "updated_at": "2022-12-23T07:05:28+09:00",
        "url": "https://qiita.com/nomurasan/items/b289934728c26261ed6e",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 1148,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<h2 data-sourcepos=\"1:1-1:12\">\n<span id=\"お詫び\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E8%A9%AB%E3%81%B3\"><i class=\"fa fa-link\"></i></a>お詫び</h2>\n<p data-sourcepos=\"2:1-4:213\">タイトルの「哲学の話」はウソになるかも知れません（現在執筆中）<br>\n本稿は哲学は専攻どころか独学もやってないど素人が、講師業というテーマで哲学っぽい表現で話します。<br>\nとはいえ、無知で哲学と表現するのはどうかな、と思ったので哲学の解説をしている方の動画をBGMに、執筆中に哲学の知識を入れながら書き進めていきます。</p>\n<h2 data-sourcepos=\"6:1-6:18\">\n<span id=\"本稿の目的\" class=\"fragment\"></span><a href=\"#%E6%9C%AC%E7%A8%BF%E3%81%AE%E7%9B%AE%E7%9A%84\"><i class=\"fa fa-link\"></i></a>本稿の目的</h2>\n<p data-sourcepos=\"7:1-7:84\">「哲学」というからには、本稿の目的を明確にしておきます。</p>\n<ul data-sourcepos=\"9:1-12:0\">\n<li data-sourcepos=\"9:1-9:107\">アウトプットをして、講師生活で得た知見を思考して自身の中で結論づけたい</li>\n<li data-sourcepos=\"10:1-10:116\">エンジニアは講師をすべきか？という命題を自分に問いかけ、自分の解を見つけ出す</li>\n<li data-sourcepos=\"11:1-12:0\">とはいえ、せっかく時間を割いて読んでくれているのだから、読者にはなんか持って帰ってほしい</li>\n</ul>\n<p data-sourcepos=\"13:1-13:154\">と、いうことで完全に読者を置いてけぼりにして勝手にべらべら喋ります。<del>哲学ってそういうものじゃないの？</del></p>\n<p data-sourcepos=\"15:1-16:78\">ところで、Qiitaにおいてポエムと哲学の違いって何なんでしょうね？<br>\nよく分からなかったんで、タグには両方いれておきます。</p>\n<h3 data-sourcepos=\"18:1-18:16\">\n<span id=\"大事な事\" class=\"fragment\"></span><a href=\"#%E5%A4%A7%E4%BA%8B%E3%81%AA%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>大事な事</h3>\n<ul data-sourcepos=\"19:1-26:0\">\n<li data-sourcepos=\"19:1-22:160\">本稿の執筆に際して公開する目的\n<ul data-sourcepos=\"20:3-22:160\">\n<li data-sourcepos=\"20:3-20:124\">業界全体としての業務改善、満足度向上が主目的であり、批判の意図は全くありません。</li>\n<li data-sourcepos=\"21:3-21:184\">スクール事業社側が今後このような観点に意識される事で増収または顧客体験の向上を見込めるかの参考になる事を期待しています。</li>\n<li data-sourcepos=\"22:3-22:160\">スクールに入所したい方が、スクールの運営を知る事でスクール選定の参考にしていただける事を期待しています。</li>\n</ul>\n</li>\n<li data-sourcepos=\"23:1-23:206\">人によっては有料級の内容である事を、情報商材アフィリエイターの観点でも正しく認識した上で無料公開しており、リスクについて承知しています。</li>\n<li data-sourcepos=\"24:1-24:164\">本稿の執筆に際して公開する情報について、NDAは既に失効しています（念の為、過去の契約書類などを確認しています）</li>\n<li data-sourcepos=\"25:1-26:0\">哲学らしく長文なのにオチはありません。許してください</li>\n</ul>\n<hr data-sourcepos=\"27:1-28:0\">\n<p data-sourcepos=\"29:1-29:36\">それでは、以下本文です。</p>\n<h2 data-sourcepos=\"31:1-31:9\">\n<span id=\"発端\" class=\"fragment\"></span><a href=\"#%E7%99%BA%E7%AB%AF\"><i class=\"fa fa-link\"></i></a>発端</h2>\n<p data-sourcepos=\"32:1-34:114\">今回のアドカレのタイトルを「俺のカレンダー2022」から「エンジニア講師カレンダー」にかえてしまおうかと思うぐらい、講師の話ばっかりしてしまっている事に気付きました。<br>\n普段の開発案件と比べると接する人が増えるため、問題が人の数だけ複雑化する関係で印象に残りやすいのかもしれません。<br>\n去年も似たような話をしたような気がしますが、今年はよりそんな実感があります。</p>\n<h2 data-sourcepos=\"36:1-36:39\">\n<span id=\"結論持つに至った自論\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E8%AB%96%E6%8C%81%E3%81%A4%E3%81%AB%E8%87%B3%E3%81%A3%E3%81%9F%E8%87%AA%E8%AB%96\"><i class=\"fa fa-link\"></i></a>結論（持つに至った自論）</h2>\n<ul data-sourcepos=\"37:1-41:0\">\n<li data-sourcepos=\"37:1-37:182\">講師とは、一時的にでもエンジニアとしては開発現場から離れるため、エンジニアリングスキル（開発）を伸ばすならやるべきでない</li>\n<li data-sourcepos=\"38:1-38:143\">講師とは、本当の意味で教育が必要とされる場（学校など）が出来ない専門教育のサポーターであるべき</li>\n<li data-sourcepos=\"39:1-41:0\">収益化を重んじる現在のITスクール事業において、プロパー講師（スタートアップメンバー）として本当に必要なスキルは「教え方のうまいエンジニア（顧客が説明した要件）」ではなく「エンジニア経験がある、スクールの事業運営に同調できるIT営業」である\n<ul data-sourcepos=\"40:3-41:0\">\n<li data-sourcepos=\"40:3-41:0\"><a href=\"https://dic.nicovideo.jp/a/%E9%A1%A7%E5%AE%A2%E3%81%8C%E6%9C%AC%E5%BD%93%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%A0%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE\" rel=\"nofollow noopener\" target=\"_blank\">顧客が本当に必要だったもの(ニコニコ大百科)</a></li>\n</ul>\n</li>\n</ul>\n<h2 data-sourcepos=\"42:1-42:141\">\n<span id=\"エンジニア向けにエンジニアリングスキル以外この例では後進育成力を意識してもらいたい理由\" class=\"fragment\"></span><a href=\"#%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E5%90%91%E3%81%91%E3%81%AB%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%83%AA%E3%83%B3%E3%82%B0%E3%82%B9%E3%82%AD%E3%83%AB%E4%BB%A5%E5%A4%96%E3%81%93%E3%81%AE%E4%BE%8B%E3%81%A7%E3%81%AF%E5%BE%8C%E9%80%B2%E8%82%B2%E6%88%90%E5%8A%9B%E3%82%92%E6%84%8F%E8%AD%98%E3%81%97%E3%81%A6%E3%82%82%E3%82%89%E3%81%84%E3%81%9F%E3%81%84%E7%90%86%E7%94%B1\"><i class=\"fa fa-link\"></i></a>エンジニア向けに、エンジニアリングスキル以外（この例では後進育成力）を意識してもらいたい理由</h2>\n<p data-sourcepos=\"43:1-43:187\">この記事はQiitaアドカレに上げる事が第一目標なので、顧客が本当に必要だったもの（IT営業）ではなくエンジニアに向けて書き進めます。</p>\n<p data-sourcepos=\"45:1-46:318\">元々は、きちんとしたポートフォリオとしてサイトを使うなら、個人でサイトを作るより集客力の高いサイトでコンテンツを書いて、類似したものや利用規約的に沿わないコンテンツをポートフォリオ側にまとめつつ、いい感じに作るのがベストだなと思っていました。<br>\nそれで、去年（正しくは一昨年かそれ以上前からで、アドベントカレンダー自体を作成するのを忘れてしまったという経緯がありました）アドベントカレンダーを書くぞ！と決めていたのがズレて今年から開始した次第だったりします。</p>\n<p data-sourcepos=\"48:1-51:297\">まぁ、こういう話はいいんですよ。これ自体に意味はありません。<br>\n今回アドカレに投稿した内容は受講生・スクールメイト向けに書いていたり、開発経験があったりなかったり読者の幅を広げつつ色々な知見をお話していたわけですが、その全てに講師になりたい・興味がある方向けにお話している小話があります。<br>\nこれは「エンジニアも開発スキル以外に目を向けたほうがいいと思っているけど、何を学べばよいか分からない」方向けに「講師という道もあるよ」と<del>ステマ</del>提案するものでもありました。<br>\n（これは環境故と思いますが、独学で実力をつけて来られた方とメンターに師事した方では講師業への考え方が異なるため、あまり有効な方法だとは感じていませんが、やらないよりはやった方が良いと判断しています）</p>\n<p data-sourcepos=\"53:1-54:117\">なお、元エンジニアのIT営業さんは思っている以上に多いです。講師業がある程度固まったら開発やりながらIT営業もやる、みたいな事ができたらいいなぁなんて思ってます。<br>\n（スカウト・エージェント各位におかれましては、平素よりお世話になっております）</p>\n<h2 data-sourcepos=\"56:1-56:75\">\n<span id=\"エンジニアを目指す以上高度技術を身につけたい\" class=\"fragment\"></span><a href=\"#%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%82%92%E7%9B%AE%E6%8C%87%E3%81%99%E4%BB%A5%E4%B8%8A%E9%AB%98%E5%BA%A6%E6%8A%80%E8%A1%93%E3%82%92%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%91%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>エンジニアを目指す以上、高度技術を身につけたい！</h2>\n<p data-sourcepos=\"57:1-61:168\">ですよね？<br>\n本稿どころかこのアドカレ自体も、ましてやSNSなんてやってないのでロクに宣伝もしてないですし、知人にすら「読んで」なんて案内も出していません。<br>\nそもそもこんな時期にQiitaの、このタイトルを読みたい方なんてタイトルの内容にガチで興味ある方かうっすらとでも転職を考えている方ぐらいだと思ってます。<br>\nなので、高度技術を求める熱意は本稿の読者なら当然持っている前提でお話を進めます。<br>\n「エンジニアには今も興味なくて、給与を上げたいから仕方なくエンジニアスキル磨いてる」という方も本稿では含みます。</p>\n<p data-sourcepos=\"63:1-63:258\">何が言いたいかというと、都合よく意識高くなる系の人間がエンジニアリングスキル以外の話をしますよ、という記事である事を認識していただくと誤解が解きやすくなるかなと思いました。</p>\n<h3 data-sourcepos=\"65:1-65:190\">\n<span id=\"エンジニアの業務姿勢は理路整然な正しさに勝るものはないが講師の業務姿勢は曖昧さを残してでも受講生の認知度を優先する事がある\" class=\"fragment\"></span><a href=\"#%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E6%A5%AD%E5%8B%99%E5%A7%BF%E5%8B%A2%E3%81%AF%E7%90%86%E8%B7%AF%E6%95%B4%E7%84%B6%E3%81%AA%E6%AD%A3%E3%81%97%E3%81%95%E3%81%AB%E5%8B%9D%E3%82%8B%E3%82%82%E3%81%AE%E3%81%AF%E3%81%AA%E3%81%84%E3%81%8C%E8%AC%9B%E5%B8%AB%E3%81%AE%E6%A5%AD%E5%8B%99%E5%A7%BF%E5%8B%A2%E3%81%AF%E6%9B%96%E6%98%A7%E3%81%95%E3%82%92%E6%AE%8B%E3%81%97%E3%81%A6%E3%81%A7%E3%82%82%E5%8F%97%E8%AC%9B%E7%94%9F%E3%81%AE%E8%AA%8D%E7%9F%A5%E5%BA%A6%E3%82%92%E5%84%AA%E5%85%88%E3%81%99%E3%82%8B%E4%BA%8B%E3%81%8C%E3%81%82%E3%82%8B\"><i class=\"fa fa-link\"></i></a>エンジニアの業務姿勢は理路整然な正しさに勝るものはないが、講師の業務姿勢は曖昧さを残してでも受講生の認知度を優先する事がある</h3>\n<p data-sourcepos=\"66:1-68:54\">やや運用保守・インフラ畑っぽい事を言いましたが、ここで言及したいのは「人に教える時に曖昧さを許容する」という事です。<br>\nこの辺りの対コミュニケーションではよくある話です。「話の流れを読む」という事ができれば、説明する時に省略して伝える事は多いと思います。<br>\n無理やりコードにしてイメージすると、</p>\n<div class=\"code-frame\" data-lang=\"Javascript\" data-sourcepos=\"70:1-120:3\"><div class=\"highlight\"><pre><code><span class=\"cm\">/** 運用ルール\n * 1. このプロジェクトのオブジェクトは、毎日朝礼会議があり全オブジェクトに下記ルールで運用します。\n * 2. 弊社の朝礼は、cronで言うと`0 9 * * 1-5`（平日毎朝9時）です\n * 3. 出社については完全フレックスタイム制なので朝礼に参加していないメンバーがいるかもしれません\n * 4. 出社したらタイムカードを押して自身をオブジェクト生成できます。\n * 5. 誰が何時に出社したかを知る事はできません。\n * 6. 朝礼に参加したオブジェクトはPM_userからmeeting_copy()したとみなされます。\n * 7. 全てのオブジェクトはtalkメソッドを使えます\n * 8. 朝礼に出ていない事で知らない事もあると思いますので、知らない事（変数）はエラーではなく聞いてください（対話しているオブジェクトからもらう）\n * 9. PM_userが朝礼に参加できない場合は、他の方が代理でPM_userになって朝礼を進めてください\n**/</span>\n\n<span class=\"c1\">// 記事化すると口頭フォローができないのでルールを細かく書きましたが、要は普通に出社してミーティングに参加したら最新情報共有されるよね？っていうイメージです。</span>\n<span class=\"c1\">// これ以上は疲れたので勘弁</span>\n\n<span class=\"c1\">// 朝礼</span>\n<span class=\"nf\">meeting_copy</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"cm\">/**\n     * 1. このメソッドは時間経過でのみ実行する事ができます。\n     * 2. meeting_copy()を実行したオブジェクトのAモジュールのバグ = バージョンを上げたら動かなくなった件　を初期値とします\n     * 3. 現実には会議に参加したぐらいで他の人の作業内容まで完璧に理解できませんが、ここは全員優秀だと仮定します\n    **/</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 話に辻褄を合わせたいので、早く来たユーザーを暫定PM_userにしておきます。実務では本物のPM_userが遅れる場合は必ず連絡しましょう。</span>\n<span class=\"kd\">var</span> <span class=\"nx\">PM_user</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">request_user</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">response_user</span>\n\n<span class=\"c1\">// 朝礼会議</span>\n\n<span class=\"nx\">request_user</span> <span class=\"o\">=</span> <span class=\"nx\">PM_user</span><span class=\"p\">.</span><span class=\"nf\">meeting_copy</span><span class=\"p\">();</span>\n<span class=\"nx\">response_user</span> <span class=\"o\">=</span> <span class=\"nx\">PM_user</span><span class=\"p\">.</span><span class=\"nf\">meeting_copy</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// 業務開始</span>\n<span class=\"nx\">response_user</span><span class=\"p\">.</span><span class=\"nx\">Aモジュールのバグ</span> <span class=\"o\">+=</span> <span class=\"dl\">\"</span><span class=\"s2\">の修正後のPRで別人に指摘された件</span><span class=\"dl\">\"</span>\n\n<span class=\"nx\">request_user</span><span class=\"p\">.</span><span class=\"nf\">talk</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">{(request_user.)Aモジュールのバグ}って取れたんだっけ？</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// request_user.Aモジュールのバグ = バージョンを上げたら動かなくなった件</span>\n\n<span class=\"nx\">response_user</span><span class=\"p\">.</span><span class=\"nf\">talk</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">{(response_user.)Aモジュールのバグ}ですか？ まだ終わってないです</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// Aモジュールのバグ = request_user.Aモジュールのバグの修正後のPRで別人に指摘された件</span>\n\n<span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nf\">talk</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">(注：暗黙的な{Aモジュールのバグ})終わるのに時間掛かりそう？</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// 他に任せたいモジュールあるんだけど、作業振って大丈夫かな</span>\n\n<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nf\">talk</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">(後述コメント内)たぶん大丈夫だと思いますよ。</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// (注：暗黙的な{Aモジュールのバグ})のPRレビューで言われたところは直したし、レビュー漏れがなければ〜</span>\n\n</code></pre></div></div>\n<p data-sourcepos=\"122:1-125:237\">ここでポイントになるのが、<code>Aモジュールのバグ</code>という同じ表現で違う事を指している（＝新卒研修時に「こういう現象が起こるのが多態性だよ、って説明すると結構ウケが良かったのと、筆記試験などで多態性の説明時にすごく印象に残っていて点が取れた、とのお声も多かったです）のに、一見して問題なさそうな終わり方をしています。<br>\n今回はどちらも<code>Aモジュールのバグ</code>を共通認識が取れていて、粒度こそ違えど目的が同じなので問題になりにくいものです。<br>\nおそらく、ほぼほぼこんな感じのコミュニケーションをしていると思います。<br>\nこれがプログラムだと、<code>Aモジュールのバグ</code>なんて変数名ではなく、変数展開してきちんと<code>バージョンを上げたら動かなくなった件</code>とか<code>バグ修正後のPR指摘の件</code>といいます。</p>\n<p data-sourcepos=\"127:1-130:141\">新規開発とか、機能追加だったらこのレベルでも問題になりにくいんですが、運用中のシステムでデグレなどを起こした場合はこんなコミュニケーション（変数名パターン）をしていたら大惨事になる（修正して本番デプロイが完了したのに同様の問題が再発する）可能性があります。<br>\nresponse側は多少くどいかな？と感じても、認識が合っているか確認するために、敢えて変数展開してrequest側に結果を返してあげてください。<br>\nこういったエンジニア間のコミュニケーションが発生する場合は、<strong>聞かれた側が重要なキーワードだと思った部分を変数展開して聞いた側に返してあげる</strong>ように意識するとコミュニケーションエラーがないか相互確認できます。<br>\n無理やりな例ですが、こういった厳格さのようなものを、ここでは「理路整然な正しさ」と定義します。</p>\n<p data-sourcepos=\"132:1-132:171\">たとえば講師として指導している場であれば、講義時間が無限に使えたり、比較的余力のある状態で講習を進行できるのが理想</p>\n<h4 data-sourcepos=\"134:1-134:83\">\n<span id=\"議題に上げたい話とは無関係な会話内容の圧縮テクニック\" class=\"fragment\"></span><a href=\"#%E8%AD%B0%E9%A1%8C%E3%81%AB%E4%B8%8A%E3%81%92%E3%81%9F%E3%81%84%E8%A9%B1%E3%81%A8%E3%81%AF%E7%84%A1%E9%96%A2%E4%BF%82%E3%81%AA%E4%BC%9A%E8%A9%B1%E5%86%85%E5%AE%B9%E3%81%AE%E5%9C%A7%E7%B8%AE%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF\"><i class=\"fa fa-link\"></i></a>議題に上げたい話とは無関係な会話内容の圧縮テクニック</h4>\n<p data-sourcepos=\"135:1-137:249\">今回は解説用に最低限しか書いていないので、これ以上まとめるのは難しいです。<br>\nが、実際はもっと長い文章でのコミュニケーションになる事が多いはずです。<br>\n内容や説明が難しいと感じるもの、たとえば３文以上会話をする必要がありそうだなと感じたら、最初に質問への回答をY/N形式か、結論から言ってくれると、聞いた側が楽になります。</p>\n<p data-sourcepos=\"139:1-139:150\">また、会話時間そのものを短くする事で、その時間分を聞いた・聞かれた人の他の時間に充てる事ができます。</p>\n<p data-sourcepos=\"142:1-144:186\">ここでは「会話」としましたが「講義」にすると、その効果は莫大です。<br>\nただし、聴衆の理解度を担保できていない状態で時間を作って聴衆にアクションを起こしてもらおうとすると、聴衆が何をどうすれば良いか分からず（考え、求められず）学習効果が薄まるリスクがあります。<br>\nなお、自分で考えるべき内容と、解説・指導して導くのが望ましい内容と、どちらが良いのかは会場や聴衆のスキルとも相談しましょう。</p>\n<h2 data-sourcepos=\"146:1-146:72\">\n<span id=\"本題対入門中エンジニア向けコミュニケーション\" class=\"fragment\"></span><a href=\"#%E6%9C%AC%E9%A1%8C%E5%AF%BE%E5%85%A5%E9%96%80%E4%B8%AD%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E5%90%91%E3%81%91%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\"><i class=\"fa fa-link\"></i></a>本題：対入門中エンジニア向けコミュニケーション</h2>\n<p data-sourcepos=\"147:1-147:126\">「入門中の方向けコミュニケーション」というのが一番言葉の定義が曖昧だと思っています。</p>\n<ul data-sourcepos=\"149:1-151:0\">\n<li data-sourcepos=\"149:1-149:249\">非エンジニアならなるべくIT用語を使わないようにするか、IT用語は使うけど身近な例に例えてどういうものか説明しながらプロジェクトを推進・調整していくことになると思います。</li>\n<li data-sourcepos=\"150:1-151:0\">エンジニア同士のコミュニケーションは、非エンジニア向けに言えばプロ棋士（将棋・囲碁など）が会話だけで対局・感想戦をしているようなものだと思ってください。</li>\n</ul>\n<p data-sourcepos=\"152:1-155:108\">実際のエンジニアは、そもそも話している内容が通常の将棋なのかどうぶつ将棋なのか、はたまた中将棋や大将棋なのか、どの将棋の話してます？ と確認しあいながらやっています。<br>\n一般的にいう将棋だったとして、平手なのか駒落ちなのかによっても異なります。<br>\n囲碁で言えば、9路盤か13路盤か19路盤なのか、置石はあるのか、などですね。<br>\nマニアックな話をすると、定跡が大きく違うので少し変わるだけでも別物です。</p>\n<p data-sourcepos=\"157:1-160:261\">麻雀もですかね、符計算や牌効率も考えるぐらいには嗜んでいますが戦術面については多面張とリーチ筋騙しのシャボ待ちトイトイ地雷ぐらいしか知らないのであまり詳しくないです。<br>\n彼らは戦術考察の際に必ず手牌と捨て牌、ドラや何順目（あと何回ツモれるか？）を確認しているはずです。<br>\n麻雀のアガりが分かる方なら、手牌<code>33345</code>の3,6両面待ちより<code>45</code>の3,6両面待ちの方がアガる確率は高いよね、という意味が理解できるかなと思います。<br>\n同様に、<code>23445</code>の3,6両面待ちも<code>45</code>の3,6両面待ちよりアガる確率は低くなりますが、うまく決まれば（3でアガれば）１飜増えるからトータルではこっちの方がいい事が多いよね、みたいな話です。</p>\n<p data-sourcepos=\"162:1-162:171\">おそらく、こういった「アレの話ね」で通じる関係性かどうかで話し方も変わりますよね？っていう事がここでのテーマです。</p>\n<h3 data-sourcepos=\"164:1-164:22\">\n<span id=\"問題の再認識\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C%E3%81%AE%E5%86%8D%E8%AA%8D%E8%AD%98\"><i class=\"fa fa-link\"></i></a>問題の再認識</h3>\n<div class=\"code-frame\" data-lang=\"Javascript\" data-sourcepos=\"165:1-206:3\"><div class=\"highlight\"><pre><code><span class=\"cm\">/**\n * 疲れたので前提条件とか準備とか略\n**/</span>\n\n<span class=\"nx\">teacher</span><span class=\"p\">.</span><span class=\"nf\">talk</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">変数とは、物を入れられる箱です</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// teacher.expected_var = \"箱\"; 　を実行</span>\n\n<span class=\"nx\">studentA</span><span class=\"p\">.</span><span class=\"nf\">think</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">箱…？よく分からんけど、とりあえず言われた通りにしよう</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// studentA.box = \"はこ\"</span>\n\n<span class=\"nx\">studentBB</span><span class=\"p\">.</span><span class=\"nf\">think</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">箱…？どんな大きさでもええんか🤔</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// studentBB.box = \"引っ越し段ボール大\"</span>\n\n<span class=\"nx\">studentCCC</span><span class=\"p\">.</span><span class=\"nf\">think</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">🤔物ってなんや…？　とりあえず魚運べそうなやつにするか</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// studentCCC.box = \"長方形の発泡スチロール\"</span>\n\n<span class=\"nx\">studentDDDD</span><span class=\"p\">.</span><span class=\"nf\">think</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">よく分からんけど物を入れられる箱、りょーかい</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// studentDDDD.teacher_message = \"物を入れられる箱\";　 なおboxはnull</span>\n\n<span class=\"c1\">//　〜〜〜</span>\n\n<span class=\"nx\">teacher</span><span class=\"p\">.</span><span class=\"nf\">talk</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">作った箱の中に物を入れる事を代入といいます。</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// teacher.expected_var = [\"物\"];  ← 「代入のイメージ」の説明イメージ</span>\n\n<span class=\"nx\">studentA</span><span class=\"p\">.</span><span class=\"nf\">think</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">箱の中に物を入れるのが代入？…つまり？</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// studentA.box = \"は物こ\";  これが代入</span>\n\n<span class=\"nx\">studentBB</span><span class=\"p\">.</span><span class=\"nf\">think</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">箱に入れるって事は、まだ入れられる可能性あるよね</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// studentBB.box = \"引っ越し段ボール大     (以降、空白スペース)\"</span>\n<span class=\"c1\">// 代入自体に備えており、作業をしている感覚で話を理解している途中</span>\n\n<span class=\"nx\">studentCCC</span><span class=\"p\">.</span><span class=\"nf\">think</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">釣った魚を漁獲すればええんかな</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// ノートへの書き取りミスなどで、このように理解した</span>\n<span class=\"c1\">// studentCCC.things = \"魚\"</span>\n<span class=\"c1\">// studentCCC.keyword = \"代入\"</span>\n<span class=\"c1\">// studentCCC.image = \"発泡　（魚）　スチロール\"</span>\n\n<span class=\"nx\">studentDDDD</span><span class=\"p\">.</span><span class=\"nf\">think</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">よく分からんけど、箱の中に物を入れたら代入やな！</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// studentDDDD.teacher_message = \"物\"  「物を入れられる箱」が入っている時に\"物\"を入れる＝上書きすることを代入</span>\n\n</code></pre></div></div>\n<p data-sourcepos=\"208:1-210:114\">講師の発言を受けて考えられる理解の仕方を、変数と代入を使ってイメージとして書き起こしました。<br>\n説明を受けて色々なイメージをして、なぜだかめちゃくちゃな事をやっているように見えれば私が伝えたかった意図としてはきちんと伝わっているので大丈夫だと思います。<br>\n座学一回やって説明したぐらいだと、聴衆の理解度はこういうものだったりします。</p>\n<p data-sourcepos=\"212:1-212:117\">こうならないために、図解したり（テキストを配布）実際のコードを書いてみたりして</p>\n<ul data-sourcepos=\"214:1-217:0\">\n<li data-sourcepos=\"214:1-214:47\">最初説明を聞いて理解した内容と</li>\n<li data-sourcepos=\"215:1-215:65\">実際に見聞きあるいは実行して理解した内容と</li>\n<li data-sourcepos=\"216:1-217:0\">差・食い違いは何か見つけて、単元を超えて自分の理解が根本的に間違っていないか</li>\n</ul>\n<p data-sourcepos=\"218:1-218:66\">を確認しながら学習を進めていく事になります。</p>\n<h4 data-sourcepos=\"220:1-220:104\">\n<span id=\"こんな裏技あったら人生楽なのかつまらないと考えるのかは人それぞれ\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%82%93%E3%81%AA%E8%A3%8F%E6%8A%80%E3%81%82%E3%81%A3%E3%81%9F%E3%82%89%E4%BA%BA%E7%94%9F%E6%A5%BD%E3%81%AA%E3%81%AE%E3%81%8B%E3%81%A4%E3%81%BE%E3%82%89%E3%81%AA%E3%81%84%E3%81%A8%E8%80%83%E3%81%88%E3%82%8B%E3%81%AE%E3%81%8B%E3%81%AF%E4%BA%BA%E3%81%9D%E3%82%8C%E3%81%9E%E3%82%8C\"><i class=\"fa fa-link\"></i></a>こんな裏技あったら人生楽なのか、つまらないと考えるのかは人それぞれ</h4>\n<p data-sourcepos=\"221:1-222:256\">この問題は<code>teacher</code>と<code>student</code>が同じ<code>Human</code>クラスで、<code>Human.(static)var</code>に\"箱\"と入れられれば、誰に聞いても同じ答えが返ってくるようになります。<br>\n同様に、<code>teacher</code>クラスから<code>student</code>クラスを拡張で作れたら（日本語で子クラスとも言うため）teacherが最初から間違っていたり、後で勘違いしてvarを書き換えない限りは問題を解消できます。</p>\n<p data-sourcepos=\"224:1-226:111\">つまり講師の知識を最初から受講者が活かせればこんなに苦労する事はないんですが、現実的にそうなってないです。<br>\nただし、解釈の仕方によっては講義の場や時間を<code>teacher</code>変数にあるオブジェクトから<code>student</code>変数（配列でもいいです）へ一つ一つハードコピーをしようとしている時間とも言えなくはないです。<br>\n（今思ったんですが、これは値渡しと参照渡しの説明の例としても使えそうです）</p>\n<p data-sourcepos=\"228:1-230:132\">このように、人間から人間への知識のコピーは決して簡単ではありません。<br>\nもしかしたら、普段何気なく使っている[Ctrl(Command)] + [C]やcopyメソッドはとても大変な思いをして精度100%のコピーを作っているかも知れませんよ？<br>\nましてや、[Ctrl(Command)] + [Z]のアンドゥ・リドゥなんて神業ですね。現実世界でもほしい機能です。</p>\n<h2 data-sourcepos=\"232:1-232:92\">\n<span id=\"営利主義のitスクールの運営はなぜエンジニア講師に合わないのか\" class=\"fragment\"></span><a href=\"#%E5%96%B6%E5%88%A9%E4%B8%BB%E7%BE%A9%E3%81%AEit%E3%82%B9%E3%82%AF%E3%83%BC%E3%83%AB%E3%81%AE%E9%81%8B%E5%96%B6%E3%81%AF%E3%81%AA%E3%81%9C%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E8%AC%9B%E5%B8%AB%E3%81%AB%E5%90%88%E3%82%8F%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>営利主義のITスクールの運営はなぜエンジニア講師に合わないのか</h2>\n<p data-sourcepos=\"233:1-236:90\">そもそもの教育哲学が違うからです。<br>\nエンジニア講師をやっていて困りがちなシチュエーションと言えば、運営がやっている拝金主義にしか見えない教育システムや運営体制が気に入らないとか、受講者から講師にされても困るクレーム（講座量が高すぎる、教材がわかりにくい等）の窓口にされている、講師間でのコミュニケーションを認めない（これは引き抜き防止のためです）などで苦労をされている方なんじゃないかと思います。<br>\nつまり経験者の方が抱く不満にありがちなものですね。<br>\nこれは、法人向け新卒研修でも個人のスクールでも起こり得ます。</p>\n<p data-sourcepos=\"238:1-240:120\">大体の講師はフリーランスだと思いますし、私もフリーランスなんですが、敢えて誤解を恐れずに言いたい事を言わせていただくと、会社の方針に従えないなら自分でスクール事業を立ち上げてやってください。<br>\nどれだけ会社の方針が間違っていると思っても、会社に属している限りは会社の人間であるように振る舞うのは当然（フリーランスの立場で言えば仕方のない事）です。<br>\n三国志的に言えば、袁紹と田豊の関係を当時でも現代でもやって良い事は何もないです。</p>\n<p data-sourcepos=\"242:1-243:63\">ただし、現場意識としては何とかして講師をサポートしたいと考えてくれる方は多いので、そこだけは間違えて欲しくないです。<br>\n彼らにも立場があり、本音と建前は違います。</p>\n<h2 data-sourcepos=\"245:1-245:60\">\n<span id=\"受講生の満足度という謎パラメーター\" class=\"fragment\"></span><a href=\"#%E5%8F%97%E8%AC%9B%E7%94%9F%E3%81%AE%E6%BA%80%E8%B6%B3%E5%BA%A6%E3%81%A8%E3%81%84%E3%81%86%E8%AC%8E%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%83%BC\"><i class=\"fa fa-link\"></i></a>「受講生の満足度」という謎パラメーター</h2>\n<p data-sourcepos=\"246:1-246:114\">受講生をディスる意図は全くありませんが、そのようにしか思えないお話をします。</p>\n<p data-sourcepos=\"248:1-250:60\">スクール事業として見ると、受講生も講師も替えが利く存在です。<br>\nだとしたら、お金をくれる受講生とお金を持っていく講師のどちらを大事にしますか？というお話です。<br>\nこれの答えは言わなくても分かりますよね？</p>\n<p data-sourcepos=\"252:1-254:90\">そのため、講師が自身の査定や評価を受けるために、講義風景を録画し提出したり、あるいはクライアントなり担当者が潜伏調査のために入室する事もあります。（なお、受講生に同意を取る場合は「講義の品質向上のため」と説明して同意を得ます）<br>\n繊細な未経験講師（エンジニア）なら実情を知ったら胃が痛くなったり憂鬱になりかねません。<br>\n（従業員を監視しても生産性が上がらない話に似ていませんか？）</p>\n<p data-sourcepos=\"256:1-260:39\">色々書いてますが、最も正しそうなデータは受講生に直接アンケートを取るのが一番です。<br>\n多いのは一ヶ月毎など区切りを決めている場合でしょうか。<br>\n今まであった面白かったケースとしては、受講生の質問を受けるたびにアンケートを書いてもらったなんて事もありました。これは受講生も質問＝アンケートの手間があったから逆に面倒だったんじゃないかなぁ、なんて思ってます。<br>\n裏を返すと、嫌いな講師を質問攻めして低評価を送りまくれば簡単に左遷・解雇できるので、受講生コミュニティもあったし犠牲者もいるんじゃないかと思います。<br>\nこの制度のすごいところは、</p>\n<ul data-sourcepos=\"262:1-264:0\">\n<li data-sourcepos=\"262:1-262:44\">運営が気に入らない講師がいる</li>\n<li data-sourcepos=\"263:1-264:0\">色々な事情で簡単に契約を終了させることができない</li>\n</ul>\n<p data-sourcepos=\"265:1-265:117\">というケースでも正当な理由（受講生から嫌われている）で簡単に解雇できる事です。</p>\n<ol data-sourcepos=\"267:1-271:0\">\n<li data-sourcepos=\"267:1-267:54\">運営の人間を受講生として参画させる</li>\n<li data-sourcepos=\"268:1-268:90\">過去の受講生の質問からテンプレートを使って講師に質問をする</li>\n<li data-sourcepos=\"269:1-269:51\">回答がどうであれ、悪い評価を送る</li>\n<li data-sourcepos=\"270:1-271:0\">ある程度評価を溜める</li>\n</ol>\n<p data-sourcepos=\"272:1-273:84\">追跡調査や解雇した講師からの言及が怖くなければ、実態はともかく評価を非公開にすれば中身をでっち上げて解雇してもバレないです。<br>\n運営にとって、対講師の切り札が「受講生満足度」なのです。</p>\n<p data-sourcepos=\"275:1-276:183\">「受講生満足度」を運用する場合は、まず真っ先に講師と運営が連携して改善点や、どうしてこのような評価をされたのかヒアリング・相談を行うはずです。<br>\nその上で、低評価をつけた受講生（またはこの傾向が見られる方）に向けてより良い学習体験を提供するために対策を講じるはずです。</p>\n<h2 data-sourcepos=\"278:1-278:126\">\n<span id=\"講師案件を安定的にこなし獲得するためにはフリーランスでも社内政治は出来た方が良い\" class=\"fragment\"></span><a href=\"#%E8%AC%9B%E5%B8%AB%E6%A1%88%E4%BB%B6%E3%82%92%E5%AE%89%E5%AE%9A%E7%9A%84%E3%81%AB%E3%81%93%E3%81%AA%E3%81%97%E7%8D%B2%E5%BE%97%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AB%E3%81%AF%E3%83%95%E3%83%AA%E3%83%BC%E3%83%A9%E3%83%B3%E3%82%B9%E3%81%A7%E3%82%82%E7%A4%BE%E5%86%85%E6%94%BF%E6%B2%BB%E3%81%AF%E5%87%BA%E6%9D%A5%E3%81%9F%E6%96%B9%E3%81%8C%E8%89%AF%E3%81%84\"><i class=\"fa fa-link\"></i></a>講師案件を安定的にこなし、獲得するためにはフリーランスでも社内政治は出来た方が良い</h2>\n<p data-sourcepos=\"279:1-280:54\">何のためにフリーランスをやっているか分からない話をします。<br>\n残念ながら本件は実体験に基づきます。</p>\n<p data-sourcepos=\"282:1-284:150\">私の経歴をご存じの方は、大手も数社渡り歩いてきた経験（うち、社内コンサル含）があるので社内政治力もご評価いただけるかと思います。<br>\nで、こういったスクール事業社でも社内政治ができる場合は居心地の良い環境づくりのためにステークホルダーを探したり、組織体制を抑えたりプロダクトリードやったりする（元々の目的としては、報酬の未払いが起こった時に直接やり取りできる窓口を複数持っておく事で、有事の際に連絡が取れなくなったり、話を曲解される事を防ぐため）んですが、パッケージ提供側として教育システムについて知っているべき内容を教育されなかったために、システムトラブルが発生した時にアナログ・マンパワーな対応を行う事が何度かありました。<br>\n大体の場合は「障害発生→暫定対応→復旧次第運用を戻す」で解決する話なので、これで終わればいい話です。</p>\n<p data-sourcepos=\"286:1-289:147\">が、運営側の内情を把握するチャンスでもあります。<br>\nこういった機会をうまくゴニョゴニョしていくと、実は使っている教育システムが薄氷の上で成立している運用である事にすぐ気付けます。<br>\n今までで多かったのは、テキスト教材の致命的な誤字・内容不備だったりテスト問題のややこしい表現の変更申請時に、すんなりと修正できる場合もあればシステムの都合で差し替えが難しいので、実施直前などに注意喚起をする方法で対応するケースです。<br>\nこれ自体はあるある（※システム屋としては、本来はあってはならない事だと思うのですが）だと思います。</p>\n<p data-sourcepos=\"291:1-293:270\">こういった問題に対して、次回または来年度施策として今回の事象、対応内容、改善案を出していくと、教育システムのコードを１行も読む事も見る事もなく理解が深まっていきます。<br>\n（ただし、システム管理者アカウントが見えている「出来る・出来ないの判断」と運用管理者アカウントが見えている「出来る・出来ないの判断」は異なるため、混同しないように留意しておきましょう）<br>\nで、システムのサポートチームと同等の予測や見解を持てるようになると、「現場講師＋システムサポートメンバー」の景色が見えてくるため、これらを使って更に他の業務内容も垣間見ていきます。</p>\n<p data-sourcepos=\"295:1-297:108\">そこでも（現状起こっていないかも知れないが）将来的に課題になりそうなお話を先にしておくと、既に実績とチーム間での信頼を得る事ができれば更に今回の業務（案件）の経緯や背景、またはクライアントとエンドの関係などが窺えたりします。<br>\n実はこれは現場で動く時にも非常に重要な情報なんですが、なぜかキックオフの時までにお話がありません。<br>\nおそらく、本来は社外秘扱いされている情報が含まれているからだと思います。</p>\n<p data-sourcepos=\"299:1-299:120\">（ちょっとヤバいニオイがしてきたので、ここからはぶった切ります。ご容赦ください）</p>\n<h2 data-sourcepos=\"301:1-301:81\">\n<span id=\"講師になりたいエンジニアが探すべき求人の裏キーワード\" class=\"fragment\"></span><a href=\"#%E8%AC%9B%E5%B8%AB%E3%81%AB%E3%81%AA%E3%82%8A%E3%81%9F%E3%81%84%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%8C%E6%8E%A2%E3%81%99%E3%81%B9%E3%81%8D%E6%B1%82%E4%BA%BA%E3%81%AE%E8%A3%8F%E3%82%AD%E3%83%BC%E3%83%AF%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>講師になりたいエンジニアが探すべき求人の裏キーワード</h2>\n<p data-sourcepos=\"302:1-304:231\">「エンジニア　講師　ニート」で求人サイトを探してみてください。<br>\nただし、求人の掲載日が古かったり同一案件を複数出していたりする可能性があるため、応募時は複数送らないように注意しましょう。<br>\nそもそも、複数送ってしまいそうな求人の出し方をするなよ、という声には同感ですが、求人サイトのシステムの都合とか色々大人のアレコレがありそうな気がしますね。</p>\n<h3 data-sourcepos=\"306:1-306:61\">\n<span id=\"snsに強いエンジニアならではのテクニック\" class=\"fragment\"></span><a href=\"#sns%E3%81%AB%E5%BC%B7%E3%81%84%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AA%E3%82%89%E3%81%A7%E3%81%AF%E3%81%AE%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF\"><i class=\"fa fa-link\"></i></a>SNSに強いエンジニアならではのテクニック</h3>\n<p data-sourcepos=\"307:1-309:222\">入るスクールは第1期生のものを探してください。<br>\nつまり、普通の方法では応募すらできないプログラミングスクールの募集を見つける事です。<br>\nそのスクールには講師の立場で入るのはまず不可能（※お察しください）なので、受講生として入ってプログラミングを学び？つつ、講師のやり方を盗みましょう。</p>\n<p data-sourcepos=\"311:1-315:264\">講師スキルを高めたいなら、コースや講師が多いスクールがおすすめですが、講師になりたいなら講師がいないスクールを選んで受講生として潜り込めば内部採用される可能性があります。<br>\nあとは、第1期生が講師になったとブランディングして社内に発信するようにしていくと、外部講師を切って内製講師を作った方が事業化できるしコストも安くなります。<br>\n穿った見方をすると外部講師から仕事を奪ったように捉えてしまいますが、外部講師と会社との取引実績を認めるかあるいはあなたが外部講師の方に指導していただいた経験をお話することで、その方の株を高める事になります。<br>\nそもそもあなたはSNSに強いはずなので、こういったアピールポイントは会社あるいは個人が許す範囲で発信する方があなたにも良い印象を持っていただく事ができます。<br>\nSNSを使っていくと「何を言ってもダメな方がいる」事は認識していると思いますので、こういった方々をケアするのか付き合わないようにするのかは、あなたのSNS戦略に合わせてご対応ください。</p>\n<h3 data-sourcepos=\"317:1-317:28\">\n<span id=\"運営を改善したい\" class=\"fragment\"></span><a href=\"#%E9%81%8B%E5%96%B6%E3%82%92%E6%94%B9%E5%96%84%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>運営を改善したい</h3>\n<p data-sourcepos=\"318:1-318:102\">その会社は諦めて、あなたを中心とした組織を立てて事業化してください。</p>\n<p data-sourcepos=\"320:1-324:252\">エンジニアが会社を興す時に、絶対必要なのに足りないスキルが「営業力」です。<br>\nもし営業面に自信がないなら、いったんエンジニアを３年休職してでも営業スキルを習得した方が将来的にどこでも活用できます。<br>\nエンジニアだけど営業修行がしたいです、と言ってくる応募者は間違いなく採用担当者に刺さります。<br>\n長期的に活躍できる人材しか求めていない会社なら採用される事はないですが、これはあなたが悪いのではなくタイミングが悪いので落ち込む必要はありません。<br>\n独立の機運が高い会社だな、と思ったらどんどん書類を出していけば、未経験者が普通に就活・転職するより高い確率で採用されると思いますよ。（私なら採用してみたい側の人間です）</p>\n<p data-sourcepos=\"326:1-326:126\">と、運営を改善したいと常々考えている人間が自分の話を他人事のように語っておきました。</p>\n<h2 data-sourcepos=\"328:1-328:81\">\n<span id=\"新卒カードをなくした場合でも使える研修のある案件とは\" class=\"fragment\"></span><a href=\"#%E6%96%B0%E5%8D%92%E3%82%AB%E3%83%BC%E3%83%89%E3%82%92%E3%81%AA%E3%81%8F%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%A7%E3%82%82%E4%BD%BF%E3%81%88%E3%82%8B%E7%A0%94%E4%BF%AE%E3%81%AE%E3%81%82%E3%82%8B%E6%A1%88%E4%BB%B6%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>新卒カードをなくした場合でも使える研修のある案件とは</h2>\n<p data-sourcepos=\"329:1-333:183\">タイトルだけ鵜呑みにすると、メリットしかないお話だと思いますが、ちょっと待ってください！<br>\nこれは罠の可能性に注意してください。<br>\nというのも、ひとくちに研修と言っても、企業が雇用して研修するタイプ（無料・給与別）ではなく、派遣登録して研修サービスが受けられる（有料）というのが正しいです。<br>\nまた、派遣で無料の研修があったとしても、短期間参加するだけのいわゆる勉強会を研修と定義している事もあります。<br>\n今回は、プログラミング未経験で新卒カードがない方が無料で研修を受ける方法を考えたいので、勉強会を研修とするのは難しいです。</p>\n<h3 data-sourcepos=\"335:1-335:91\">\n<span id=\"社員正社員契約派遣アルバイトパートが使える裏技\" class=\"fragment\"></span><a href=\"#%E7%A4%BE%E5%93%A1%E6%AD%A3%E7%A4%BE%E5%93%A1%E5%A5%91%E7%B4%84%E6%B4%BE%E9%81%A3%E3%82%A2%E3%83%AB%E3%83%90%E3%82%A4%E3%83%88%E3%83%91%E3%83%BC%E3%83%88%E3%81%8C%E4%BD%BF%E3%81%88%E3%82%8B%E8%A3%8F%E6%8A%80\"><i class=\"fa fa-link\"></i></a>社員（正社員・契約・派遣・アルバイト・パート）が使える裏技</h3>\n<p data-sourcepos=\"336:1-339:132\">ここの要件は失業保険の対象者であることです。<br>\nつまり、社保を持っていて半年以上連続的に働いており、開業届を出していない方が該当する事が多いので、対象者はかなり広がります。<br>\nなお、自営業の場合は、この方法を使う場合は事前に廃業届けを出しておいてください。<br>\n（アルバイトと自営業を兼務している場合、アルバイトをやめても失業扱いにならないようです）</p>\n<p data-sourcepos=\"341:1-343:246\">失業給付期間中に条件を満たす職業訓練校に通うのが一番です。<br>\nお金（失業給付金）をもらいながらITの専門学校１回生相当の内容で実務よりの勉強が体験できます。<br>\n独学でプログラミングの勉強をしていた方にとっては、無料でチーム開発を体験できる機会にもなるので、機会があれば（ない方がいいかも？）参加も一考の余地があると思います。</p>\n<h2 data-sourcepos=\"345:1-345:9\">\n<span id=\"所感\" class=\"fragment\"></span><a href=\"#%E6%89%80%E6%84%9F\"><i class=\"fa fa-link\"></i></a>所感</h2>\n<p data-sourcepos=\"346:1-348:198\">本稿で一番時間がかかったのが運用ルールの漏れ抜けを塞ぐことだったので、登壇して解説した方が早いと思う気持ちに溢れてつらかったです。<br>\nこれアフィリエイトで記事書いていたら一番最後におすすめのエージェントをランキング形式で紹介して広告とか貼りたいですね。<br>\n残念ながらアフィリエイト記事でもなければ、自分のページに誘導するためのサテライトでもないのでエージェントはご自身で見極めてください。</p>\n<h3 data-sourcepos=\"350:1-350:31\">\n<span id=\"お詫び２所感２\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E8%A9%AB%E3%81%B3%EF%BC%92%E6%89%80%E6%84%9F%EF%BC%92\"><i class=\"fa fa-link\"></i></a>お詫び２（所感２）</h3>\n<p data-sourcepos=\"351:1-356:66\">遅れてすみませんでした、<br>\nこの記事は14日に「記事を書く」ボタンを押して、思った以上に難産した結果、15日本日現在に投稿する運びになってしまいました。<br>\n普段講師の話を真面目に語らないので、気持ち的にはスッキリしています。<br>\nあと、所感でも書いたんですが運用ルールの漏れ抜けについては、口頭説明で解決していた部分なのであれもダメこれもダメと条件を書き出すと結構制限だらけでしんどかったです。<br>\nこういう事を経験すると、文章（メールなりチャットなり）で伝えるより電話一本で済ませたくなるおぢさんの気持ちになります。<br>\n都合のいいところだけ切り取って使いたいです。</p>\n<h2 data-sourcepos=\"358:1-358:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"359:1-360:88\">\n<li data-sourcepos=\"359:1-359:169\"><a href=\"https://qiita.com/nomurasan/items/7b95c71e78a96ad1af27\" id=\"reference-a5f5eeb359e41cd30847\">(15日目：ブラウザでVSCodeが使えるらしいgithub.devとかGitHub Codespacesを検証してみた)</a></li>\n<li data-sourcepos=\"360:1-360:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n",
        "body": "## お詫び\nタイトルの「哲学の話」はウソになるかも知れません（現在執筆中）\n本稿は哲学は専攻どころか独学もやってないど素人が、講師業というテーマで哲学っぽい表現で話します。\nとはいえ、無知で哲学と表現するのはどうかな、と思ったので哲学の解説をしている方の動画をBGMに、執筆中に哲学の知識を入れながら書き進めていきます。\n\n## 本稿の目的\n「哲学」というからには、本稿の目的を明確にしておきます。\n\n- アウトプットをして、講師生活で得た知見を思考して自身の中で結論づけたい\n- エンジニアは講師をすべきか？という命題を自分に問いかけ、自分の解を見つけ出す\n- とはいえ、せっかく時間を割いて読んでくれているのだから、読者にはなんか持って帰ってほしい\n\nと、いうことで完全に読者を置いてけぼりにして勝手にべらべら喋ります。~~哲学ってそういうものじゃないの？~~\n\nところで、Qiitaにおいてポエムと哲学の違いって何なんでしょうね？\nよく分からなかったんで、タグには両方いれておきます。\n\n### 大事な事\n- 本稿の執筆に際して公開する目的\n  - 業界全体としての業務改善、満足度向上が主目的であり、批判の意図は全くありません。\n  - スクール事業社側が今後このような観点に意識される事で増収または顧客体験の向上を見込めるかの参考になる事を期待しています。\n  - スクールに入所したい方が、スクールの運営を知る事でスクール選定の参考にしていただける事を期待しています。\n- 人によっては有料級の内容である事を、情報商材アフィリエイターの観点でも正しく認識した上で無料公開しており、リスクについて承知しています。\n- 本稿の執筆に際して公開する情報について、NDAは既に失効しています（念の為、過去の契約書類などを確認しています）\n- 哲学らしく長文なのにオチはありません。許してください\n\n---\n\nそれでは、以下本文です。\n\n## 発端\n今回のアドカレのタイトルを「俺のカレンダー2022」から「エンジニア講師カレンダー」にかえてしまおうかと思うぐらい、講師の話ばっかりしてしまっている事に気付きました。\n普段の開発案件と比べると接する人が増えるため、問題が人の数だけ複雑化する関係で印象に残りやすいのかもしれません。\n去年も似たような話をしたような気がしますが、今年はよりそんな実感があります。\n\n## 結論（持つに至った自論）\n- 講師とは、一時的にでもエンジニアとしては開発現場から離れるため、エンジニアリングスキル（開発）を伸ばすならやるべきでない\n- 講師とは、本当の意味で教育が必要とされる場（学校など）が出来ない専門教育のサポーターであるべき\n- 収益化を重んじる現在のITスクール事業において、プロパー講師（スタートアップメンバー）として本当に必要なスキルは「教え方のうまいエンジニア（顧客が説明した要件）」ではなく「エンジニア経験がある、スクールの事業運営に同調できるIT営業」である\n  - [顧客が本当に必要だったもの(ニコニコ大百科)](https://dic.nicovideo.jp/a/%E9%A1%A7%E5%AE%A2%E3%81%8C%E6%9C%AC%E5%BD%93%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%A0%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE)\n\n## エンジニア向けに、エンジニアリングスキル以外（この例では後進育成力）を意識してもらいたい理由\nこの記事はQiitaアドカレに上げる事が第一目標なので、顧客が本当に必要だったもの（IT営業）ではなくエンジニアに向けて書き進めます。\n\n元々は、きちんとしたポートフォリオとしてサイトを使うなら、個人でサイトを作るより集客力の高いサイトでコンテンツを書いて、類似したものや利用規約的に沿わないコンテンツをポートフォリオ側にまとめつつ、いい感じに作るのがベストだなと思っていました。\nそれで、去年（正しくは一昨年かそれ以上前からで、アドベントカレンダー自体を作成するのを忘れてしまったという経緯がありました）アドベントカレンダーを書くぞ！と決めていたのがズレて今年から開始した次第だったりします。\n\nまぁ、こういう話はいいんですよ。これ自体に意味はありません。\n今回アドカレに投稿した内容は受講生・スクールメイト向けに書いていたり、開発経験があったりなかったり読者の幅を広げつつ色々な知見をお話していたわけですが、その全てに講師になりたい・興味がある方向けにお話している小話があります。\nこれは「エンジニアも開発スキル以外に目を向けたほうがいいと思っているけど、何を学べばよいか分からない」方向けに「講師という道もあるよ」と~~ステマ~~提案するものでもありました。\n（これは環境故と思いますが、独学で実力をつけて来られた方とメンターに師事した方では講師業への考え方が異なるため、あまり有効な方法だとは感じていませんが、やらないよりはやった方が良いと判断しています）\n\nなお、元エンジニアのIT営業さんは思っている以上に多いです。講師業がある程度固まったら開発やりながらIT営業もやる、みたいな事ができたらいいなぁなんて思ってます。\n（スカウト・エージェント各位におかれましては、平素よりお世話になっております）\n\n## エンジニアを目指す以上、高度技術を身につけたい！\nですよね？\n本稿どころかこのアドカレ自体も、ましてやSNSなんてやってないのでロクに宣伝もしてないですし、知人にすら「読んで」なんて案内も出していません。\nそもそもこんな時期にQiitaの、このタイトルを読みたい方なんてタイトルの内容にガチで興味ある方かうっすらとでも転職を考えている方ぐらいだと思ってます。\nなので、高度技術を求める熱意は本稿の読者なら当然持っている前提でお話を進めます。\n「エンジニアには今も興味なくて、給与を上げたいから仕方なくエンジニアスキル磨いてる」という方も本稿では含みます。\n\n何が言いたいかというと、都合よく意識高くなる系の人間がエンジニアリングスキル以外の話をしますよ、という記事である事を認識していただくと誤解が解きやすくなるかなと思いました。\n\n### エンジニアの業務姿勢は理路整然な正しさに勝るものはないが、講師の業務姿勢は曖昧さを残してでも受講生の認知度を優先する事がある\nやや運用保守・インフラ畑っぽい事を言いましたが、ここで言及したいのは「人に教える時に曖昧さを許容する」という事です。\nこの辺りの対コミュニケーションではよくある話です。「話の流れを読む」という事ができれば、説明する時に省略して伝える事は多いと思います。\n無理やりコードにしてイメージすると、\n\n``` Javascript\n/** 運用ルール\n * 1. このプロジェクトのオブジェクトは、毎日朝礼会議があり全オブジェクトに下記ルールで運用します。\n * 2. 弊社の朝礼は、cronで言うと`0 9 * * 1-5`（平日毎朝9時）です\n * 3. 出社については完全フレックスタイム制なので朝礼に参加していないメンバーがいるかもしれません\n * 4. 出社したらタイムカードを押して自身をオブジェクト生成できます。\n * 5. 誰が何時に出社したかを知る事はできません。\n * 6. 朝礼に参加したオブジェクトはPM_userからmeeting_copy()したとみなされます。\n * 7. 全てのオブジェクトはtalkメソッドを使えます\n * 8. 朝礼に出ていない事で知らない事もあると思いますので、知らない事（変数）はエラーではなく聞いてください（対話しているオブジェクトからもらう）\n * 9. PM_userが朝礼に参加できない場合は、他の方が代理でPM_userになって朝礼を進めてください\n**/\n\n// 記事化すると口頭フォローができないのでルールを細かく書きましたが、要は普通に出社してミーティングに参加したら最新情報共有されるよね？っていうイメージです。\n// これ以上は疲れたので勘弁\n\n// 朝礼\nmeeting_copy() {\n    /**\n     * 1. このメソッドは時間経過でのみ実行する事ができます。\n     * 2. meeting_copy()を実行したオブジェクトのAモジュールのバグ = バージョンを上げたら動かなくなった件　を初期値とします\n     * 3. 現実には会議に参加したぐらいで他の人の作業内容まで完璧に理解できませんが、ここは全員優秀だと仮定します\n    **/\n}\n\n// 話に辻褄を合わせたいので、早く来たユーザーを暫定PM_userにしておきます。実務では本物のPM_userが遅れる場合は必ず連絡しましょう。\nvar PM_user;\nvar request_user;\nvar response_user\n\n// 朝礼会議\n\nrequest_user = PM_user.meeting_copy();\nresponse_user = PM_user.meeting_copy();\n\n// 業務開始\nresponse_user.Aモジュールのバグ += \"の修正後のPRで別人に指摘された件\"\n\nrequest_user.talk(\"{(request_user.)Aモジュールのバグ}って取れたんだっけ？\")\n// request_user.Aモジュールのバグ = バージョンを上げたら動かなくなった件\n\nresponse_user.talk(\"{(response_user.)Aモジュールのバグ}ですか？ まだ終わってないです\")\n// Aモジュールのバグ = request_user.Aモジュールのバグの修正後のPRで別人に指摘された件\n\nrequest.talk(\"(注：暗黙的な{Aモジュールのバグ})終わるのに時間掛かりそう？\")\n// 他に任せたいモジュールあるんだけど、作業振って大丈夫かな\n\nresponse.talk(\"(後述コメント内)たぶん大丈夫だと思いますよ。\")\n// (注：暗黙的な{Aモジュールのバグ})のPRレビューで言われたところは直したし、レビュー漏れがなければ〜\n\n```\n\nここでポイントになるのが、`Aモジュールのバグ`という同じ表現で違う事を指している（＝新卒研修時に「こういう現象が起こるのが多態性だよ、って説明すると結構ウケが良かったのと、筆記試験などで多態性の説明時にすごく印象に残っていて点が取れた、とのお声も多かったです）のに、一見して問題なさそうな終わり方をしています。\n今回はどちらも`Aモジュールのバグ`を共通認識が取れていて、粒度こそ違えど目的が同じなので問題になりにくいものです。\nおそらく、ほぼほぼこんな感じのコミュニケーションをしていると思います。\nこれがプログラムだと、`Aモジュールのバグ`なんて変数名ではなく、変数展開してきちんと`バージョンを上げたら動かなくなった件`とか`バグ修正後のPR指摘の件`といいます。\n\n新規開発とか、機能追加だったらこのレベルでも問題になりにくいんですが、運用中のシステムでデグレなどを起こした場合はこんなコミュニケーション（変数名パターン）をしていたら大惨事になる（修正して本番デプロイが完了したのに同様の問題が再発する）可能性があります。\nresponse側は多少くどいかな？と感じても、認識が合っているか確認するために、敢えて変数展開してrequest側に結果を返してあげてください。\nこういったエンジニア間のコミュニケーションが発生する場合は、**聞かれた側が重要なキーワードだと思った部分を変数展開して聞いた側に返してあげる**ように意識するとコミュニケーションエラーがないか相互確認できます。\n無理やりな例ですが、こういった厳格さのようなものを、ここでは「理路整然な正しさ」と定義します。\n\nたとえば講師として指導している場であれば、講義時間が無限に使えたり、比較的余力のある状態で講習を進行できるのが理想\n\n#### 議題に上げたい話とは無関係な会話内容の圧縮テクニック\n今回は解説用に最低限しか書いていないので、これ以上まとめるのは難しいです。\nが、実際はもっと長い文章でのコミュニケーションになる事が多いはずです。\n内容や説明が難しいと感じるもの、たとえば３文以上会話をする必要がありそうだなと感じたら、最初に質問への回答をY/N形式か、結論から言ってくれると、聞いた側が楽になります。\n\nまた、会話時間そのものを短くする事で、その時間分を聞いた・聞かれた人の他の時間に充てる事ができます。\n\n\nここでは「会話」としましたが「講義」にすると、その効果は莫大です。\nただし、聴衆の理解度を担保できていない状態で時間を作って聴衆にアクションを起こしてもらおうとすると、聴衆が何をどうすれば良いか分からず（考え、求められず）学習効果が薄まるリスクがあります。\nなお、自分で考えるべき内容と、解説・指導して導くのが望ましい内容と、どちらが良いのかは会場や聴衆のスキルとも相談しましょう。\n\n## 本題：対入門中エンジニア向けコミュニケーション\n「入門中の方向けコミュニケーション」というのが一番言葉の定義が曖昧だと思っています。\n\n- 非エンジニアならなるべくIT用語を使わないようにするか、IT用語は使うけど身近な例に例えてどういうものか説明しながらプロジェクトを推進・調整していくことになると思います。\n- エンジニア同士のコミュニケーションは、非エンジニア向けに言えばプロ棋士（将棋・囲碁など）が会話だけで対局・感想戦をしているようなものだと思ってください。\n\n実際のエンジニアは、そもそも話している内容が通常の将棋なのかどうぶつ将棋なのか、はたまた中将棋や大将棋なのか、どの将棋の話してます？ と確認しあいながらやっています。\n一般的にいう将棋だったとして、平手なのか駒落ちなのかによっても異なります。\n囲碁で言えば、9路盤か13路盤か19路盤なのか、置石はあるのか、などですね。\nマニアックな話をすると、定跡が大きく違うので少し変わるだけでも別物です。\n\n麻雀もですかね、符計算や牌効率も考えるぐらいには嗜んでいますが戦術面については多面張とリーチ筋騙しのシャボ待ちトイトイ地雷ぐらいしか知らないのであまり詳しくないです。\n彼らは戦術考察の際に必ず手牌と捨て牌、ドラや何順目（あと何回ツモれるか？）を確認しているはずです。\n麻雀のアガりが分かる方なら、手牌`33345`の3,6両面待ちより`45`の3,6両面待ちの方がアガる確率は高いよね、という意味が理解できるかなと思います。\n同様に、`23445`の3,6両面待ちも`45`の3,6両面待ちよりアガる確率は低くなりますが、うまく決まれば（3でアガれば）１飜増えるからトータルではこっちの方がいい事が多いよね、みたいな話です。\n\nおそらく、こういった「アレの話ね」で通じる関係性かどうかで話し方も変わりますよね？っていう事がここでのテーマです。\n\n### 問題の再認識\n``` Javascript\n/**\n * 疲れたので前提条件とか準備とか略\n**/\n\nteacher.talk(\"変数とは、物を入れられる箱です\")\n// teacher.expected_var = \"箱\"; 　を実行\n\nstudentA.think(\"箱…？よく分からんけど、とりあえず言われた通りにしよう\")\n// studentA.box = \"はこ\"\n\nstudentBB.think(\"箱…？どんな大きさでもええんか🤔\")\n// studentBB.box = \"引っ越し段ボール大\"\n\nstudentCCC.think(\"🤔物ってなんや…？　とりあえず魚運べそうなやつにするか\")\n// studentCCC.box = \"長方形の発泡スチロール\"\n\nstudentDDDD.think(\"よく分からんけど物を入れられる箱、りょーかい\")\n// studentDDDD.teacher_message = \"物を入れられる箱\";　 なおboxはnull\n\n//　〜〜〜\n\nteacher.talk(\"作った箱の中に物を入れる事を代入といいます。\")\n// teacher.expected_var = [\"物\"];  ← 「代入のイメージ」の説明イメージ\n\nstudentA.think(\"箱の中に物を入れるのが代入？…つまり？\")\n// studentA.box = \"は物こ\";  これが代入\n\nstudentBB.think(\"箱に入れるって事は、まだ入れられる可能性あるよね\")\n// studentBB.box = \"引っ越し段ボール大     (以降、空白スペース)\"\n// 代入自体に備えており、作業をしている感覚で話を理解している途中\n\nstudentCCC.think(\"釣った魚を漁獲すればええんかな\")\n// ノートへの書き取りミスなどで、このように理解した\n// studentCCC.things = \"魚\"\n// studentCCC.keyword = \"代入\"\n// studentCCC.image = \"発泡　（魚）　スチロール\"\n\nstudentDDDD.think(\"よく分からんけど、箱の中に物を入れたら代入やな！\")\n// studentDDDD.teacher_message = \"物\"  「物を入れられる箱」が入っている時に\"物\"を入れる＝上書きすることを代入\n\n```\n\n講師の発言を受けて考えられる理解の仕方を、変数と代入を使ってイメージとして書き起こしました。\n説明を受けて色々なイメージをして、なぜだかめちゃくちゃな事をやっているように見えれば私が伝えたかった意図としてはきちんと伝わっているので大丈夫だと思います。\n座学一回やって説明したぐらいだと、聴衆の理解度はこういうものだったりします。\n\nこうならないために、図解したり（テキストを配布）実際のコードを書いてみたりして\n\n- 最初説明を聞いて理解した内容と\n- 実際に見聞きあるいは実行して理解した内容と\n- 差・食い違いは何か見つけて、単元を超えて自分の理解が根本的に間違っていないか\n\nを確認しながら学習を進めていく事になります。\n\n#### こんな裏技あったら人生楽なのか、つまらないと考えるのかは人それぞれ\nこの問題は`teacher`と`student`が同じ`Human`クラスで、`Human.(static)var`に\"箱\"と入れられれば、誰に聞いても同じ答えが返ってくるようになります。\n同様に、`teacher`クラスから`student`クラスを拡張で作れたら（日本語で子クラスとも言うため）teacherが最初から間違っていたり、後で勘違いしてvarを書き換えない限りは問題を解消できます。\n\nつまり講師の知識を最初から受講者が活かせればこんなに苦労する事はないんですが、現実的にそうなってないです。\nただし、解釈の仕方によっては講義の場や時間を`teacher`変数にあるオブジェクトから`student`変数（配列でもいいです）へ一つ一つハードコピーをしようとしている時間とも言えなくはないです。\n（今思ったんですが、これは値渡しと参照渡しの説明の例としても使えそうです）\n\nこのように、人間から人間への知識のコピーは決して簡単ではありません。\nもしかしたら、普段何気なく使っている[Ctrl(Command)] + [C]やcopyメソッドはとても大変な思いをして精度100%のコピーを作っているかも知れませんよ？\nましてや、[Ctrl(Command)] + [Z]のアンドゥ・リドゥなんて神業ですね。現実世界でもほしい機能です。\n\n## 営利主義のITスクールの運営はなぜエンジニア講師に合わないのか\nそもそもの教育哲学が違うからです。\nエンジニア講師をやっていて困りがちなシチュエーションと言えば、運営がやっている拝金主義にしか見えない教育システムや運営体制が気に入らないとか、受講者から講師にされても困るクレーム（講座量が高すぎる、教材がわかりにくい等）の窓口にされている、講師間でのコミュニケーションを認めない（これは引き抜き防止のためです）などで苦労をされている方なんじゃないかと思います。\nつまり経験者の方が抱く不満にありがちなものですね。\nこれは、法人向け新卒研修でも個人のスクールでも起こり得ます。\n\n大体の講師はフリーランスだと思いますし、私もフリーランスなんですが、敢えて誤解を恐れずに言いたい事を言わせていただくと、会社の方針に従えないなら自分でスクール事業を立ち上げてやってください。\nどれだけ会社の方針が間違っていると思っても、会社に属している限りは会社の人間であるように振る舞うのは当然（フリーランスの立場で言えば仕方のない事）です。\n三国志的に言えば、袁紹と田豊の関係を当時でも現代でもやって良い事は何もないです。\n\nただし、現場意識としては何とかして講師をサポートしたいと考えてくれる方は多いので、そこだけは間違えて欲しくないです。\n彼らにも立場があり、本音と建前は違います。\n\n## 「受講生の満足度」という謎パラメーター\n受講生をディスる意図は全くありませんが、そのようにしか思えないお話をします。\n\nスクール事業として見ると、受講生も講師も替えが利く存在です。\nだとしたら、お金をくれる受講生とお金を持っていく講師のどちらを大事にしますか？というお話です。\nこれの答えは言わなくても分かりますよね？\n\nそのため、講師が自身の査定や評価を受けるために、講義風景を録画し提出したり、あるいはクライアントなり担当者が潜伏調査のために入室する事もあります。（なお、受講生に同意を取る場合は「講義の品質向上のため」と説明して同意を得ます）\n繊細な未経験講師（エンジニア）なら実情を知ったら胃が痛くなったり憂鬱になりかねません。\n（従業員を監視しても生産性が上がらない話に似ていませんか？）\n\n色々書いてますが、最も正しそうなデータは受講生に直接アンケートを取るのが一番です。\n多いのは一ヶ月毎など区切りを決めている場合でしょうか。\n今まであった面白かったケースとしては、受講生の質問を受けるたびにアンケートを書いてもらったなんて事もありました。これは受講生も質問＝アンケートの手間があったから逆に面倒だったんじゃないかなぁ、なんて思ってます。\n裏を返すと、嫌いな講師を質問攻めして低評価を送りまくれば簡単に左遷・解雇できるので、受講生コミュニティもあったし犠牲者もいるんじゃないかと思います。\nこの制度のすごいところは、\n\n- 運営が気に入らない講師がいる\n- 色々な事情で簡単に契約を終了させることができない\n\nというケースでも正当な理由（受講生から嫌われている）で簡単に解雇できる事です。\n\n1. 運営の人間を受講生として参画させる\n1. 過去の受講生の質問からテンプレートを使って講師に質問をする\n1. 回答がどうであれ、悪い評価を送る\n1. ある程度評価を溜める\n\n追跡調査や解雇した講師からの言及が怖くなければ、実態はともかく評価を非公開にすれば中身をでっち上げて解雇してもバレないです。\n運営にとって、対講師の切り札が「受講生満足度」なのです。\n\n「受講生満足度」を運用する場合は、まず真っ先に講師と運営が連携して改善点や、どうしてこのような評価をされたのかヒアリング・相談を行うはずです。\nその上で、低評価をつけた受講生（またはこの傾向が見られる方）に向けてより良い学習体験を提供するために対策を講じるはずです。\n\n## 講師案件を安定的にこなし、獲得するためにはフリーランスでも社内政治は出来た方が良い\n何のためにフリーランスをやっているか分からない話をします。\n残念ながら本件は実体験に基づきます。\n\n私の経歴をご存じの方は、大手も数社渡り歩いてきた経験（うち、社内コンサル含）があるので社内政治力もご評価いただけるかと思います。\nで、こういったスクール事業社でも社内政治ができる場合は居心地の良い環境づくりのためにステークホルダーを探したり、組織体制を抑えたりプロダクトリードやったりする（元々の目的としては、報酬の未払いが起こった時に直接やり取りできる窓口を複数持っておく事で、有事の際に連絡が取れなくなったり、話を曲解される事を防ぐため）んですが、パッケージ提供側として教育システムについて知っているべき内容を教育されなかったために、システムトラブルが発生した時にアナログ・マンパワーな対応を行う事が何度かありました。\n大体の場合は「障害発生→暫定対応→復旧次第運用を戻す」で解決する話なので、これで終わればいい話です。\n\nが、運営側の内情を把握するチャンスでもあります。\nこういった機会をうまくゴニョゴニョしていくと、実は使っている教育システムが薄氷の上で成立している運用である事にすぐ気付けます。\n今までで多かったのは、テキスト教材の致命的な誤字・内容不備だったりテスト問題のややこしい表現の変更申請時に、すんなりと修正できる場合もあればシステムの都合で差し替えが難しいので、実施直前などに注意喚起をする方法で対応するケースです。\nこれ自体はあるある（※システム屋としては、本来はあってはならない事だと思うのですが）だと思います。\n\nこういった問題に対して、次回または来年度施策として今回の事象、対応内容、改善案を出していくと、教育システムのコードを１行も読む事も見る事もなく理解が深まっていきます。\n（ただし、システム管理者アカウントが見えている「出来る・出来ないの判断」と運用管理者アカウントが見えている「出来る・出来ないの判断」は異なるため、混同しないように留意しておきましょう）\nで、システムのサポートチームと同等の予測や見解を持てるようになると、「現場講師＋システムサポートメンバー」の景色が見えてくるため、これらを使って更に他の業務内容も垣間見ていきます。\n\nそこでも（現状起こっていないかも知れないが）将来的に課題になりそうなお話を先にしておくと、既に実績とチーム間での信頼を得る事ができれば更に今回の業務（案件）の経緯や背景、またはクライアントとエンドの関係などが窺えたりします。\n実はこれは現場で動く時にも非常に重要な情報なんですが、なぜかキックオフの時までにお話がありません。\nおそらく、本来は社外秘扱いされている情報が含まれているからだと思います。\n\n（ちょっとヤバいニオイがしてきたので、ここからはぶった切ります。ご容赦ください）\n\n## 講師になりたいエンジニアが探すべき求人の裏キーワード\n「エンジニア　講師　ニート」で求人サイトを探してみてください。\nただし、求人の掲載日が古かったり同一案件を複数出していたりする可能性があるため、応募時は複数送らないように注意しましょう。\nそもそも、複数送ってしまいそうな求人の出し方をするなよ、という声には同感ですが、求人サイトのシステムの都合とか色々大人のアレコレがありそうな気がしますね。\n\n### SNSに強いエンジニアならではのテクニック\n入るスクールは第1期生のものを探してください。\nつまり、普通の方法では応募すらできないプログラミングスクールの募集を見つける事です。\nそのスクールには講師の立場で入るのはまず不可能（※お察しください）なので、受講生として入ってプログラミングを学び？つつ、講師のやり方を盗みましょう。\n\n講師スキルを高めたいなら、コースや講師が多いスクールがおすすめですが、講師になりたいなら講師がいないスクールを選んで受講生として潜り込めば内部採用される可能性があります。\nあとは、第1期生が講師になったとブランディングして社内に発信するようにしていくと、外部講師を切って内製講師を作った方が事業化できるしコストも安くなります。\n穿った見方をすると外部講師から仕事を奪ったように捉えてしまいますが、外部講師と会社との取引実績を認めるかあるいはあなたが外部講師の方に指導していただいた経験をお話することで、その方の株を高める事になります。\nそもそもあなたはSNSに強いはずなので、こういったアピールポイントは会社あるいは個人が許す範囲で発信する方があなたにも良い印象を持っていただく事ができます。\nSNSを使っていくと「何を言ってもダメな方がいる」事は認識していると思いますので、こういった方々をケアするのか付き合わないようにするのかは、あなたのSNS戦略に合わせてご対応ください。\n\n### 運営を改善したい\nその会社は諦めて、あなたを中心とした組織を立てて事業化してください。\n\nエンジニアが会社を興す時に、絶対必要なのに足りないスキルが「営業力」です。\nもし営業面に自信がないなら、いったんエンジニアを３年休職してでも営業スキルを習得した方が将来的にどこでも活用できます。\nエンジニアだけど営業修行がしたいです、と言ってくる応募者は間違いなく採用担当者に刺さります。\n長期的に活躍できる人材しか求めていない会社なら採用される事はないですが、これはあなたが悪いのではなくタイミングが悪いので落ち込む必要はありません。\n独立の機運が高い会社だな、と思ったらどんどん書類を出していけば、未経験者が普通に就活・転職するより高い確率で採用されると思いますよ。（私なら採用してみたい側の人間です）\n\nと、運営を改善したいと常々考えている人間が自分の話を他人事のように語っておきました。\n\n## 新卒カードをなくした場合でも使える研修のある案件とは\nタイトルだけ鵜呑みにすると、メリットしかないお話だと思いますが、ちょっと待ってください！\nこれは罠の可能性に注意してください。\nというのも、ひとくちに研修と言っても、企業が雇用して研修するタイプ（無料・給与別）ではなく、派遣登録して研修サービスが受けられる（有料）というのが正しいです。\nまた、派遣で無料の研修があったとしても、短期間参加するだけのいわゆる勉強会を研修と定義している事もあります。\n今回は、プログラミング未経験で新卒カードがない方が無料で研修を受ける方法を考えたいので、勉強会を研修とするのは難しいです。\n\n### 社員（正社員・契約・派遣・アルバイト・パート）が使える裏技\nここの要件は失業保険の対象者であることです。\nつまり、社保を持っていて半年以上連続的に働いており、開業届を出していない方が該当する事が多いので、対象者はかなり広がります。\nなお、自営業の場合は、この方法を使う場合は事前に廃業届けを出しておいてください。\n（アルバイトと自営業を兼務している場合、アルバイトをやめても失業扱いにならないようです）\n\n失業給付期間中に条件を満たす職業訓練校に通うのが一番です。\nお金（失業給付金）をもらいながらITの専門学校１回生相当の内容で実務よりの勉強が体験できます。\n独学でプログラミングの勉強をしていた方にとっては、無料でチーム開発を体験できる機会にもなるので、機会があれば（ない方がいいかも？）参加も一考の余地があると思います。\n\n## 所感\n本稿で一番時間がかかったのが運用ルールの漏れ抜けを塞ぐことだったので、登壇して解説した方が早いと思う気持ちに溢れてつらかったです。\nこれアフィリエイトで記事書いていたら一番最後におすすめのエージェントをランキング形式で紹介して広告とか貼りたいですね。\n残念ながらアフィリエイト記事でもなければ、自分のページに誘導するためのサテライトでもないのでエージェントはご自身で見極めてください。\n\n### お詫び２（所感２）\n遅れてすみませんでした、\nこの記事は14日に「記事を書く」ボタンを押して、思った以上に難産した結果、15日本日現在に投稿する運びになってしまいました。\n普段講師の話を真面目に語らないので、気持ち的にはスッキリしています。\nあと、所感でも書いたんですが運用ルールの漏れ抜けについては、口頭説明で解決していた部分なのであれもダメこれもダメと条件を書き出すと結構制限だらけでしんどかったです。\nこういう事を経験すると、文章（メールなりチャットなり）で伝えるより電話一本で済ませたくなるおぢさんの気持ちになります。\n都合のいいところだけ切り取って使いたいです。\n\n## 次の記事\n- [(15日目：ブラウザでVSCodeが使えるらしいgithub.devとかGitHub Codespacesを検証してみた)](https://qiita.com/nomurasan/items/7b95c71e78a96ad1af27)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-14T13:25:04+09:00",
        "group": null,
        "id": "7cff5b7816eb4d660a05",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "ポエム",
                "versions": []
            },
            {
                "name": "研修",
                "versions": []
            },
            {
                "name": "哲学",
                "versions": []
            },
            {
                "name": "講師",
                "versions": []
            }
        ],
        "title": "エンジニアが講師業を営んで学び得た哲学の話",
        "updated_at": "2022-12-16T00:05:30+09:00",
        "url": "https://qiita.com/nomurasan/items/7cff5b7816eb4d660a05",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 635,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<p data-sourcepos=\"1:1-3:133\">話題になっていた事は知っていたので多分やべーネタだろうなぁ、と思っていましたが調べてみると結構興味深かったので共有しようというモチベーションで本稿を書き上げています。<br>\n正直、断片的な情報ばかりで調べても面白かっただけで特に何か得られたわけではなかったので、せっかくだからGPLライセンスと著作権についてフォーカスしてお話ししていきます。<br>\nまた、Twitterを含む多くのSNSを辞めたおっさんからの説教が若干ありますが、平にご容赦ください。</p>\n<h2 data-sourcepos=\"5:1-5:9\">\n<span id=\"概要\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>概要</h2>\n<p data-sourcepos=\"6:1-6:60\">多くなってしまったんで、先にまとめます。</p>\n<h3 data-sourcepos=\"8:1-8:28\">\n<span id=\"筆者のポジション\" class=\"fragment\"></span><a href=\"#%E7%AD%86%E8%80%85%E3%81%AE%E3%83%9D%E3%82%B8%E3%82%B7%E3%83%A7%E3%83%B3\"><i class=\"fa fa-link\"></i></a>筆者のポジション</h3>\n<ul data-sourcepos=\"9:1-12:0\">\n<li data-sourcepos=\"9:1-9:96\">今回問題になったMOD作者や配信者については未知 or 名前だけ知ってた</li>\n<li data-sourcepos=\"10:1-10:53\">今回の問題と、については情報提供者</li>\n<li data-sourcepos=\"11:1-12:0\">事前情報や予備知識なし。界隈のG＝ゴースティングを読めなかった（現在執筆中）</li>\n</ul>\n<h3 data-sourcepos=\"13:1-13:19\">\n<span id=\"本稿の目的\" class=\"fragment\"></span><a href=\"#%E6%9C%AC%E7%A8%BF%E3%81%AE%E7%9B%AE%E7%9A%84\"><i class=\"fa fa-link\"></i></a>本稿の目的</h3>\n<ul data-sourcepos=\"14:1-17:0\">\n<li data-sourcepos=\"14:1-14:32\">GPLライセンスを学ぼう</li>\n<li data-sourcepos=\"15:1-15:23\">著作権を学ぼう</li>\n<li data-sourcepos=\"16:1-17:0\">ソフトウェアライセンスの問題の事例を見よう</li>\n</ul>\n<p data-sourcepos=\"18:1-18:102\">（※）後述していますが、特定の個人や団体を批判する意図はありません。</p>\n<h3 data-sourcepos=\"20:1-20:10\">\n<span id=\"注意\" class=\"fragment\"></span><a href=\"#%E6%B3%A8%E6%84%8F\"><i class=\"fa fa-link\"></i></a>注意</h3>\n<ul data-sourcepos=\"21:1-23:0\">\n<li data-sourcepos=\"21:1-21:62\">特定のMOD作者や配信者について言及しません</li>\n<li data-sourcepos=\"22:1-23:0\">SNSなどのエコーチェンバーを考慮しません</li>\n</ul>\n<h3 data-sourcepos=\"24:1-24:22\">\n<span id=\"今日やること\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E6%97%A5%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>今日やること</h3>\n<ul data-sourcepos=\"25:1-28:0\">\n<li data-sourcepos=\"25:1-25:56\">ソフトウェアライセンスを設定する意義</li>\n<li data-sourcepos=\"26:1-26:41\">ライセンス関連のリスク分析</li>\n<li data-sourcepos=\"27:1-28:0\">社会学的に考えるソフトウェアライセンス</li>\n</ul>\n<p data-sourcepos=\"29:1-29:117\">※社会学のスキルはマーケティングの片手間に多少齧った程度の知識しかありません。</p>\n<h3 data-sourcepos=\"31:1-31:28\">\n<span id=\"今日やらないこと\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E6%97%A5%E3%82%84%E3%82%89%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>今日やらないこと</h3>\n<ul data-sourcepos=\"32:1-39:0\">\n<li data-sourcepos=\"32:1-37:28\">SNS問題\n<ul data-sourcepos=\"33:3-37:28\">\n<li data-sourcepos=\"33:3-33:19\">善悪の判断</li>\n<li data-sourcepos=\"34:3-34:22\">特定への忖度</li>\n<li data-sourcepos=\"35:3-35:19\">批評・批判</li>\n<li data-sourcepos=\"36:3-36:28\">ポジショントーク</li>\n<li data-sourcepos=\"37:3-37:28\">関係者の民度問題</li>\n</ul>\n</li>\n<li data-sourcepos=\"38:1-39:0\">問題解決、改善点の提起</li>\n</ul>\n<p data-sourcepos=\"40:1-40:174\">執筆中も気をつけているのですが、誤解を与えそうな表現と感じるものがあれば、お手数ですがご教示いただけると嬉しいです。</p>\n<h3 data-sourcepos=\"42:1-42:19\">\n<span id=\"情報ソース\" class=\"fragment\"></span><a href=\"#%E6%83%85%E5%A0%B1%E3%82%BD%E3%83%BC%E3%82%B9\"><i class=\"fa fa-link\"></i></a>情報ソース</h3>\n<ul data-sourcepos=\"43:1-47:0\">\n<li data-sourcepos=\"43:1-43:85\"><a href=\"https://wikiwiki.jp/amasmod\" rel=\"nofollow noopener\" target=\"_blank\">Among Us アモアス MOD 日本語解説Wiki さま</a></li>\n<li data-sourcepos=\"44:1-45:74\">\n<a href=\"https://docs.reactor.gg\" rel=\"nofollow noopener\" target=\"_blank\">reactor(開発環境構築)</a>\n<ul data-sourcepos=\"45:3-45:74\">\n<li data-sourcepos=\"45:3-45:74\"><a href=\"https://github.com/TheOtherRolesAU/TheOtherRoles\" rel=\"nofollow noopener\" target=\"_blank\">fork元？(Github)</a></li>\n</ul>\n</li>\n<li data-sourcepos=\"46:1-47:0\">今回の配信者や関連する配信者のチャンネルページ等</li>\n</ul>\n<h3 data-sourcepos=\"48:1-48:10\">\n<span id=\"注意-1\" class=\"fragment\"></span><a href=\"#%E6%B3%A8%E6%84%8F-1\"><i class=\"fa fa-link\"></i></a>注意</h3>\n<p data-sourcepos=\"49:1-50:250\">（本稿では以下匿名とします）氏の作品を取得することができないため、作品のライセンスがGPLであるという根拠を確かめる事ができませんでした。<br>\nそこで、私の手元で同じ（であろう）開発環境を構築する際に、特定のThe Other Rolesをforkする手順で実施したところGPLライセンスだったので、これを踏襲しているものと考えていきます。</p>\n<h2 data-sourcepos=\"52:1-52:45\">\n<span id=\"そもそもgplライセンスとは\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82gpl%E3%83%A9%E3%82%A4%E3%82%BB%E3%83%B3%E3%82%B9%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>そもそも、GPLライセンスとは？</h2>\n<p data-sourcepos=\"53:1-53:374\"><a href=\"https://yamory.io/blog/about-gpl-license/\" rel=\"nofollow noopener\" target=\"_blank\">超分かりやすいサイト(正しく知れば怖くない GPL ライセンスの特徴|yamaryさま)</a>を置いておきますが、GPLライセンスを使用するソフトウェアの場合はライセンステキストが同梱または案内されているため、そちらを必ず参照して理解してください。</p>\n<p data-sourcepos=\"55:1-55:63\">私からGPLライセンスの解説は今更やりません。</p>\n<h2 data-sourcepos=\"57:1-57:48\">\n<span id=\"ライセンスを設定する意義とは\" class=\"fragment\"></span><a href=\"#%E3%83%A9%E3%82%A4%E3%82%BB%E3%83%B3%E3%82%B9%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B%E6%84%8F%E7%BE%A9%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>ライセンスを設定する意義とは？</h2>\n<p data-sourcepos=\"58:1-62:183\">参考ページに分かりやすく書いていますが、GPLに限らず主要ライセンスについては「著作権があるプログラムのバグフィックスや拡張を第三者ができる権利」と考えると良いでしょう。<br>\nたとえばQiitaの記事などで言えば、陳腐化してしまったり内容の誤りをコメントや編集リクエストを出されると思います。<br>\nこれは指摘したユーザーが正しくても、記事自体の著作権は著作者が持っているため、良かれと思ってやった事が法的（著作権的）にマズかった、というケースにならないようにするため、あくまで提案でしかないわけです。<br>\n提案を受けて著作者が記事を変更するも変更しないも、指摘したユーザーに意見する権利はありません。<br>\nただし、いわゆる名誉毀損や誹謗中傷にあたると考えられる場合は、著作者だけでなく管理者（運営）に削除要請をする事ができます。</p>\n<h3 data-sourcepos=\"64:1-64:49\">\n<span id=\"そのコードは記事プログラム\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AF%E8%A8%98%E4%BA%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0\"><i class=\"fa fa-link\"></i></a>そのコードは記事？プログラム？</h3>\n<p data-sourcepos=\"65:1-68:87\">問題をややこしくしているお話をもう一つ。<br>\nサンプルコードとして取り扱ったコードがあった場合です。<br>\n大体の場合は、取り扱いたいコードにライセンスがあればそちらを尊重し、その上で記事の著作者に帰属するという考え方ができそうです。<br>\n（個別具体なケースが考えられるため、あえて濁してあります）</p>\n<p data-sourcepos=\"70:1-71:210\">このように、執筆当時の著作権は言った言わない問題に近い性質があり、それぞれの善意や曖昧な判断に基づく事がしばしばあります。<br>\nよく「ネットで拾ったソース」と気軽に表現していますが、そのソースは著作者が記事に書いたものであって、コード作成者が捨てたものではありません。</p>\n<h4 data-sourcepos=\"73:1-73:26\">\n<span id=\"転載対策として\" class=\"fragment\"></span><a href=\"#%E8%BB%A2%E8%BC%89%E5%AF%BE%E7%AD%96%E3%81%A8%E3%81%97%E3%81%A6\"><i class=\"fa fa-link\"></i></a>転載対策として</h4>\n<p data-sourcepos=\"74:1-74:294\">悪魔のスクレイピング大流行時代で人様のサイトコンテンツを盗んだり盗まれたりしたアフィリエイト群雄割拠時代を生きてきたのでマジで言うんですが、こういう人に性善説を唱えても無駄です。見てすらいません。</p>\n<p data-sourcepos=\"76:1-80:101\">ではどうするべきか？<br>\nスクレイピング対策をする手もありますが、一般ユーザーの利便性を犠牲にする事は許容するしかありません。<br>\nこれはマウスドラッグ・右クリック禁止スクリプトと同じ考え方ですが、一部の悪質なユーザーのために大多数の善良なユーザーにも負荷をかける事がWebサイト運営者として正しい姿なのでしょうか？<br>\n取られない方法を頑張るより、取られた時に期待しない動作をさせた方がまだマシです。<br>\n一番手っ取り早いのは<code>.htaccess</code>などでアクセス制御をする方法でしょうか。</p>\n<p data-sourcepos=\"82:1-83:138\">この辺りは調べると結構な数でてきます。<br>\nユーザーの利便性とコンテンツの安全性のどちらを優先するか考えながらサイト作成をしてください。</p>\n<h4 data-sourcepos=\"85:1-85:65\">\n<span id=\"講師向け拾ったという言葉のイメージ\" class=\"fragment\"></span><a href=\"#%E8%AC%9B%E5%B8%AB%E5%90%91%E3%81%91%E6%8B%BE%E3%81%A3%E3%81%9F%E3%81%A8%E3%81%84%E3%81%86%E8%A8%80%E8%91%89%E3%81%AE%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8\"><i class=\"fa fa-link\"></i></a>講師向け：「拾った」という言葉のイメージ</h4>\n<p data-sourcepos=\"86:1-86:105\">そもそも「ネットで拾った」という表現自体が正しくないのかもしれません。</p>\n<p data-sourcepos=\"88:1-89:144\">マナー講師のようで気が引けるのですが、画像にしろコードにしろネットでダウンロードする事を「拾う」という表現は正しくないという意識づけを浸透させるしかないのかもしれません。<br>\nこれは明らかな言葉狩りなので、教育の自由を奪う行為です。ご判断は各講師の方に委ねたいと思います。</p>\n<h2 data-sourcepos=\"91:1-91:45\">\n<span id=\"本題ソフトウェアの取り扱い\" class=\"fragment\"></span><a href=\"#%E6%9C%AC%E9%A1%8C%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%81%AE%E5%8F%96%E3%82%8A%E6%89%B1%E3%81%84\"><i class=\"fa fa-link\"></i></a>本題：ソフトウェアの取り扱い</h2>\n<h3 data-sourcepos=\"92:1-92:106\">\n<span id=\"q-一度公開し既に利用者がいるプログラムを削除する事に問題があるか\" class=\"fragment\"></span><a href=\"#q-%E4%B8%80%E5%BA%A6%E5%85%AC%E9%96%8B%E3%81%97%E6%97%A2%E3%81%AB%E5%88%A9%E7%94%A8%E8%80%85%E3%81%8C%E3%81%84%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%82%92%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B%E4%BA%8B%E3%81%AB%E5%95%8F%E9%A1%8C%E3%81%8C%E3%81%82%E3%82%8B%E3%81%8B\"><i class=\"fa fa-link\"></i></a>Q. 一度公開し、既に利用者がいるプログラムを削除する事に問題があるか？</h3>\n<p data-sourcepos=\"93:1-93:18\">A. ないです。</p>\n<p data-sourcepos=\"95:1-96:267\">ライセンスのどこにもそんな規定はありませんが、特記事項等があればこの限りではありません。<br>\n今回は著作者の判断によりソフトウェアの公開停止という形になりましたが、たとえば昔から開発しているソフトウェアが無期限の開発停止になったとして、誰が責められるのか？ということです。</p>\n<p data-sourcepos=\"98:1-102:135\">ただし、やり方はあります。<br>\n無償提供とはいえ、予告期間なく突然使用禁止にしたり非公開にしたり、というのは、現状使っているユーザーへの配慮がないなぁ、と感じてしまいます。<br>\n私も開発者なので、自分が作ったものが意図しない使われ方をすると思うところはありますが、法に触れない限りは予告期間を設けるかなぁ…とは思います。<br>\nただし、当事者ではなく第三者としての意見なので、そういう状況でなかった可能性もあります。<br>\nリアルタイムに見ていないので、外から適当なこと（私が考える一般だと思う論）を言っています。</p>\n<h3 data-sourcepos=\"104:1-104:61\">\n<span id=\"q-特定の利用者の利用を制限できるのか\" class=\"fragment\"></span><a href=\"#q-%E7%89%B9%E5%AE%9A%E3%81%AE%E5%88%A9%E7%94%A8%E8%80%85%E3%81%AE%E5%88%A9%E7%94%A8%E3%82%92%E5%88%B6%E9%99%90%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>Q. 特定の利用者の利用を制限できるのか？</h3>\n<p data-sourcepos=\"105:1-106:90\">A. できません。<br>\nライセンス云々の前に、実際問題としてそんなことできますかね？</p>\n<p data-sourcepos=\"108:1-112:114\">たとえば、個人情報が流出したとして「流出した個人情報を取得しないでください」とお願いする事はできると思いますが、個人情報を取得できる状態にあるなら取得する人は絶対に出てきますよ。<br>\n個人情報というと抵抗感は高いですが、たとえばNovelAIの学習モデルが流出した事件がありました。<br>\n上記の個人情報をNovelAIの学習モデルに置き換えてみてください。これ絶対やってる人いるよね、って思いませんか？<br>\nまた、リークの話とは無関係としても（本稿では著作権について言及したいので）NovelAIが学習したデータの著作権に問題があります。<br>\nとはいえ、問題があるからといって制限は不可能です。あくまでお願いとなります。</p>\n<h4 data-sourcepos=\"114:1-114:53\">\n<span id=\"q-制限出来ないならやってもいい\" class=\"fragment\"></span><a href=\"#q-%E5%88%B6%E9%99%90%E5%87%BA%E6%9D%A5%E3%81%AA%E3%81%84%E3%81%AA%E3%82%89%E3%82%84%E3%81%A3%E3%81%A6%E3%82%82%E3%81%84%E3%81%84\"><i class=\"fa fa-link\"></i></a>Q. 制限出来ないならやってもいい？</h4>\n<p data-sourcepos=\"115:1-115:60\">A. トラブルを回避したいなら避けましょう。</p>\n<p data-sourcepos=\"117:1-119:147\">たとえば、流出した個人情報を取得してストレージになんて入れておいたら二次災害リスクや単純所持自体そのものがリスクになります。<br>\n個人情報だと１件あたりは大した事ない金額ですが、データ数でいえば間違いなくビッグデータと言えるので、個人で賠償するのは不可能な金額です。<br>\n流出時は重大な過失に該当するため、会社を倒産させて自己破産すればチャラになる、なんて事はないです。</p>\n<p data-sourcepos=\"121:1-122:57\">NovelAIのケースは扱いが微妙なのでどうなるか断言しにくいですが、NovelAI自体にも問題がある事を留意してください。<br>\n私ならリスクがある以上は使わないです。</p>\n<h3 data-sourcepos=\"124:1-124:49\">\n<span id=\"q-今回の騒動の問題点とは何か\" class=\"fragment\"></span><a href=\"#q-%E4%BB%8A%E5%9B%9E%E3%81%AE%E9%A8%92%E5%8B%95%E3%81%AE%E5%95%8F%E9%A1%8C%E7%82%B9%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B\"><i class=\"fa fa-link\"></i></a>Q. 今回の騒動の問題点とは何か？</h3>\n<p data-sourcepos=\"125:1-125:33\">A. （※）何もないです。</p>\n<p data-sourcepos=\"127:1-129:186\">何も問題はないんですが、マナーやモラルとしてどうなの？という点では疑問です。<br>\nもしソフトウェアライセンスに「（※）お気持ち制度」が必要であれば、それを議論すればよいと思います。<br>\nどこかに但し書き（契約など）でもない限りは、基本的に作者が公開したものを非公開にしたりする事に異議を唱える権利はありません。</p>\n<p data-sourcepos=\"131:1-133:237\">ただし、問題ないからOKとならないのも現実です。<br>\n冒頭で触れないと言いつつ若干触れてしまいますが、声が大きくなると正しさより（正しいか間違っているかは別にして）正義感が勝ってしまう事があるのもエコーチェンバー現象の恐ろしいところです。<br>\nこの辺りは心理学の話になるのでこれ以上の言及は避けますが、対立する意見を受け入れられているか、自身を客観評価できているかは都度見直した方が良いかもしれません。</p>\n<p data-sourcepos=\"135:1-135:163\"><a href=\"https://torilab.sakura.ne.jp/twitter/echamber/index.html\" rel=\"nofollow noopener\" target=\"_blank\">Twitterのポストから自身が染まっていないか確認できる方法があるようです。</a></p>\n<h2 data-sourcepos=\"137:1-137:60\">\n<span id=\"生きにくいsns時代を強く生きるメソッド例\" class=\"fragment\"></span><a href=\"#%E7%94%9F%E3%81%8D%E3%81%AB%E3%81%8F%E3%81%84sns%E6%99%82%E4%BB%A3%E3%82%92%E5%BC%B7%E3%81%8F%E7%94%9F%E3%81%8D%E3%82%8B%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>生きにくいSNS時代を強く生きるメソッド例</h2>\n<p data-sourcepos=\"138:1-140:345\">普段から意識して「自分と反対意見を出す人」を耐えられる量の精神毒として相手方の代表格をフォローする手もあります。<br>\n分かりやすいところだとガノタなら連邦とジオンの両陣営だったり、きのことたけのこの両陣営だったり、vimとemacsなど色々です。<br>\nガチ宗教の話もあるので踏み込むのがこわいですが、与党と野党（与党は党内でも左右に分かれており、意見を探すのが大変で、野党は党ごとに意見が統一されているが、各党で考え方が異なる）なんかは一番分かりやすく良い例だと個人的には思います。</p>\n<p data-sourcepos=\"142:1-143:249\">何が言いたいかというと、特定のどこかに染まるのではなくて、別の意見や見方ができる環境を自分で作りましょうというお話です。<br>\n本稿ではGPLライセンスの扱いと著作権を主題に取り扱っていますが、他の意見が絶対あるはずなので、あなたが本稿に賛同でも反対でも違う人の考え方に触れてみてほしいと思います。</p>\n<h2 data-sourcepos=\"145:1-145:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"146:1-147:88\">\n<li data-sourcepos=\"146:1-146:134\"><a href=\"https://qiita.com/nomurasan/items/7cff5b7816eb4d660a05\" id=\"reference-7c05501c7610ba362d92\">(14日目) エンジニアが講師業を営んで学び得た哲学の話</a></li>\n<li data-sourcepos=\"147:1-147:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n",
        "body": "話題になっていた事は知っていたので多分やべーネタだろうなぁ、と思っていましたが調べてみると結構興味深かったので共有しようというモチベーションで本稿を書き上げています。\n正直、断片的な情報ばかりで調べても面白かっただけで特に何か得られたわけではなかったので、せっかくだからGPLライセンスと著作権についてフォーカスしてお話ししていきます。\nまた、Twitterを含む多くのSNSを辞めたおっさんからの説教が若干ありますが、平にご容赦ください。\n\n## 概要\n多くなってしまったんで、先にまとめます。\n\n### 筆者のポジション\n- 今回問題になったMOD作者や配信者については未知 or 名前だけ知ってた\n- 今回の問題と、については情報提供者\n- 事前情報や予備知識なし。界隈のG＝ゴースティングを読めなかった（現在執筆中）\n\n### 本稿の目的\n- GPLライセンスを学ぼう\n- 著作権を学ぼう\n- ソフトウェアライセンスの問題の事例を見よう\n\n（※）後述していますが、特定の個人や団体を批判する意図はありません。\n\n### 注意\n- 特定のMOD作者や配信者について言及しません\n- SNSなどのエコーチェンバーを考慮しません\n\n### 今日やること\n- ソフトウェアライセンスを設定する意義\n- ライセンス関連のリスク分析\n- 社会学的に考えるソフトウェアライセンス\n\n※社会学のスキルはマーケティングの片手間に多少齧った程度の知識しかありません。\n\n### 今日やらないこと\n- SNS問題\n  - 善悪の判断\n  - 特定への忖度\n  - 批評・批判\n  - ポジショントーク\n  - 関係者の民度問題\n- 問題解決、改善点の提起\n\n執筆中も気をつけているのですが、誤解を与えそうな表現と感じるものがあれば、お手数ですがご教示いただけると嬉しいです。\n\n### 情報ソース\n- [Among Us アモアス MOD 日本語解説Wiki さま](https://wikiwiki.jp/amasmod)\n- [reactor(開発環境構築)](https://docs.reactor.gg)\n  - [fork元？(Github)](https://github.com/TheOtherRolesAU/TheOtherRoles)\n- 今回の配信者や関連する配信者のチャンネルページ等\n\n### 注意\n（本稿では以下匿名とします）氏の作品を取得することができないため、作品のライセンスがGPLであるという根拠を確かめる事ができませんでした。\nそこで、私の手元で同じ（であろう）開発環境を構築する際に、特定のThe Other Rolesをforkする手順で実施したところGPLライセンスだったので、これを踏襲しているものと考えていきます。\n\n## そもそも、GPLライセンスとは？\n[超分かりやすいサイト(正しく知れば怖くない GPL ライセンスの特徴|yamaryさま)](https://yamory.io/blog/about-gpl-license/)を置いておきますが、GPLライセンスを使用するソフトウェアの場合はライセンステキストが同梱または案内されているため、そちらを必ず参照して理解してください。\n\n私からGPLライセンスの解説は今更やりません。\n\n## ライセンスを設定する意義とは？\n参考ページに分かりやすく書いていますが、GPLに限らず主要ライセンスについては「著作権があるプログラムのバグフィックスや拡張を第三者ができる権利」と考えると良いでしょう。\nたとえばQiitaの記事などで言えば、陳腐化してしまったり内容の誤りをコメントや編集リクエストを出されると思います。\nこれは指摘したユーザーが正しくても、記事自体の著作権は著作者が持っているため、良かれと思ってやった事が法的（著作権的）にマズかった、というケースにならないようにするため、あくまで提案でしかないわけです。\n提案を受けて著作者が記事を変更するも変更しないも、指摘したユーザーに意見する権利はありません。\nただし、いわゆる名誉毀損や誹謗中傷にあたると考えられる場合は、著作者だけでなく管理者（運営）に削除要請をする事ができます。\n\n### そのコードは記事？プログラム？\n問題をややこしくしているお話をもう一つ。\nサンプルコードとして取り扱ったコードがあった場合です。\n大体の場合は、取り扱いたいコードにライセンスがあればそちらを尊重し、その上で記事の著作者に帰属するという考え方ができそうです。\n（個別具体なケースが考えられるため、あえて濁してあります）\n\nこのように、執筆当時の著作権は言った言わない問題に近い性質があり、それぞれの善意や曖昧な判断に基づく事がしばしばあります。\nよく「ネットで拾ったソース」と気軽に表現していますが、そのソースは著作者が記事に書いたものであって、コード作成者が捨てたものではありません。\n\n#### 転載対策として\n悪魔のスクレイピング大流行時代で人様のサイトコンテンツを盗んだり盗まれたりしたアフィリエイト群雄割拠時代を生きてきたのでマジで言うんですが、こういう人に性善説を唱えても無駄です。見てすらいません。\n\nではどうするべきか？\nスクレイピング対策をする手もありますが、一般ユーザーの利便性を犠牲にする事は許容するしかありません。\nこれはマウスドラッグ・右クリック禁止スクリプトと同じ考え方ですが、一部の悪質なユーザーのために大多数の善良なユーザーにも負荷をかける事がWebサイト運営者として正しい姿なのでしょうか？\n取られない方法を頑張るより、取られた時に期待しない動作をさせた方がまだマシです。\n一番手っ取り早いのは`.htaccess`などでアクセス制御をする方法でしょうか。\n\nこの辺りは調べると結構な数でてきます。\nユーザーの利便性とコンテンツの安全性のどちらを優先するか考えながらサイト作成をしてください。\n\n#### 講師向け：「拾った」という言葉のイメージ\nそもそも「ネットで拾った」という表現自体が正しくないのかもしれません。\n\nマナー講師のようで気が引けるのですが、画像にしろコードにしろネットでダウンロードする事を「拾う」という表現は正しくないという意識づけを浸透させるしかないのかもしれません。\nこれは明らかな言葉狩りなので、教育の自由を奪う行為です。ご判断は各講師の方に委ねたいと思います。\n\n## 本題：ソフトウェアの取り扱い\n### Q. 一度公開し、既に利用者がいるプログラムを削除する事に問題があるか？\nA. ないです。\n\nライセンスのどこにもそんな規定はありませんが、特記事項等があればこの限りではありません。\n今回は著作者の判断によりソフトウェアの公開停止という形になりましたが、たとえば昔から開発しているソフトウェアが無期限の開発停止になったとして、誰が責められるのか？ということです。\n\nただし、やり方はあります。\n無償提供とはいえ、予告期間なく突然使用禁止にしたり非公開にしたり、というのは、現状使っているユーザーへの配慮がないなぁ、と感じてしまいます。\n私も開発者なので、自分が作ったものが意図しない使われ方をすると思うところはありますが、法に触れない限りは予告期間を設けるかなぁ…とは思います。\nただし、当事者ではなく第三者としての意見なので、そういう状況でなかった可能性もあります。\nリアルタイムに見ていないので、外から適当なこと（私が考える一般だと思う論）を言っています。\n\n### Q. 特定の利用者の利用を制限できるのか？\nA. できません。\nライセンス云々の前に、実際問題としてそんなことできますかね？\n\nたとえば、個人情報が流出したとして「流出した個人情報を取得しないでください」とお願いする事はできると思いますが、個人情報を取得できる状態にあるなら取得する人は絶対に出てきますよ。\n個人情報というと抵抗感は高いですが、たとえばNovelAIの学習モデルが流出した事件がありました。\n上記の個人情報をNovelAIの学習モデルに置き換えてみてください。これ絶対やってる人いるよね、って思いませんか？\nまた、リークの話とは無関係としても（本稿では著作権について言及したいので）NovelAIが学習したデータの著作権に問題があります。\nとはいえ、問題があるからといって制限は不可能です。あくまでお願いとなります。\n\n#### Q. 制限出来ないならやってもいい？\nA. トラブルを回避したいなら避けましょう。\n\nたとえば、流出した個人情報を取得してストレージになんて入れておいたら二次災害リスクや単純所持自体そのものがリスクになります。\n個人情報だと１件あたりは大した事ない金額ですが、データ数でいえば間違いなくビッグデータと言えるので、個人で賠償するのは不可能な金額です。\n流出時は重大な過失に該当するため、会社を倒産させて自己破産すればチャラになる、なんて事はないです。\n\nNovelAIのケースは扱いが微妙なのでどうなるか断言しにくいですが、NovelAI自体にも問題がある事を留意してください。\n私ならリスクがある以上は使わないです。\n\n### Q. 今回の騒動の問題点とは何か？\nA. （※）何もないです。\n\n何も問題はないんですが、マナーやモラルとしてどうなの？という点では疑問です。\nもしソフトウェアライセンスに「（※）お気持ち制度」が必要であれば、それを議論すればよいと思います。\nどこかに但し書き（契約など）でもない限りは、基本的に作者が公開したものを非公開にしたりする事に異議を唱える権利はありません。\n\nただし、問題ないからOKとならないのも現実です。\n冒頭で触れないと言いつつ若干触れてしまいますが、声が大きくなると正しさより（正しいか間違っているかは別にして）正義感が勝ってしまう事があるのもエコーチェンバー現象の恐ろしいところです。\nこの辺りは心理学の話になるのでこれ以上の言及は避けますが、対立する意見を受け入れられているか、自身を客観評価できているかは都度見直した方が良いかもしれません。\n\n[Twitterのポストから自身が染まっていないか確認できる方法があるようです。](https://torilab.sakura.ne.jp/twitter/echamber/index.html)\n\n## 生きにくいSNS時代を強く生きるメソッド例\n普段から意識して「自分と反対意見を出す人」を耐えられる量の精神毒として相手方の代表格をフォローする手もあります。\n分かりやすいところだとガノタなら連邦とジオンの両陣営だったり、きのことたけのこの両陣営だったり、vimとemacsなど色々です。\nガチ宗教の話もあるので踏み込むのがこわいですが、与党と野党（与党は党内でも左右に分かれており、意見を探すのが大変で、野党は党ごとに意見が統一されているが、各党で考え方が異なる）なんかは一番分かりやすく良い例だと個人的には思います。\n\n何が言いたいかというと、特定のどこかに染まるのではなくて、別の意見や見方ができる環境を自分で作りましょうというお話です。\n本稿ではGPLライセンスの扱いと著作権を主題に取り扱っていますが、他の意見が絶対あるはずなので、あなたが本稿に賛同でも反対でも違う人の考え方に触れてみてほしいと思います。\n\n## 次の記事\n- [(14日目) エンジニアが講師業を営んで学び得た哲学の話](https://qiita.com/nomurasan/items/7cff5b7816eb4d660a05)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-13T23:40:12+09:00",
        "group": null,
        "id": "b9ca1e0c5e4ec6b07bbc",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "ゲーム",
                "versions": []
            },
            {
                "name": "GPL",
                "versions": []
            },
            {
                "name": "著作権",
                "versions": []
            }
        ],
        "title": "ソフトウェア開発者目線で見る、among us界隈の問題にみるソフトウェアの取り扱い",
        "updated_at": "2022-12-15T09:02:17+09:00",
        "url": "https://qiita.com/nomurasan/items/b9ca1e0c5e4ec6b07bbc",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 562,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<h2 data-sourcepos=\"1:1-1:21\">\n<span id=\"言いたいこと\" class=\"fragment\"></span><a href=\"#%E8%A8%80%E3%81%84%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>言いたいこと</h2>\n<p data-sourcepos=\"2:1-2:161\">docsifyはindex.htmlなどをビルドする必要がなく、CDNで作れるので管理者じゃなくても(Github)Dependabotに怒られなくなります。</p>\n<h3 data-sourcepos=\"4:1-4:16\">\n<span id=\"導入方法\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>導入方法</h3>\n<p data-sourcepos=\"5:1-5:57\">あまりにも簡単なので、先に紹介します。</p>\n<ol data-sourcepos=\"7:1-10:0\">\n<li data-sourcepos=\"7:1-7:119\">\n<a href=\"https://docsify.js.org/#/quickstart?id=manual-initialization\" rel=\"nofollow noopener\" target=\"_blank\">クイックスタートのindex.html</a>を作成する</li>\n<li data-sourcepos=\"8:1-8:32\">\n<code>README.md</code>を普通に書く</li>\n<li data-sourcepos=\"9:1-10:0\">\n<code>index.html</code>を開く</li>\n</ol>\n<p data-sourcepos=\"11:1-11:103\">CDNの場合、動いているのはクライアントJavaScriptなのでlocalhostでも動きます。</p>\n<ul data-sourcepos=\"13:1-15:0\">\n<li data-sourcepos=\"13:1-15:0\">\n<a href=\"https://docsify.js.org/#/\" rel=\"nofollow noopener\" target=\"_blank\">公式ドキュメント</a>\n<ul data-sourcepos=\"14:3-15:0\">\n<li data-sourcepos=\"14:3-15:0\"><a href=\"https://yamachan.github.io/docsify-docs-ja/#/\" rel=\"nofollow noopener\" target=\"_blank\">有志による日本語ドキュメント</a></li>\n</ul>\n</li>\n</ul>\n<h2 data-sourcepos=\"16:1-16:9\">\n<span id=\"発端\" class=\"fragment\"></span><a href=\"#%E7%99%BA%E7%AB%AF\"><i class=\"fa fa-link\"></i></a>発端</h2>\n<p data-sourcepos=\"17:1-21:174\">node系に限らずですが、<code>package.json</code>のようなものをpushすると、Dependabotがアップデートの状況などを管理してくれてとてもありがたいです。<br>\nが、反面Github Actionsで回している環境とローカルで開発したnodeなどのバージョンやライブラリの状態によってはDependabotのプルリクを通した後に開発ができなくなる、なんて事がありました。<br>\n当たり前ですが、Dependabotがアップデートした内容に準拠して開発環境も最新化・統一するのが当然なのですが、技術要件が高すぎてスキル差があるチームだとたかがドキュメンテーションなのに、うまく動かなくて詰むなんて事も。<br>\n開発でもnodeでREADME関連もnodeでビルドしていると、何が干渉しているか分からないので、どのパッケージを切り離して簡略化するか判断が難しく、結局READMEを捨てる、なんて事もありました。<br>\n新卒研修ではドキュメンテーションも評価の対象である事もあり、これでは何のために開発をしているのか分からなくなります。</p>\n<p data-sourcepos=\"23:1-24:144\">docsifyはREADMEのビルド環境をすべてCDNに移管する事ができます。<br>\n私にとって（特に新卒研修などで受講生側が多少スキルがあるケース）にとっては神のようなツールです。</p>\n<h3 data-sourcepos=\"26:1-26:10\">\n<span id=\"懸念\" class=\"fragment\"></span><a href=\"#%E6%87%B8%E5%BF%B5\"><i class=\"fa fa-link\"></i></a>懸念</h3>\n<p data-sourcepos=\"27:1-28:24\">CDNもDependabotのように最新化されると動かなくなるケースというのは考えられます。<br>\n対応策としては、</p>\n<table data-sourcepos=\"30:1-35:381\">\n<thead>\n<tr data-sourcepos=\"30:1-30:25\">\n<th data-sourcepos=\"30:2-30:9\">手段</th>\n<th data-sourcepos=\"30:11-30:24\">検討事項</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"32:1-32:182\">\n<td data-sourcepos=\"32:2-32:48\">\n<code>docsify.js</code>をバックアップしておく</td>\n<td data-sourcepos=\"32:50-32:181\">開発でnodeを使うケースを想定していますが、npmなどに組み込まなければ開発環境を汚染しません</td>\n</tr>\n<tr data-sourcepos=\"33:1-33:146\">\n<td data-sourcepos=\"33:2-33:64\">docsifyを捨てて、異なるビルド環境を構築する</td>\n<td data-sourcepos=\"33:66-33:145\">今までのやり方に戻す案です。リスクは先述の通りです。</td>\n</tr>\n<tr data-sourcepos=\"34:1-34:304\">\n<td data-sourcepos=\"34:2-34:73\">\n<code>marked.js</code>を使う（index.htmlにmarkdownを書く・流し込む）</td>\n<td data-sourcepos=\"34:75-34:303\">環境を守りつつ代替方法としては優秀ですが、手間がかかります。<br>また、docsify同様、バージョンアップによって環境が破壊されるに可能性を考慮しておくべきです。</td>\n</tr>\n<tr data-sourcepos=\"35:1-35:381\">\n<td data-sourcepos=\"35:2-35:68\">GithubやGitLabなどの標準機能を使う(Git系ユーザー)</td>\n<td data-sourcepos=\"35:70-35:380\">多分これが一番ベストだと思います。資料を完全に内部向けと割り切るため、外部公開する場合は別のオープンリポジトリにdocsだけ移行すると良いでしょう。<br>Netlifyをはじめとしたホスティングサービスを使う方法もあります。</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"37:1-38:273\">などが考えられます。<br>\n（細かい事をいえば、Git系ユーザー向けの方法もサービスを使う以上、サービス側の追加機能や仕様変更の煽りは絶対に受けるハズですが、影響が大きすぎるのでやらないんじゃないかという願望です）</p>\n<h3 data-sourcepos=\"40:1-40:43\">\n<span id=\"ケースバイケースで見る対策\" class=\"fragment\"></span><a href=\"#%E3%82%B1%E3%83%BC%E3%82%B9%E3%83%90%E3%82%A4%E3%82%B1%E3%83%BC%E3%82%B9%E3%81%A7%E8%A6%8B%E3%82%8B%E5%AF%BE%E7%AD%96\"><i class=\"fa fa-link\"></i></a>ケースバイケースで見る対策</h3>\n<p data-sourcepos=\"41:1-44:263\">これだけいっぱい書いてますが、ぶっちゃけ開発で使う場合に気にすれば良いかなと思います。<br>\n特に作って後悔した後は投げっぱなしになる個人開発アプリを転職活動などで成果物として提出する場合です。<br>\nこの場合は、どうせ個人と開き直って、githubのオープンリポジトリあるいは採用者向けのprivateリポジトリを作って、そちらのREADMEだけを使うパターン（docsifyを使わない）が最も良いかと思います。<br>\n非エンジニア（あるいは、Not Githubユーザー)にとっては画面として若干見にくくなりますが、リポジトリ自体またはGithubアカウント自体をポートフォリオサイトとして位置付ける方法があります。</p>\n<p data-sourcepos=\"46:1-46:24\">有名どころだと、</p>\n<ul data-sourcepos=\"48:1-50:0\">\n<li data-sourcepos=\"48:1-48:91\">\n<code>(ユーザー名)/(ユーザー名)</code> のリポジトリは特殊リポジトリになる</li>\n<li data-sourcepos=\"49:1-50:0\">\n<code>(ユーザー名)/(ユーザー名).github.io</code> のリポジトリは、GithubPagesのルートになる</li>\n</ul>\n<p data-sourcepos=\"51:1-52:159\">ですね。<br>\nその他にも使い方はありそうな気がしますが、今も昔もググラビリティが壊滅的すぎて情報を集めるのが難しいです…</p>\n<h4 data-sourcepos=\"54:1-54:35\">\n<span id=\"研修時の判断について\" class=\"fragment\"></span><a href=\"#%E7%A0%94%E4%BF%AE%E6%99%82%E3%81%AE%E5%88%A4%E6%96%AD%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>研修時の判断について</h4>\n<p data-sourcepos=\"55:1-56:255\">新卒研修ぐらいの短い期間なら気にしなくて良いと思いますが、たとえば１年間指導するようなケース（個人指導・ITスクール事業社の個人向けパッケージなど）は、今回のケースが発生する可能性が高いと思います。<br>\n「ドキュメンテーションにリソースを使うべきではない」という観点から、導入時の最新版をバックアップしておき、CDNがダメになった場合に備えておくのが現実的な運用かなと思います。</p>\n<p data-sourcepos=\"58:1-60:162\">なお、ドキュメンテーションを採点しない場合はdocsify自体が不要です。<br>\n採点する場合は、githubのREADME.mdで評価するのは正しくなく、古い文化を継承しているクライアントの場合、ドキュメントページを印刷(.pdf)してレビューします。<br>\n（これはクライアントが古いのではなく、クライアントのエンドが古い体質である可能性も想定しておいてください。）</p>\n<h3 data-sourcepos=\"62:1-62:13\">\n<span id=\"考え方\" class=\"fragment\"></span><a href=\"#%E8%80%83%E3%81%88%E6%96%B9\"><i class=\"fa fa-link\"></i></a>考え方</h3>\n<p data-sourcepos=\"63:1-67:357\">ここで言いたいのは、docsifyに限らず現環境が壊れた際にリカバリーや代替手順が存在するか？という事です。<br>\nあるあるですが、Java研修などでEclipseを使って開発する場合は、Eclipse自体がしょっちゅう壊れます。<br>\n代替案としてJetBeansのIntellJ IDEA(Community Edition)などが挙げられますが、残念ながら運営側・講師ともにEclipseと比べると知見がないため採用される事はまずありませんでした。<br>\nEclipseもバニラで使うだけなら乗り換えも容易ですが、たとえばプラグインを入れたり（OJDBCとか)端末依存の設定をする場合は、IntellJ IDEAのどこを設定すればできるのか、手順（マニュアル）化してから受講生に配布し、確実に問題を起こさないようにするという担保が必要です。<br>\n実際問題として、研修パッケージの提案段階ではこの観点がスッポリ抜け落ちているんじゃないかと思われるため（disりたい訳ではなく、実情のお話をお伝えしています）、この辺りも含めて「障害発生時の対応」という括りで合意締結されているように思います。</p>\n<p data-sourcepos=\"69:1-69:118\">本稿では、上記観点も含めてdocsifyを採用するメリットを強調したくて執筆しています。</p>\n<h2 data-sourcepos=\"71:1-71:30\">\n<span id=\"q-docsifyはjamstackか\" class=\"fragment\"></span><a href=\"#q-docsify%E3%81%AFjamstack%E3%81%8B\"><i class=\"fa fa-link\"></i></a>Q. docsifyはJAMStackか？</h2>\n<p data-sourcepos=\"72:1-72:35\">A. JAMStackではありません。</p>\n<p data-sourcepos=\"74:1-79:100\">こんな事を気にする人はいないと思いますが、SSGっぽい使い方ができるので、これには言及しておいた方がいいかなと思いました。<br>\nまず、<code>index.html</code>などを生成しないため、SSGではありません。<br>\n<code>marked.js</code>は既に生成されている<code>index.html</code>内の内容を読み取ってmarkdownをhtmlタグなどに置き換えていますので、これも違います。<br>\nただし、これらは動的ページではありません（＝サーバーにリクエストがないため、高速ですがサイト内検索やコメント機能は別途作成する必要があります）<br>\nまた、静的CMSでもありません（＝docsifyにコンテンツ管理機能はありません）<br>\n強いていえば、markdownからhtml要素を生成して出力する膨大なJavaScriptです。</p>\n<p data-sourcepos=\"81:1-81:152\">ポートフォリオ等を作成する際に、JAMStackでなければならない要件であれば採用しないように注意してください。</p>\n<h2 data-sourcepos=\"83:1-83:52\">\n<span id=\"docsifyで静的cmsのような事をやりたい\" class=\"fragment\"></span><a href=\"#docsify%E3%81%A7%E9%9D%99%E7%9A%84cms%E3%81%AE%E3%82%88%E3%81%86%E3%81%AA%E4%BA%8B%E3%82%92%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Docsifyで静的CMSのような事をやりたい</h2>\n<p data-sourcepos=\"84:1-85:168\">現状だとCIを使ってwebhookをトリガーする方法でしょうか。<br>\n外部にCMSを置く事になるので、Doscifｙ自体は静的CMSにならないのが、質問への回答としてズレてしまうポイントになります。</p>\n<p data-sourcepos=\"87:1-88:281\">実はアドベントカレンダーの記事はすべて手前味噌のDocsifyに流し込んで仮運用しています。<br>\nQiitaの投稿のバックアップは取っていますが、これがmarkdown形式なので、後はdocsifyのルールに従ってファイルを配置していけば、（バニラだと）レイアウトこそ異なりますが、やりたい事自体はできています。</p>\n<p data-sourcepos=\"90:1-92:135\">ただし、qiitaの記法はdocsifyでは認識できないので、置換する仕組みは作る必要があります。<br>\nあるいは、運用対処としてqiita独自の記法を使わないのもありますね。<br>\n幸い、目次に関してはqiitaもdocsifyも独自機能でサポートされているので、ここの競合はありません。</p>\n<h2 data-sourcepos=\"94:1-94:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"95:1-96:88\">\n<li data-sourcepos=\"95:1-95:148\"><a href=\"https://qiita.com/nomurasan/items/1c690d8455a26aa22b8a\" id=\"reference-d126eeb294be39f4805a\">(12日目) 【LT】エンジニア目線で考える「サービスの質」を考える</a></li>\n<li data-sourcepos=\"96:1-96:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n",
        "body": "## 言いたいこと\ndocsifyはindex.htmlなどをビルドする必要がなく、CDNで作れるので管理者じゃなくても(Github)Dependabotに怒られなくなります。\n\n### 導入方法\nあまりにも簡単なので、先に紹介します。\n\n1. [クイックスタートのindex.html](https://docsify.js.org/#/quickstart?id=manual-initialization)を作成する\n1. `README.md`を普通に書く\n1. `index.html`を開く\n\nCDNの場合、動いているのはクライアントJavaScriptなのでlocalhostでも動きます。\n\n- [公式ドキュメント](https://docsify.js.org/#/)\n  - [有志による日本語ドキュメント](https://yamachan.github.io/docsify-docs-ja/#/)\n\n## 発端\nnode系に限らずですが、`package.json`のようなものをpushすると、Dependabotがアップデートの状況などを管理してくれてとてもありがたいです。\nが、反面Github Actionsで回している環境とローカルで開発したnodeなどのバージョンやライブラリの状態によってはDependabotのプルリクを通した後に開発ができなくなる、なんて事がありました。\n当たり前ですが、Dependabotがアップデートした内容に準拠して開発環境も最新化・統一するのが当然なのですが、技術要件が高すぎてスキル差があるチームだとたかがドキュメンテーションなのに、うまく動かなくて詰むなんて事も。\n開発でもnodeでREADME関連もnodeでビルドしていると、何が干渉しているか分からないので、どのパッケージを切り離して簡略化するか判断が難しく、結局READMEを捨てる、なんて事もありました。\n新卒研修ではドキュメンテーションも評価の対象である事もあり、これでは何のために開発をしているのか分からなくなります。\n\ndocsifyはREADMEのビルド環境をすべてCDNに移管する事ができます。\n私にとって（特に新卒研修などで受講生側が多少スキルがあるケース）にとっては神のようなツールです。\n\n### 懸念\nCDNもDependabotのように最新化されると動かなくなるケースというのは考えられます。\n対応策としては、\n\n| 手段 | 検討事項 |\n| --- | --- |\n| `docsify.js`をバックアップしておく | 開発でnodeを使うケースを想定していますが、npmなどに組み込まなければ開発環境を汚染しません |\n| docsifyを捨てて、異なるビルド環境を構築する | 今までのやり方に戻す案です。リスクは先述の通りです。 |\n|`marked.js`を使う（index.htmlにmarkdownを書く・流し込む） | 環境を守りつつ代替方法としては優秀ですが、手間がかかります。<br>また、docsify同様、バージョンアップによって環境が破壊されるに可能性を考慮しておくべきです。 |\n| GithubやGitLabなどの標準機能を使う(Git系ユーザー) | 多分これが一番ベストだと思います。資料を完全に内部向けと割り切るため、外部公開する場合は別のオープンリポジトリにdocsだけ移行すると良いでしょう。<br>Netlifyをはじめとしたホスティングサービスを使う方法もあります。 |\n\nなどが考えられます。\n（細かい事をいえば、Git系ユーザー向けの方法もサービスを使う以上、サービス側の追加機能や仕様変更の煽りは絶対に受けるハズですが、影響が大きすぎるのでやらないんじゃないかという願望です）\n\n### ケースバイケースで見る対策\nこれだけいっぱい書いてますが、ぶっちゃけ開発で使う場合に気にすれば良いかなと思います。\n特に作って後悔した後は投げっぱなしになる個人開発アプリを転職活動などで成果物として提出する場合です。\nこの場合は、どうせ個人と開き直って、githubのオープンリポジトリあるいは採用者向けのprivateリポジトリを作って、そちらのREADMEだけを使うパターン（docsifyを使わない）が最も良いかと思います。\n非エンジニア（あるいは、Not Githubユーザー)にとっては画面として若干見にくくなりますが、リポジトリ自体またはGithubアカウント自体をポートフォリオサイトとして位置付ける方法があります。\n\n有名どころだと、\n\n- `(ユーザー名)/(ユーザー名)` のリポジトリは特殊リポジトリになる\n- `(ユーザー名)/(ユーザー名).github.io` のリポジトリは、GithubPagesのルートになる\n\nですね。\nその他にも使い方はありそうな気がしますが、今も昔もググラビリティが壊滅的すぎて情報を集めるのが難しいです…\n\n#### 研修時の判断について\n新卒研修ぐらいの短い期間なら気にしなくて良いと思いますが、たとえば１年間指導するようなケース（個人指導・ITスクール事業社の個人向けパッケージなど）は、今回のケースが発生する可能性が高いと思います。\n「ドキュメンテーションにリソースを使うべきではない」という観点から、導入時の最新版をバックアップしておき、CDNがダメになった場合に備えておくのが現実的な運用かなと思います。\n\nなお、ドキュメンテーションを採点しない場合はdocsify自体が不要です。\n採点する場合は、githubのREADME.mdで評価するのは正しくなく、古い文化を継承しているクライアントの場合、ドキュメントページを印刷(.pdf)してレビューします。\n（これはクライアントが古いのではなく、クライアントのエンドが古い体質である可能性も想定しておいてください。）\n\n### 考え方\nここで言いたいのは、docsifyに限らず現環境が壊れた際にリカバリーや代替手順が存在するか？という事です。\nあるあるですが、Java研修などでEclipseを使って開発する場合は、Eclipse自体がしょっちゅう壊れます。\n代替案としてJetBeansのIntellJ IDEA(Community Edition)などが挙げられますが、残念ながら運営側・講師ともにEclipseと比べると知見がないため採用される事はまずありませんでした。\nEclipseもバニラで使うだけなら乗り換えも容易ですが、たとえばプラグインを入れたり（OJDBCとか)端末依存の設定をする場合は、IntellJ IDEAのどこを設定すればできるのか、手順（マニュアル）化してから受講生に配布し、確実に問題を起こさないようにするという担保が必要です。\n実際問題として、研修パッケージの提案段階ではこの観点がスッポリ抜け落ちているんじゃないかと思われるため（disりたい訳ではなく、実情のお話をお伝えしています）、この辺りも含めて「障害発生時の対応」という括りで合意締結されているように思います。\n\n本稿では、上記観点も含めてdocsifyを採用するメリットを強調したくて執筆しています。\n\n## Q. docsifyはJAMStackか？\nA. JAMStackではありません。\n\nこんな事を気にする人はいないと思いますが、SSGっぽい使い方ができるので、これには言及しておいた方がいいかなと思いました。\nまず、`index.html`などを生成しないため、SSGではありません。\n`marked.js`は既に生成されている`index.html`内の内容を読み取ってmarkdownをhtmlタグなどに置き換えていますので、これも違います。\nただし、これらは動的ページではありません（＝サーバーにリクエストがないため、高速ですがサイト内検索やコメント機能は別途作成する必要があります）\nまた、静的CMSでもありません（＝docsifyにコンテンツ管理機能はありません）\n強いていえば、markdownからhtml要素を生成して出力する膨大なJavaScriptです。\n\nポートフォリオ等を作成する際に、JAMStackでなければならない要件であれば採用しないように注意してください。\n\n## Docsifyで静的CMSのような事をやりたい\n現状だとCIを使ってwebhookをトリガーする方法でしょうか。\n外部にCMSを置く事になるので、Doscifｙ自体は静的CMSにならないのが、質問への回答としてズレてしまうポイントになります。\n\n実はアドベントカレンダーの記事はすべて手前味噌のDocsifyに流し込んで仮運用しています。\nQiitaの投稿のバックアップは取っていますが、これがmarkdown形式なので、後はdocsifyのルールに従ってファイルを配置していけば、（バニラだと）レイアウトこそ異なりますが、やりたい事自体はできています。\n\nただし、qiitaの記法はdocsifyでは認識できないので、置換する仕組みは作る必要があります。\nあるいは、運用対処としてqiita独自の記法を使わないのもありますね。\n幸い、目次に関してはqiitaもdocsifyも独自機能でサポートされているので、ここの競合はありません。\n\n## 次の記事\n- [(12日目) 【LT】エンジニア目線で考える「サービスの質」を考える](https://qiita.com/nomurasan/items/1c690d8455a26aa22b8a)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-11T19:42:09+09:00",
        "group": null,
        "id": "676503670a68b53952ff",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "ドキュメント",
                "versions": []
            },
            {
                "name": "Readme",
                "versions": []
            },
            {
                "name": "docsify",
                "versions": []
            }
        ],
        "title": "README.md書いてますか？ドキュメンテーションを強化する「docsify」の紹介",
        "updated_at": "2022-12-13T23:29:02+09:00",
        "url": "https://qiita.com/nomurasan/items/676503670a68b53952ff",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 542,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<h2 data-sourcepos=\"1:1-1:27\">\n<span id=\"お詫び注意喚起\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E8%A9%AB%E3%81%B3%E6%B3%A8%E6%84%8F%E5%96%9A%E8%B5%B7\"><i class=\"fa fa-link\"></i></a>お詫び・注意喚起</h2>\n<p data-sourcepos=\"2:1-3:201\">設定ミスって投稿が遅れました。<br>\n前日に記事を書くボタンから記事作成　→　当日に非公開設定で投稿しても、アドベントカレンダー側には関連付けがされないためご注意ください。</p>\n<h2 data-sourcepos=\"5:1-5:15\">\n<span id=\"対象読者\" class=\"fragment\"></span><a href=\"#%E5%AF%BE%E8%B1%A1%E8%AA%AD%E8%80%85\"><i class=\"fa fa-link\"></i></a>対象読者</h2>\n<div data-sourcepos=\"6:1-9:3\" class=\"note alert\">\n<span class=\"fa fa-fw fa-times-circle\"></span><div>\n<p data-sourcepos=\"7:1-8:96\">業務で絶対に使用しないようにしてください<br>\nまた、業務で使用する端末（リモートワーク含む）への導入は厳禁です</p>\n</div>\n</div>\n<div data-sourcepos=\"11:1-17:3\" class=\"note warn\">\n<span class=\"fa fa-fw fa-exclamation-circle\"></span><div>\n<p data-sourcepos=\"12:1-12:105\">本稿は内容が過激であるため、以下の通り制限している旨を周知いたします。</p>\n<ul data-sourcepos=\"14:1-16:140\">\n<li data-sourcepos=\"14:1-14:89\">セキュリティリスクを学びたい方（＝本稿の作業はやらない方）</li>\n<li data-sourcepos=\"15:1-15:155\">本稿の内容または類似したもので作業を実施した際は自己責任で行え、かつ関連記事の投稿者に責任追及しない方</li>\n<li data-sourcepos=\"16:1-16:140\">本稿の以下を閲覧した時点で、注意書きの全内容を理解し同意したとみなし、これに異議を唱えない方</li>\n</ul>\n</div>\n</div>\n<p data-sourcepos=\"19:1-20:261\">以降、筆者は上記に該当しない方の閲覧を想定せず書き進めますので、上記にご理解をいただけない場合はブラウザバックをしていただけますか。<br>\n非常に強くお伝えしていますが、本稿の内容を実施する事は重大なインシデントになったり使用した事により不利益が生じる可能性が高い内容であるため、以降でも注意喚起を続けていきます。</p>\n<hr data-sourcepos=\"22:1-23:0\">\n<hr data-sourcepos=\"24:1-25:0\">\n<div data-sourcepos=\"26:1-29:3\" class=\"note alert\">\n<span class=\"fa fa-fw fa-times-circle\"></span><div>\n<p data-sourcepos=\"27:1-28:63\">注意書きをよく読みよく理解し、同意できない場合は閲覧できません。<br>\n閲覧された時点で同意したものとみなします。</p>\n</div>\n</div>\n<hr data-sourcepos=\"31:1-32:0\">\n<hr data-sourcepos=\"33:1-34:0\">\n<h2 data-sourcepos=\"35:1-35:30\">\n<span id=\"結論個人ならアリ\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E8%AB%96%E5%80%8B%E4%BA%BA%E3%81%AA%E3%82%89%E3%82%A2%E3%83%AA\"><i class=\"fa fa-link\"></i></a>結論：個人ならアリ</h2>\n<p data-sourcepos=\"36:1-37:124\">スマホの破損や機種変に怯えることがなくなったのは大きいです！<br>\nauthのsaveファイル自体もクラウドバックアップを取っておけばPCの機種変にも対応できます。</p>\n<p data-sourcepos=\"39:1-41:156\">ただし、持ち運びしやすいシンクライアントPCからアクセスできる状態にすると危険がすぎるので、運用時には細心の注意を払う必要があります。<br>\nリスクとしては、ノートパソコンならスマホを落とす等紛失した時並のリスクがありますが、紛失率は持ち運びできないPCはほぼ０％（盗難リスクは一様にあります）と考える事ができるのもポイントです。<br>\nこれはスマホに限る話ではありませんが、リモート接続などで見えてしまうヒューマンエラーのリスクはあります。</p>\n<h2 data-sourcepos=\"43:1-43:91\">\n<span id=\"二段階authを使って家族共用のパソコンでアカウントを強固に守る\" class=\"fragment\"></span><a href=\"#%E4%BA%8C%E6%AE%B5%E9%9A%8Eauth%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E5%AE%B6%E6%97%8F%E5%85%B1%E7%94%A8%E3%81%AE%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3%E3%81%A7%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%82%92%E5%BC%B7%E5%9B%BA%E3%81%AB%E5%AE%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>二段階Authを使って家族共用のパソコンでアカウントを強固に守る</h2>\n<p data-sourcepos=\"44:1-45:231\">家族分のログインアカウントを発行して、それぞれが任意で使えるようにする方がまだマシな気がします。<br>\nが、家族共用のアカウントを使っており、既に思い思いの設定など（学校の勉強用やライセンス）が入ってしまったため、アカウントを分けられないケースを想定します。</p>\n<div data-sourcepos=\"47:1-49:3\" class=\"note warn\">\n<span class=\"fa fa-fw fa-exclamation-circle\"></span><div>\n<p data-sourcepos=\"48:1-48:132\">流出リスクや漏洩した際の二次災害を低減するためにも、複数人で運用するべきではありません。</p>\n</div>\n</div>\n<h3 data-sourcepos=\"51:1-51:59\">\n<span id=\"家族全員分のauthをアプリで一括管理する\" class=\"fragment\"></span><a href=\"#%E5%AE%B6%E6%97%8F%E5%85%A8%E5%93%A1%E5%88%86%E3%81%AEauth%E3%82%92%E3%82%A2%E3%83%97%E3%83%AA%E3%81%A7%E4%B8%80%E6%8B%AC%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>家族全員分のauthをアプリで一括管理する</h3>\n<p data-sourcepos=\"52:1-53:90\">「機種変更の手続きが面倒くさいからPCに移行して管理しよう」という趣旨には合っていますが、セキュリティを犠牲にしたくないという要件は満たせません。<br>\nセキュリティ要件が本当に必要がないのか、再度検討しましょう。</p>\n<p data-sourcepos=\"55:1-58:198\">セキュリティ・運用面に問題がないなら実施してみます。<br>\nセキュリティ要件もある場合、共有アカウントの環境を変えるわけにはいかないので、新しく認証用アカウントを新たに追加して、そちらで認証させる案です。<br>\n夫婦共有で子供たちに伝えないものとして、よくあるのが結婚記念日＋子供の名前の組み合わせとかでしょうか。<br>\nしかし、結婚記念日自体はカレンダーに登録してしまっていたり等すると聡いお子さんならパターンから推測して解析する事ができてしまいます。</p>\n<p data-sourcepos=\"60:1-63:174\">とはいえ、うまく運用できたとしても認証用のアカウントに切り替えてauthコードを発行するのは正直手間です。<br>\n普段使いしている共有アカウントにauthアプリを入れると家族全員が使えるので、ログインして欲しくないアカウントもログインできるようになります。<br>\nあるいは、こういったアカウントを使いたい場合は、これらのアカウントのみPCのauthアプリには入れず、個別で使用している端末に入れるのが良いでしょう。<br>\nもちろん、本来の趣旨である機種変更や唐突な破損に対するリカバリーはなくなりますので、管理には十分に注意してください。</p>\n<h3 data-sourcepos=\"65:1-65:55\">\n<span id=\"家庭内不和で生じるインシデント対策\" class=\"fragment\"></span><a href=\"#%E5%AE%B6%E5%BA%AD%E5%86%85%E4%B8%8D%E5%92%8C%E3%81%A7%E7%94%9F%E3%81%98%E3%82%8B%E3%82%A4%E3%83%B3%E3%82%B7%E3%83%87%E3%83%B3%E3%83%88%E5%AF%BE%E7%AD%96\"><i class=\"fa fa-link\"></i></a>家庭内不和で生じるインシデント対策</h3>\n<p data-sourcepos=\"66:1-66:87\">セキュリティの話ではなく、運用の話として捉えてほしいです。</p>\n<p data-sourcepos=\"68:1-71:234\">複数人で運用する場合は内部犯対策を検討しなければなりません。<br>\n特に子供（中学生～実家暮らし）は知識をつけても善悪の判断や責任能力は弱いままなので、たとえばゲーム等で課金制限（お小遣いなどの制裁）に対する反発として、現状運用中のauthを削除するという暴挙に出る事が考えられます。<br>\n認証システムに慣れている成人なら、auth認証を削除するという事がどういう事か想像できますが、彼らに想像させるのも、出来たとしてどういうリスクが考えられるのかを予測させるのは不可能だと考えたほうが良いです。<br>\n（私見ですが、私も親の立場なので子供のことは信じてあげたいですが、家族のプロジェクトマネージャーという観点で言えば、高すぎるリスクを許容する事ができません）</p>\n<p data-sourcepos=\"73:1-75:117\">authではないですが、こういった大事なものを管理する時に採用されがちなのが、家族で一番権限を持つ人だけが使用できるようにするとかですね。<br>\nauthでも同様に管理する必要がありますが、ライフイベント後（単身赴任・独り立ちなど）でも他の家族が使えるように移行とバックアップはしっかりやりましょう。<br>\nここで作業をミスすると使いたい時に使えない、なんて事も起こりえますので慎重に。</p>\n<h2 data-sourcepos=\"77:1-77:12\">\n<span id=\"やり方\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E6%96%B9\"><i class=\"fa fa-link\"></i></a>やり方</h2>\n<div data-sourcepos=\"78:1-81:3\" class=\"note warn\">\n<span class=\"fa fa-fw fa-exclamation-circle\"></span><div>\n<p data-sourcepos=\"79:1-80:108\">メリデメをしっかり理解してもらった上で、やり方の話をしていきます。<br>\nヒューマンエラーがどうとかセキュリティリスクについて、以降は無視します。</p>\n</div>\n</div>\n<p data-sourcepos=\"83:1-84:21\">今回はwinauthを採用します。<br>\n技術的要件は、</p>\n<ul data-sourcepos=\"86:1-88:0\">\n<li data-sourcepos=\"86:1-86:21\">windows機である</li>\n<li data-sourcepos=\"87:1-88:0\">サードパーティーを入れられる</li>\n</ul>\n<p data-sourcepos=\"89:1-90:234\">winauthを入れられる要件はこれだけです（執筆時点）<br>\n将来的にwinauthが使えなくなる可能性はありますが、代替アプリが出てくるとかOSをアップデートしないなどの対応を検討する必要がある事は認識しておくべきかと思います。</p>\n<h2 data-sourcepos=\"92:1-92:12\">\n<span id=\"使い方\" class=\"fragment\"></span><a href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\"><i class=\"fa fa-link\"></i></a>使い方</h2>\n<p data-sourcepos=\"93:1-95:145\">起動したらaddで登録したいauthenticationを入れてください。<br>\n種類が色々ありますが、winauthのアイコンが変わるぐらいでどれでも一緒です。<br>\n多少登録が楽になるぐらいでしょうか。私はAuthenticatorしか使っていませんが、きちんと運用できています。</p>\n<p data-sourcepos=\"97:1-99:88\">試しにgoogleなり、普段使っている2FAを何か入れてみてください。<br>\nただし、過去に登録している情報は削除（更新）される可能性が高いため、既に運用中のものを登録する場合は注意してください。<br>\n私が確認した、複数のauthを入れられるものだとamazonでしょうか。</p>\n<h2 data-sourcepos=\"101:1-101:21\">\n<span id=\"バックアップ\" class=\"fragment\"></span><a href=\"#%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97\"><i class=\"fa fa-link\"></i></a>バックアップ</h2>\n<p data-sourcepos=\"102:1-103:168\">winauthだと２つの方法があります。<br>\nどちらも内容は平文なので、端末を超えてバックアップする場合（クラウドストレージなど）は管理方法に注意しましょう。</p>\n<h3 data-sourcepos=\"105:1-105:19\">\n<span id=\"exportを使う\" class=\"fragment\"></span><a href=\"#export%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>Exportを使う</h3>\n<p data-sourcepos=\"106:1-107:135\">addで登録したデータをExportする事で、別の環境でImportして内容を復元できます。<br>\nImportのデフォルトがxmlで、Exportするファイルはtxtなので、拡張子はしっかり確認しておきましょう。</p>\n<h3 data-sourcepos=\"109:1-109:86\">\n<span id=\"winauthの保存ファイルappdataroamingwinauthwinauthxmlを使う\" class=\"fragment\"></span><a href=\"#winauth%E3%81%AE%E4%BF%9D%E5%AD%98%E3%83%95%E3%82%A1%E3%82%A4%E3%83%ABappdataroamingwinauthwinauthxml%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>WinAuthの保存ファイル（<code>%AppData%\\Roaming\\WinAuth\\winauth.xml</code>）を使う</h3>\n<p data-sourcepos=\"110:1-111:36\">winauth.exeを実行した後の設定ファイルをそのまま使い回す案です。<br>\nこちらの方が確実ですね。</p>\n<h2 data-sourcepos=\"113:1-113:26\">\n<span id=\"mac向け他の方法\" class=\"fragment\"></span><a href=\"#mac%E5%90%91%E3%81%91%E4%BB%96%E3%81%AE%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>(Mac向け)他の方法</h2>\n<p data-sourcepos=\"114:1-120:69\">従来の方法ではスマホアプリのauthenticatorを入れているはずです。<br>\nということは、PCにスマホアプリを入れられるスマート端末エミュレーターがあれば同じことができます。<br>\n私が使っている中で手っ取り早く環境を作れたのはBlueStacksとかNoxPlayerとかでしょうか。<br>\n「スマホゲーム　PC」あたりで検索すると情報が多いです。<br>\nポイントは、「ガチャゲーをPCで遊ぶ」というアプローチの情報が多い事です。<br>\n開発目的だと途端に情報がなくなったり、難しくなったりします。<br>\nこの辺りのググラビリティは課題なんでしょうか？</p>\n<p data-sourcepos=\"122:1-124:131\">エミュレーターの入れ方は本稿では取り扱わないですが、スマホのエミュレーターのauthenticatorでもしっかり認証されます。<br>\nタイトルが「AuthをPCだけで完結させる方法」なので、この方法もアリとしましたが、Windows以外だとほぼこれしか方法がありません。<br>\nMacなどからWindowsにリモート接続して、Windows上のアプリを起動するという方法もなくはないです。</p>\n<p data-sourcepos=\"126:1-127:87\">これも実際にやってみたんですが、認証するためにエミュレーター起動してパスコード通して（これは省略可）アプリ立ち上げてコード開ける…という作業をやる事になります。<br>\n私は面倒くさくなって採用して一週間も経たずに廃止しました…</p>\n<p data-sourcepos=\"129:1-130:78\">ここで言いたいのは、運用に耐えるかどうかは別として、出来ないこともないです。<br>\nただし、おま環で上手くいかない可能性も考えられます。</p>\n<h2 data-sourcepos=\"132:1-132:12\">\n<span id=\"リスク\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%82%B9%E3%82%AF\"><i class=\"fa fa-link\"></i></a>リスク</h2>\n<p data-sourcepos=\"133:1-133:127\">実機・エミュレーター・winauthのいずれのパターンでも、以下に留意しておく必要があります。</p>\n<ul data-sourcepos=\"135:1-139:0\">\n<li data-sourcepos=\"135:1-135:97\">【エミュレーター】アプリやエミュレーターのOSのサポートが失効する</li>\n<li data-sourcepos=\"136:1-136:110\">【エミュレーター】エミュレーター自体のバージョンアップで互換性が消失する</li>\n<li data-sourcepos=\"137:1-137:73\">OSなどシステムアップデートでアプリが使えなくなる</li>\n<li data-sourcepos=\"138:1-139:0\">物理的にデバイスが故障する</li>\n</ul>\n<p data-sourcepos=\"140:1-141:147\">と言った場合のトラブルの保証は誰にもできません。<br>\n特に実機でトラブルが発生した場合に、authenticator関連の保証はgoogleやAppleにはできない事を留意しましょう。</p>\n<h2 data-sourcepos=\"143:1-143:57\">\n<span id=\"authをpcだけで完結させる方法とメリデメ\" class=\"fragment\"></span><a href=\"#auth%E3%82%92pc%E3%81%A0%E3%81%91%E3%81%A7%E5%AE%8C%E7%B5%90%E3%81%95%E3%81%9B%E3%82%8B%E6%96%B9%E6%B3%95%E3%81%A8%E3%83%A1%E3%83%AA%E3%83%87%E3%83%A1\"><i class=\"fa fa-link\"></i></a>AuthをPCだけで完結させる方法とメリデメ</h2>\n<p data-sourcepos=\"144:1-146:192\">セキュリティリスクを厚めに、運用リスクにも少々言及しました。<br>\n特に実機の障害リスクについては普段意識しにくい部分（記憶に新しいものだと、KDDIの通信障害など）なので、防災訓練ではないですが定期的にリスクの見直しをする機会を作るのが良いでしょう。<br>\nエンジニアには少ないと思いますが、たとえば外勤で社内システムにアクセスする（専用アプリを開いて入力があるなど）業務の場合は特に。</p>\n<p data-sourcepos=\"148:1-149:423\">少し難しい話ですが、SREまたはセールスエンジニアの方は、障害発生時の対応について保守業務または契約の提案ができると営業にありがたがられる傾向があります（実体験）<br>\n直近だと、Authは関係ないのですが講師業に従事している際にクライアントPCの環境トラブルが発生した際に現場で対応するのか、あるいはサポートチームに対応を引き継げるのかだけでも心理的負荷がかなり違うので、研修パッケージを提供されている方は教室運営の体制構築の際はぜひご検討いただきたいです。</p>\n<p data-sourcepos=\"151:1-151:162\">こういった障害を予測して対策する、という考え方は本稿の内容のみに限らず、業務のあらゆるシーンで活用できます。</p>\n<h2 data-sourcepos=\"153:1-153:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"154:1-155:88\">\n<li data-sourcepos=\"154:1-154:168\"><a href=\"https://qiita.com/nomurasan/items/676503670a68b53952ff\" id=\"reference-d3dd7ca166ae90243606\">(11日目) README.md書いてますか？ドキュメンテーションを強化する「docsify」の紹介</a></li>\n<li data-sourcepos=\"155:1-155:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n",
        "body": "## お詫び・注意喚起\n設定ミスって投稿が遅れました。\n前日に記事を書くボタンから記事作成　→　当日に非公開設定で投稿しても、アドベントカレンダー側には関連付けがされないためご注意ください。\n\n## 対象読者\n:::note alert \n業務で絶対に使用しないようにしてください\nまた、業務で使用する端末（リモートワーク含む）への導入は厳禁です\n:::\n\n:::note warn\n本稿は内容が過激であるため、以下の通り制限している旨を周知いたします。\n\n- セキュリティリスクを学びたい方（＝本稿の作業はやらない方）\n- 本稿の内容または類似したもので作業を実施した際は自己責任で行え、かつ関連記事の投稿者に責任追及しない方\n- 本稿の以下を閲覧した時点で、注意書きの全内容を理解し同意したとみなし、これに異議を唱えない方\n:::\n\n以降、筆者は上記に該当しない方の閲覧を想定せず書き進めますので、上記にご理解をいただけない場合はブラウザバックをしていただけますか。\n非常に強くお伝えしていますが、本稿の内容を実施する事は重大なインシデントになったり使用した事により不利益が生じる可能性が高い内容であるため、以降でも注意喚起を続けていきます。\n\n---\n\n---\n\n:::note alert\n注意書きをよく読みよく理解し、同意できない場合は閲覧できません。\n閲覧された時点で同意したものとみなします。\n:::\n\n---\n\n---\n\n## 結論：個人ならアリ\nスマホの破損や機種変に怯えることがなくなったのは大きいです！\nauthのsaveファイル自体もクラウドバックアップを取っておけばPCの機種変にも対応できます。\n\nただし、持ち運びしやすいシンクライアントPCからアクセスできる状態にすると危険がすぎるので、運用時には細心の注意を払う必要があります。\nリスクとしては、ノートパソコンならスマホを落とす等紛失した時並のリスクがありますが、紛失率は持ち運びできないPCはほぼ０％（盗難リスクは一様にあります）と考える事ができるのもポイントです。\nこれはスマホに限る話ではありませんが、リモート接続などで見えてしまうヒューマンエラーのリスクはあります。\n\n## 二段階Authを使って家族共用のパソコンでアカウントを強固に守る\n家族分のログインアカウントを発行して、それぞれが任意で使えるようにする方がまだマシな気がします。\nが、家族共用のアカウントを使っており、既に思い思いの設定など（学校の勉強用やライセンス）が入ってしまったため、アカウントを分けられないケースを想定します。\n\n:::note warn\n流出リスクや漏洩した際の二次災害を低減するためにも、複数人で運用するべきではありません。\n:::\n\n### 家族全員分のauthをアプリで一括管理する\n「機種変更の手続きが面倒くさいからPCに移行して管理しよう」という趣旨には合っていますが、セキュリティを犠牲にしたくないという要件は満たせません。\nセキュリティ要件が本当に必要がないのか、再度検討しましょう。\n\nセキュリティ・運用面に問題がないなら実施してみます。\nセキュリティ要件もある場合、共有アカウントの環境を変えるわけにはいかないので、新しく認証用アカウントを新たに追加して、そちらで認証させる案です。\n夫婦共有で子供たちに伝えないものとして、よくあるのが結婚記念日＋子供の名前の組み合わせとかでしょうか。\nしかし、結婚記念日自体はカレンダーに登録してしまっていたり等すると聡いお子さんならパターンから推測して解析する事ができてしまいます。\n\nとはいえ、うまく運用できたとしても認証用のアカウントに切り替えてauthコードを発行するのは正直手間です。\n普段使いしている共有アカウントにauthアプリを入れると家族全員が使えるので、ログインして欲しくないアカウントもログインできるようになります。\nあるいは、こういったアカウントを使いたい場合は、これらのアカウントのみPCのauthアプリには入れず、個別で使用している端末に入れるのが良いでしょう。\nもちろん、本来の趣旨である機種変更や唐突な破損に対するリカバリーはなくなりますので、管理には十分に注意してください。\n\n### 家庭内不和で生じるインシデント対策\nセキュリティの話ではなく、運用の話として捉えてほしいです。\n\n複数人で運用する場合は内部犯対策を検討しなければなりません。\n特に子供（中学生～実家暮らし）は知識をつけても善悪の判断や責任能力は弱いままなので、たとえばゲーム等で課金制限（お小遣いなどの制裁）に対する反発として、現状運用中のauthを削除するという暴挙に出る事が考えられます。\n認証システムに慣れている成人なら、auth認証を削除するという事がどういう事か想像できますが、彼らに想像させるのも、出来たとしてどういうリスクが考えられるのかを予測させるのは不可能だと考えたほうが良いです。\n（私見ですが、私も親の立場なので子供のことは信じてあげたいですが、家族のプロジェクトマネージャーという観点で言えば、高すぎるリスクを許容する事ができません）\n\nauthではないですが、こういった大事なものを管理する時に採用されがちなのが、家族で一番権限を持つ人だけが使用できるようにするとかですね。\nauthでも同様に管理する必要がありますが、ライフイベント後（単身赴任・独り立ちなど）でも他の家族が使えるように移行とバックアップはしっかりやりましょう。\nここで作業をミスすると使いたい時に使えない、なんて事も起こりえますので慎重に。\n\n## やり方\n:::note warn\nメリデメをしっかり理解してもらった上で、やり方の話をしていきます。\nヒューマンエラーがどうとかセキュリティリスクについて、以降は無視します。\n:::\n\n今回はwinauthを採用します。\n技術的要件は、\n\n- windows機である\n- サードパーティーを入れられる\n\nwinauthを入れられる要件はこれだけです（執筆時点）\n将来的にwinauthが使えなくなる可能性はありますが、代替アプリが出てくるとかOSをアップデートしないなどの対応を検討する必要がある事は認識しておくべきかと思います。\n\n## 使い方\n起動したらaddで登録したいauthenticationを入れてください。\n種類が色々ありますが、winauthのアイコンが変わるぐらいでどれでも一緒です。\n多少登録が楽になるぐらいでしょうか。私はAuthenticatorしか使っていませんが、きちんと運用できています。\n\n試しにgoogleなり、普段使っている2FAを何か入れてみてください。\nただし、過去に登録している情報は削除（更新）される可能性が高いため、既に運用中のものを登録する場合は注意してください。\n私が確認した、複数のauthを入れられるものだとamazonでしょうか。\n\n## バックアップ\nwinauthだと２つの方法があります。\nどちらも内容は平文なので、端末を超えてバックアップする場合（クラウドストレージなど）は管理方法に注意しましょう。\n\n### Exportを使う\naddで登録したデータをExportする事で、別の環境でImportして内容を復元できます。\nImportのデフォルトがxmlで、Exportするファイルはtxtなので、拡張子はしっかり確認しておきましょう。\n\n### WinAuthの保存ファイル（`%AppData%\\Roaming\\WinAuth\\winauth.xml`）を使う\nwinauth.exeを実行した後の設定ファイルをそのまま使い回す案です。\nこちらの方が確実ですね。\n\n## (Mac向け)他の方法\n従来の方法ではスマホアプリのauthenticatorを入れているはずです。\nということは、PCにスマホアプリを入れられるスマート端末エミュレーターがあれば同じことができます。\n私が使っている中で手っ取り早く環境を作れたのはBlueStacksとかNoxPlayerとかでしょうか。\n「スマホゲーム　PC」あたりで検索すると情報が多いです。\nポイントは、「ガチャゲーをPCで遊ぶ」というアプローチの情報が多い事です。\n開発目的だと途端に情報がなくなったり、難しくなったりします。\nこの辺りのググラビリティは課題なんでしょうか？\n\nエミュレーターの入れ方は本稿では取り扱わないですが、スマホのエミュレーターのauthenticatorでもしっかり認証されます。\nタイトルが「AuthをPCだけで完結させる方法」なので、この方法もアリとしましたが、Windows以外だとほぼこれしか方法がありません。\nMacなどからWindowsにリモート接続して、Windows上のアプリを起動するという方法もなくはないです。\n\nこれも実際にやってみたんですが、認証するためにエミュレーター起動してパスコード通して（これは省略可）アプリ立ち上げてコード開ける…という作業をやる事になります。\n私は面倒くさくなって採用して一週間も経たずに廃止しました…\n\nここで言いたいのは、運用に耐えるかどうかは別として、出来ないこともないです。\nただし、おま環で上手くいかない可能性も考えられます。\n\n## リスク\n実機・エミュレーター・winauthのいずれのパターンでも、以下に留意しておく必要があります。\n\n- 【エミュレーター】アプリやエミュレーターのOSのサポートが失効する\n- 【エミュレーター】エミュレーター自体のバージョンアップで互換性が消失する\n- OSなどシステムアップデートでアプリが使えなくなる\n- 物理的にデバイスが故障する\n\nと言った場合のトラブルの保証は誰にもできません。\n特に実機でトラブルが発生した場合に、authenticator関連の保証はgoogleやAppleにはできない事を留意しましょう。\n\n## AuthをPCだけで完結させる方法とメリデメ\nセキュリティリスクを厚めに、運用リスクにも少々言及しました。\n特に実機の障害リスクについては普段意識しにくい部分（記憶に新しいものだと、KDDIの通信障害など）なので、防災訓練ではないですが定期的にリスクの見直しをする機会を作るのが良いでしょう。\nエンジニアには少ないと思いますが、たとえば外勤で社内システムにアクセスする（専用アプリを開いて入力があるなど）業務の場合は特に。\n\n少し難しい話ですが、SREまたはセールスエンジニアの方は、障害発生時の対応について保守業務または契約の提案ができると営業にありがたがられる傾向があります（実体験）\n直近だと、Authは関係ないのですが講師業に従事している際にクライアントPCの環境トラブルが発生した際に現場で対応するのか、あるいはサポートチームに対応を引き継げるのかだけでも心理的負荷がかなり違うので、研修パッケージを提供されている方は教室運営の体制構築の際はぜひご検討いただきたいです。\n\nこういった障害を予測して対策する、という考え方は本稿の内容のみに限らず、業務のあらゆるシーンで活用できます。\n\n## 次の記事\n- [(11日目) README.md書いてますか？ドキュメンテーションを強化する「docsify」の紹介](https://qiita.com/nomurasan/items/676503670a68b53952ff)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-10T02:20:07+09:00",
        "group": null,
        "id": "e7bb03c717793a7c8b70",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "Windows",
                "versions": []
            },
            {
                "name": "authentication",
                "versions": []
            },
            {
                "name": "認証",
                "versions": []
            },
            {
                "name": "スマホレス",
                "versions": []
            }
        ],
        "title": "AuthをPCだけで完結させる方法とメリデメ",
        "updated_at": "2022-12-11T19:42:16+09:00",
        "url": "https://qiita.com/nomurasan/items/e7bb03c717793a7c8b70",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 972,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<p data-sourcepos=\"1:1-2:84\">※当然ですが個人差があります。<br>\n採用できそうな部分をつまみ食いして活用してみてください。</p>\n<h2 data-sourcepos=\"4:1-4:15\">\n<span id=\"対象読者\" class=\"fragment\"></span><a href=\"#%E5%AF%BE%E8%B1%A1%E8%AA%AD%E8%80%85\"><i class=\"fa fa-link\"></i></a>対象読者</h2>\n<ul data-sourcepos=\"5:1-6:0\">\n<li data-sourcepos=\"5:1-6:0\">在宅ワークが苦しい方（職業不問）</li>\n</ul>\n<p data-sourcepos=\"7:1-7:149\">ここでは、<strong>「私が」</strong> 在宅を続けられる案件と、同じく <strong>「私が」</strong> 続けにくい案件の例を挙げていきます。</p>\n<h2 data-sourcepos=\"9:1-9:51\">\n<span id=\"q-なぜ在宅ワークは続かないのか\" class=\"fragment\"></span><a href=\"#q-%E3%81%AA%E3%81%9C%E5%9C%A8%E5%AE%85%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AF%E7%B6%9A%E3%81%8B%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>Q. なぜ在宅ワークは続かないのか？</h2>\n<div data-sourcepos=\"10:1-12:3\" class=\"note info\">\n<span class=\"fa fa-fw fa-check-circle\"></span><div>\n<p data-sourcepos=\"11:1-11:84\">A. 楽しくない仕事の抑圧から中途半端に開放されたからです。</p>\n</div>\n</div>\n<p data-sourcepos=\"14:1-16:150\">身も蓋もないですが、これに尽きます。<br>\n業務に楽しさを見出すのはとても大変ですが、業務の辛さをなくす方がもっと大変です。<br>\n「辛いけど楽しい」を求められれば解決の糸口が見えそうだな、と思える事が問題解決への第一歩になります。</p>\n<h2 data-sourcepos=\"18:1-18:39\">\n<span id=\"やり甲斐のある仕事とは\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E7%94%B2%E6%96%90%E3%81%AE%E3%81%82%E3%82%8B%E4%BB%95%E4%BA%8B%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>やり甲斐のある仕事とは？</h2>\n<p data-sourcepos=\"19:1-20:171\">そもそも何にやり甲斐を求めるのか、は人によって異なります。<br>\nこれで終わってしまったらアドバイスも何もあったもんじゃないですが、イイ話をする前に改めて認識しておいてほしいです。</p>\n<p data-sourcepos=\"22:1-22:75\">まずは今の仕事を選んだ理由を思い出してみましょう。</p>\n<p data-sourcepos=\"24:1-29:135\">小さい頃に目指していた事でしょうか。<br>\n時給（単価）が高いからでしょうか。<br>\nラクだからでしょうか。<br>\n他の理由もあると思います。<br>\nここでは、自分に素直に思い出してみてください。<br>\n「たまたま、なんとなく」という理由の中に、他とは違うマイナスな理由が合ったかも知れません。</p>\n<p data-sourcepos=\"31:1-35:54\">次に、今の状態は当時考えていた事は満たせていますか？<br>\n満たせていれば、物足りなさを感じていませんか？<br>\nあるいは、次の目標が見つかっていますか？<br>\n満たせていなければ、今の現場で目標は満たせそうですか？<br>\nまた、やりたい事の相談はできますか？</p>\n<p data-sourcepos=\"37:1-39:36\">他にも、今の状態は当時考えていた事以外に問題が発生していませんか？<br>\n対人で気疲れしていませんか？<br>\n相談できる方はいますか？</p>\n<p data-sourcepos=\"41:1-43:123\">達成感を感じる事はできていますか？<br>\n一つ一つのタスク（チケット）レベルでは難しいかも知れませんが、数をこなしていった時や他のメンバーが作成した機能などをマージした時に、プロジェクトがゴールに向かっている実感はありますか？<br>\n他のメンバー、あるいは自身で作成した機能を組み込んで動いた際に感動を覚えませんか？</p>\n<p data-sourcepos=\"45:1-45:126\">その他にも、大小問わずやり甲斐を感じられる瞬間を見つけることができているでしょうか。</p>\n<p data-sourcepos=\"47:1-47:90\">ここまでは、リモートだろうがオンサイトだろうが変わりません。</p>\n<h3 data-sourcepos=\"49:1-49:76\">\n<span id=\"なぜリモートだとモチベーションが上がらないのか\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%81%9C%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%81%A0%E3%81%A8%E3%83%A2%E3%83%81%E3%83%99%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C%E4%B8%8A%E3%81%8C%E3%82%89%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>なぜリモートだとモチベーションが上がらないのか？</h3>\n<p data-sourcepos=\"50:1-50:204\">上記の問題を抱えた状態だと「モチベーションが上がらない」のではなく「（出社以上に）モチベーションが下がってしまう」のが問題だと考えます。</p>\n<p data-sourcepos=\"52:1-55:270\">まず、モチベーション管理でよくある「オフィスと自宅では監視の目が違う」という意見もありますが、一人で黙々と作業を進めるという環境に慣れていないからではないかと思います。<br>\n自宅には目に見える範囲で、周りも業務をしているので自分も業務をしようという空気感がないのです。<br>\n自己管理の問題と言えばその通りですが、仕事モードを会社に作ってもらっていたという点では出社のメリットはあるのかも知れません。<br>\n会社員の方もですが、フリーランスの方も自宅では仕事にならない方はいるので（セキュリティ面などを考慮すると推奨できませんが）カフェなどの場所に活動場所を移すなどで対応されている事も。</p>\n<p data-sourcepos=\"57:1-59:207\">出社するのは面倒だけど、会社じゃないと嫌という二律背反があります。<br>\n突き詰めると哲学の話になりそうなので掘り下げるのが難しい（出来ない）のですが、出社を楽しみに転化できるようになれば問題は解決できます。<br>\n問題は、出社を楽しみに転化するのが難しい（状況によっては不可能）ので、結果としてモチベーションが上がらない状態で業務を続ける事になります。</p>\n<p data-sourcepos=\"61:1-61:234\">リモートワークだからモチベーションが上がらないのではなく「業務環境に問題があるのでモチベーションが出社以上に下げ止まらない」という問題が生じてしまうのです。</p>\n<h3 data-sourcepos=\"63:1-63:34\">\n<span id=\"極端な選択肢提案\" class=\"fragment\"></span><a href=\"#%E6%A5%B5%E7%AB%AF%E3%81%AA%E9%81%B8%E6%8A%9E%E8%82%A2%E6%8F%90%E6%A1%88\"><i class=\"fa fa-link\"></i></a>極端な選択肢（提案）</h3>\n<p data-sourcepos=\"64:1-66:234\">どうしても現状を受け入れられないなら、転職も一考の余地があります。<br>\nただし、転職すれば解決できるか？というと上記の問題が転職先でも起こった時にまた転職しますか？というワケにはいかないですよね。<br>\n転職の話をする前に在宅ワークが続かない理由を２軸でお話した理由は、簡単に転職して解決する問題なのか、転職先でも再発する問題なのか見極める必要があるからです。</p>\n<p data-sourcepos=\"68:1-69:123\">見方を変えると、現状の業務環境をあと何年続けられるか？という点も見つめていきましょう。<br>\n現職で環境を変えられるならベター、やむなく転職して環境を変える事も候補になります。</p>\n<h2 data-sourcepos=\"71:1-71:18\">\n<span id=\"勉強の場合\" class=\"fragment\"></span><a href=\"#%E5%8B%89%E5%BC%B7%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>勉強の場合</h2>\n<p data-sourcepos=\"72:1-73:93\">勉強も同じです。<br>\n独学だとモチベーションが続かない方も多いのではないでしょうか？</p>\n<p data-sourcepos=\"75:1-78:210\">勉強会などでも「もくもく会」という場所があります。<br>\nもくもく会とは、多様な方々が似たような、あるいは全く絡まない目標を立てて課題に取り組む場です。<br>\nたとえば10人が参加したとして、各自でプログラミングの勉強をする事もあれば似たような内容だと同志が出来たりするので、他人と一緒に頑張る環境あるいは自分がやっている事を披露（相談）できる場とも言えます。<br>\nもくもく会は、他者の作業を妨害する事にならないよう配慮しながらコミュニケーションができれば、独学より高いシナジーが得られる可能性があります。</p>\n<p data-sourcepos=\"80:1-80:225\">もくもく会で業務をやる事も出来なくはないですが、場所によっては全体向けに進捗発表をする事もあるので、サクッと話せる内容を作る必要はあるかもしれません。</p>\n<h3 data-sourcepos=\"82:1-82:58\">\n<span id=\"そもそも論なんのための勉強ですか\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82%E8%AB%96%E3%81%AA%E3%82%93%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E5%8B%89%E5%BC%B7%E3%81%A7%E3%81%99%E3%81%8B\"><i class=\"fa fa-link\"></i></a>そもそも論：なんのための勉強ですか？</h3>\n<p data-sourcepos=\"83:1-85:93\">私はイメージできないのですが、新しく勉強しようとしているものにモチベーションが上がらないというのが分からないです。<br>\n勉強についてはリモートだからモチベーションが上がらない、というよりは何のための勉強か、本人も分かっていないのではないかと思います。<br>\n独学が続かなくなる事は往々にしてあるので、それなら分かります。</p>\n<h2 data-sourcepos=\"87:1-87:39\">\n<span id=\"私のモチベーション管理例\" class=\"fragment\"></span><a href=\"#%E7%A7%81%E3%81%AE%E3%83%A2%E3%83%81%E3%83%99%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>私のモチベーション管理例</h2>\n<p data-sourcepos=\"88:1-88:99\">まず、全く参考にできない方の方が多いと思いますが、書いていきます。</p>\n<p data-sourcepos=\"90:1-96:153\">小学生の頃からパソコンにしがみついて生きてきたので、パソコンの前でずっと座り続けられる体勢と精神が出来上がっていたんですよね。<br>\nまた、パソコンは仕事や勉強をするツールではなく、ゲームを起動するためのハードなのでカテゴリーとしてはゲーム機だと認識しています。<br>\nNintendo SwitchやPSシリーズと同じものなのです。<br>\n誤解を恐れずに言えば「ゲーム機でプログラムを書いたりシステムを組んだりAIを作ったり記事を書いたりしている」と無意識で考えているように思います。<br>\nその代わり、パソコンの前から離れたり、ましてや外出する事にとても強い抵抗感があります。<br>\nいきなりアニメの話で恐縮ですが、無職転生でいう「前世の男」のような生活に抵抗がないどころか、羨ましさすら感じています。<br>\nそして、昔は引きこもっていた事もあり、今でも何度か「引きこもりの頃に戻りたいな」と本気で思っています。</p>\n<p data-sourcepos=\"98:1-99:234\">そのため、出社に激しい抵抗はあれど、リモートワークを苦しいと思ったことがないのです。<br>\nただし、例外的にリモートワークになったからと言って状況確認と称してガンガン電話やメッセージを飛ばしてくる環境には辟易して私から更新をお断りした事はあります。</p>\n<p data-sourcepos=\"101:1-102:228\">こういうスペックなので、人に話すと「筋金入りの引きこもり」だと言われます。<br>\nこんな人間でもスピーカーとして登壇したり、後進育成のために教鞭を取ったり（しかも、講師業もプログラミング並に自分に合っていると感じています）しています。</p>\n<p data-sourcepos=\"104:1-105:390\">今日は、こんな人間がリモートワークのモチベーション管理を語っているので、論拠不明や的外れな議論をしている可能性はあります。<br>\nとはいえ、数多くの受講生からテーマの相談を受けて、個別にモチベーションコントロールを考えてトライアンドエラーを提案し、何人かからアドバイスが刺さって改善されたとのお声もいただいていますので、もしかしたら読者のどなたかの核心をつけるのではないか？と思っています。</p>\n<p data-sourcepos=\"107:1-107:105\">本稿があなたのリモートワーク生活の改善にお役立ちできることを祈ります。</p>\n<h2 data-sourcepos=\"109:1-109:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"110:1-111:88\">\n<li data-sourcepos=\"110:1-110:125\"><a href=\"https://qiita.com/nomurasan/items/e7bb03c717793a7c8b70\" id=\"reference-a55b1c3c4bb37c279cb4\">(10日目) AuthをPCだけで完結させる方法とメリデメ</a></li>\n<li data-sourcepos=\"111:1-111:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n",
        "body": "※当然ですが個人差があります。\n採用できそうな部分をつまみ食いして活用してみてください。\n\n## 対象読者\n- 在宅ワークが苦しい方（職業不問）\n\nここでは、**「私が」** 在宅を続けられる案件と、同じく **「私が」** 続けにくい案件の例を挙げていきます。\n\n## Q. なぜ在宅ワークは続かないのか？\n:::note info\nA. 楽しくない仕事の抑圧から中途半端に開放されたからです。\n:::\n\n身も蓋もないですが、これに尽きます。\n業務に楽しさを見出すのはとても大変ですが、業務の辛さをなくす方がもっと大変です。\n「辛いけど楽しい」を求められれば解決の糸口が見えそうだな、と思える事が問題解決への第一歩になります。\n\n## やり甲斐のある仕事とは？\nそもそも何にやり甲斐を求めるのか、は人によって異なります。\nこれで終わってしまったらアドバイスも何もあったもんじゃないですが、イイ話をする前に改めて認識しておいてほしいです。\n\nまずは今の仕事を選んだ理由を思い出してみましょう。\n\n小さい頃に目指していた事でしょうか。\n時給（単価）が高いからでしょうか。\nラクだからでしょうか。\n他の理由もあると思います。\nここでは、自分に素直に思い出してみてください。\n「たまたま、なんとなく」という理由の中に、他とは違うマイナスな理由が合ったかも知れません。\n\n次に、今の状態は当時考えていた事は満たせていますか？\n満たせていれば、物足りなさを感じていませんか？\nあるいは、次の目標が見つかっていますか？\n満たせていなければ、今の現場で目標は満たせそうですか？\nまた、やりたい事の相談はできますか？\n\n他にも、今の状態は当時考えていた事以外に問題が発生していませんか？\n対人で気疲れしていませんか？\n相談できる方はいますか？\n\n達成感を感じる事はできていますか？\n一つ一つのタスク（チケット）レベルでは難しいかも知れませんが、数をこなしていった時や他のメンバーが作成した機能などをマージした時に、プロジェクトがゴールに向かっている実感はありますか？\n他のメンバー、あるいは自身で作成した機能を組み込んで動いた際に感動を覚えませんか？\n\nその他にも、大小問わずやり甲斐を感じられる瞬間を見つけることができているでしょうか。\n\nここまでは、リモートだろうがオンサイトだろうが変わりません。\n\n### なぜリモートだとモチベーションが上がらないのか？\n上記の問題を抱えた状態だと「モチベーションが上がらない」のではなく「（出社以上に）モチベーションが下がってしまう」のが問題だと考えます。\n\nまず、モチベーション管理でよくある「オフィスと自宅では監視の目が違う」という意見もありますが、一人で黙々と作業を進めるという環境に慣れていないからではないかと思います。\n自宅には目に見える範囲で、周りも業務をしているので自分も業務をしようという空気感がないのです。\n自己管理の問題と言えばその通りですが、仕事モードを会社に作ってもらっていたという点では出社のメリットはあるのかも知れません。\n会社員の方もですが、フリーランスの方も自宅では仕事にならない方はいるので（セキュリティ面などを考慮すると推奨できませんが）カフェなどの場所に活動場所を移すなどで対応されている事も。\n\n出社するのは面倒だけど、会社じゃないと嫌という二律背反があります。\n突き詰めると哲学の話になりそうなので掘り下げるのが難しい（出来ない）のですが、出社を楽しみに転化できるようになれば問題は解決できます。\n問題は、出社を楽しみに転化するのが難しい（状況によっては不可能）ので、結果としてモチベーションが上がらない状態で業務を続ける事になります。\n\nリモートワークだからモチベーションが上がらないのではなく「業務環境に問題があるのでモチベーションが出社以上に下げ止まらない」という問題が生じてしまうのです。\n\n### 極端な選択肢（提案）\nどうしても現状を受け入れられないなら、転職も一考の余地があります。\nただし、転職すれば解決できるか？というと上記の問題が転職先でも起こった時にまた転職しますか？というワケにはいかないですよね。\n転職の話をする前に在宅ワークが続かない理由を２軸でお話した理由は、簡単に転職して解決する問題なのか、転職先でも再発する問題なのか見極める必要があるからです。\n\n見方を変えると、現状の業務環境をあと何年続けられるか？という点も見つめていきましょう。\n現職で環境を変えられるならベター、やむなく転職して環境を変える事も候補になります。\n\n## 勉強の場合\n勉強も同じです。\n独学だとモチベーションが続かない方も多いのではないでしょうか？\n\n勉強会などでも「もくもく会」という場所があります。\nもくもく会とは、多様な方々が似たような、あるいは全く絡まない目標を立てて課題に取り組む場です。\nたとえば10人が参加したとして、各自でプログラミングの勉強をする事もあれば似たような内容だと同志が出来たりするので、他人と一緒に頑張る環境あるいは自分がやっている事を披露（相談）できる場とも言えます。\nもくもく会は、他者の作業を妨害する事にならないよう配慮しながらコミュニケーションができれば、独学より高いシナジーが得られる可能性があります。\n\nもくもく会で業務をやる事も出来なくはないですが、場所によっては全体向けに進捗発表をする事もあるので、サクッと話せる内容を作る必要はあるかもしれません。\n\n### そもそも論：なんのための勉強ですか？\n私はイメージできないのですが、新しく勉強しようとしているものにモチベーションが上がらないというのが分からないです。\n勉強についてはリモートだからモチベーションが上がらない、というよりは何のための勉強か、本人も分かっていないのではないかと思います。\n独学が続かなくなる事は往々にしてあるので、それなら分かります。\n\n## 私のモチベーション管理例\nまず、全く参考にできない方の方が多いと思いますが、書いていきます。\n\n小学生の頃からパソコンにしがみついて生きてきたので、パソコンの前でずっと座り続けられる体勢と精神が出来上がっていたんですよね。\nまた、パソコンは仕事や勉強をするツールではなく、ゲームを起動するためのハードなのでカテゴリーとしてはゲーム機だと認識しています。\nNintendo SwitchやPSシリーズと同じものなのです。\n誤解を恐れずに言えば「ゲーム機でプログラムを書いたりシステムを組んだりAIを作ったり記事を書いたりしている」と無意識で考えているように思います。\nその代わり、パソコンの前から離れたり、ましてや外出する事にとても強い抵抗感があります。\nいきなりアニメの話で恐縮ですが、無職転生でいう「前世の男」のような生活に抵抗がないどころか、羨ましさすら感じています。\nそして、昔は引きこもっていた事もあり、今でも何度か「引きこもりの頃に戻りたいな」と本気で思っています。\n\nそのため、出社に激しい抵抗はあれど、リモートワークを苦しいと思ったことがないのです。\nただし、例外的にリモートワークになったからと言って状況確認と称してガンガン電話やメッセージを飛ばしてくる環境には辟易して私から更新をお断りした事はあります。\n\nこういうスペックなので、人に話すと「筋金入りの引きこもり」だと言われます。\nこんな人間でもスピーカーとして登壇したり、後進育成のために教鞭を取ったり（しかも、講師業もプログラミング並に自分に合っていると感じています）しています。\n\n今日は、こんな人間がリモートワークのモチベーション管理を語っているので、論拠不明や的外れな議論をしている可能性はあります。\nとはいえ、数多くの受講生からテーマの相談を受けて、個別にモチベーションコントロールを考えてトライアンドエラーを提案し、何人かからアドバイスが刺さって改善されたとのお声もいただいていますので、もしかしたら読者のどなたかの核心をつけるのではないか？と思っています。\n\n本稿があなたのリモートワーク生活の改善にお役立ちできることを祈ります。\n\n## 次の記事\n- [(10日目) AuthをPCだけで完結させる方法とメリデメ](https://qiita.com/nomurasan/items/e7bb03c717793a7c8b70)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-07T21:04:45+09:00",
        "group": null,
        "id": "1ab798e5794cc4b29b65",
        "likes_count": 1,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "勉強メモ",
                "versions": []
            },
            {
                "name": "リモートワーク",
                "versions": []
            },
            {
                "name": "フリーランス",
                "versions": []
            },
            {
                "name": "モチベーション",
                "versions": []
            },
            {
                "name": "独学",
                "versions": []
            }
        ],
        "title": "在宅フリーランスの仕事・勉強へのモチベーション管理例",
        "updated_at": "2022-12-10T02:21:12+09:00",
        "url": "https://qiita.com/nomurasan/items/1ab798e5794cc4b29b65",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 600,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<h2 data-sourcepos=\"1:1-1:15\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n<p data-sourcepos=\"2:1-4:39\">本稿はアウトプットの仕方の話です。<br>\nアウトプットする内容については、既に決まっているか書きながら考えるかしているという前提なので、本稿では触れません。<br>\nなお、トンチを利かせるなら</p>\n<ol data-sourcepos=\"6:1-10:0\">\n<li data-sourcepos=\"6:1-6:27\">アカウントを作る</li>\n<li data-sourcepos=\"7:1-7:33\">投稿するボタンを押す</li>\n<li data-sourcepos=\"8:1-8:27\">必須項目を埋める</li>\n<li data-sourcepos=\"9:1-10:0\">Qiitaに投稿</li>\n</ol>\n<p data-sourcepos=\"11:1-12:45\">とすると記事を書いて投稿したことになります。<br>\n本稿ではこういう話はしません。</p>\n<h2 data-sourcepos=\"14:1-14:60\">\n<span id=\"プログラミングに関係ない記事なのでは\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%AB%E9%96%A2%E4%BF%82%E3%81%AA%E3%81%84%E8%A8%98%E4%BA%8B%E3%81%AA%E3%81%AE%E3%81%A7%E3%81%AF\"><i class=\"fa fa-link\"></i></a>プログラミングに関係ない記事なのでは？</h2>\n<p data-sourcepos=\"15:1-15:54\">エンジニアのスキルアップの方法の一つ</p>\n<h2 data-sourcepos=\"17:1-17:39\">\n<span id=\"記事をどうやって書くか\" class=\"fragment\"></span><a href=\"#%E8%A8%98%E4%BA%8B%E3%82%92%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E6%9B%B8%E3%81%8F%E3%81%8B\"><i class=\"fa fa-link\"></i></a>記事をどうやって書くか？</h2>\n<p data-sourcepos=\"18:1-19:198\">まずはクオリティを気にせず、書きたいことだけを書いてしまいましょう。<br>\nといっても、書きたい事とは？というところから始めるべきだと思ったので、最もシンプルなアウトプットを記事っぽくする方法を見ていきます。</p>\n<h3 data-sourcepos=\"21:1-21:43\">\n<span id=\"最もシンプルなアウトプット\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E3%82%82%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AA%E3%82%A2%E3%82%A6%E3%83%88%E3%83%97%E3%83%83%E3%83%88\"><i class=\"fa fa-link\"></i></a>最もシンプルなアウトプット</h3>\n<p data-sourcepos=\"22:1-24:96\">一番初めに言ってしまいますが、学びをアウトプットするのに一番手っ取り早いのは箇条書きです。<br>\nたとえば座学など勉強会で参加していた時に、テキストがあればテキストから書き出したり、登壇者（スピーカー）の発言や要約を書き取っていると思います。<br>\nこれをある程度フォーマットを整備してはめ込んでいくイメージです。</p>\n<h3 data-sourcepos=\"26:1-26:43\">\n<span id=\"最もシンプルな記事の書き方\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E3%82%82%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AA%E8%A8%98%E4%BA%8B%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9\"><i class=\"fa fa-link\"></i></a>最もシンプルな記事の書き方</h3>\n<p data-sourcepos=\"27:1-28:57\">箇条書きにした内容に意見や考察を交えて、口語体または文語文で締めてみましょう。<br>\nそれっぽい感じになっていくと思います。</p>\n<h2 data-sourcepos=\"30:1-30:30\">\n<span id=\"どんな記事を書くか\" class=\"fragment\"></span><a href=\"#%E3%81%A9%E3%82%93%E3%81%AA%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%8F%E3%81%8B\"><i class=\"fa fa-link\"></i></a>どんな記事を書くか</h2>\n<p data-sourcepos=\"31:1-32:108\">再度言及しますが、記事の内容の話は本稿では触れません。<br>\n書くことは決めているけど、どんな記事にするか（育てるか）というお話です。</p>\n<p data-sourcepos=\"34:1-36:147\">が、例がないと分かりにくいので、本稿ではこの記事を使っていきます。<br>\n具体的には、ライブライティングしていきます。リアルタイムに考えている事を無編集で書いていくのですが、その様子をお見せできないのが残念です。<br>\nライブ動画で配信した方が良かったかな、とも思いますが、これやるとしたら別記事で来年になりますね…。</p>\n<h3 data-sourcepos=\"38:1-38:37\">\n<span id=\"記事を書く目的を考える\" class=\"fragment\"></span><a href=\"#%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%8F%E7%9B%AE%E7%9A%84%E3%82%92%E8%80%83%E3%81%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>記事を書く目的を考える</h3>\n<p data-sourcepos=\"39:1-41:108\">備忘録を残したいとか、オンラインストレージの要領で使っていくなら深く考える必要もないです。<br>\n思いのままに書いてみてください。<br>\nタイトルの付け方は、ご自身のラベリングに合わせて設定すると良いでしょう。</p>\n<p data-sourcepos=\"43:1-46:63\">問題は、読んでほしい記事を書く場合。<br>\n率直に言えば、記事の内容よりタイトルや宣伝を吟味した方が良いです。<br>\n極端に言えば、本文ナシの記事をいくつか作ってタイトルだけ変えてアクセス数の多かった記事から書きます。<br>\nこれが最も効率よく記事を読ませる方法です。</p>\n<p data-sourcepos=\"48:1-49:45\">なので、記事を読んでほしい場合は記事の内容を考える必要はありません。<br>\nそのため、以降では除外します。</p>\n<h3 data-sourcepos=\"51:1-51:73\">\n<span id=\"読んでほしい記事を読ませる書き方を考える前に\" class=\"fragment\"></span><a href=\"#%E8%AA%AD%E3%82%93%E3%81%A7%E3%81%BB%E3%81%97%E3%81%84%E8%A8%98%E4%BA%8B%E3%82%92%E8%AA%AD%E3%81%BE%E3%81%9B%E3%82%8B%E6%9B%B8%E3%81%8D%E6%96%B9%E3%82%92%E8%80%83%E3%81%88%E3%82%8B%E5%89%8D%E3%81%AB\"><i class=\"fa fa-link\"></i></a>読んでほしい記事を読ませる書き方、を考える前に</h3>\n<p data-sourcepos=\"52:1-55:123\">ようやく本題です。<br>\nが、実はここにも罠が潜んでいますので、解剖していきましょう。<br>\n大事なことなので繰り返しになりますが、良いコンテンツを書くのは、タイトルや宣伝で手堅く集客できる方法を見つけてから本文を書くことです。<br>\n記事を読んでほしい、ファンを獲得したいという部分にフォーカスしてお話していきます。</p>\n<p data-sourcepos=\"57:1-60:135\">「ファンを獲得する」という点に絞ると、実はこれも記事を書く必要はありません。<br>\n今の御時世、記事を書くよりは動画サイトに投稿した方がよっぽどマシです。<br>\n乱暴に言えば、動かない絵と聞こえない音、音声への字幕が存在しない無名の人の発信には価値はありません。<br>\nつまり、私のこれらの発言は「読ませる」という観点においてほとんど価値がないことになります。</p>\n<p data-sourcepos=\"62:1-63:153\">ただし、これは「ファンを獲得する」という点に絞った場合の話です。<br>\n獲得したファンにより主張や意見を丁寧に伝える事を目的にした場合は、ようやく文字で書く利点がでてきます。</p>\n<h3 data-sourcepos=\"65:1-65:46\">\n<span id=\"なぜ記事を読んでほしいのか\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%81%9C%E8%A8%98%E4%BA%8B%E3%82%92%E8%AA%AD%E3%82%93%E3%81%A7%E3%81%BB%E3%81%97%E3%81%84%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>なぜ記事を読んでほしいのか？</h3>\n<p data-sourcepos=\"66:1-70:66\">記事を書く時に「なぜ記事を読んでほしいのか？」と考えて記事を書いていますか？<br>\n最もシンプルに記事を書く事を考えた時に、なぜか抜け落ちている事が多い観点でした（私調べ）<br>\nこれが無いことには方針を立てられません。記事を完成させることはできますが、結局のところ何を言っているか分からなくなります。<br>\n私も、１日寝かせて脳を休ませた後にセルフレビューを挟まないと支離滅裂だったり主張が行方不明になったりしがちです。<br>\nすなわち、品質の低い記事になってしまいます。</p>\n<p data-sourcepos=\"72:1-74:249\">以下、どういう目的なら何を気にしなければならないか、の例を挙げます。<br>\nただし、全て内容についてはウソや間違っているものは書いていないと仮定します。<br>\nどういう場合でもウソは書くべきではない（特にアフィリエイトは実害が発生します）し、間違っている場合（内容的にも、誤字誤変換など）はすぐに修正できる状態にしておきます。</p>\n<p data-sourcepos=\"76:1-79:168\">アフィリエイトなら記事の品質より生産性を重視するのでこれでいいです。<br>\n１記事いくらで作るので、いちいち推敲やレビューなんてやってられません。<br>\n収益化システムにユーザー導線がしっかり作られていれば、ぶっちゃけ中身なんて何でもいいです。<br>\nその代わり、収益性が高い記事の導線を徹底的に解剖・研究していく事になります。記事を書くより面倒くさいし大変です。</p>\n<p data-sourcepos=\"81:1-83:163\">ファンを固定化するなら、ユーザーの感情を揺さぶる演出や表現が出来ているか、記事の構成が起承転結（序破急）をしっかりと守れているかに着目すれば良いです。<br>\n文章以外に絵を多く取り入れてユーザーの視線を動かして面白さや見ごたえが重要なので、内容より表現です。<br>\n寄稿文書を書く場合などは、これを意識するとプロフィールページ（おすすめはTwitter）に飛んでもらいやすくなります。</p>\n<p data-sourcepos=\"85:1-87:78\">内容を気にしなければならないのは論文や文書などです。<br>\nエンジニアがドキュメント化・ナレッジ化を考える場合はここに該当します。<br>\nおそらく、今回のメインコンテンツになるかと思います。</p>\n<h3 data-sourcepos=\"89:1-89:55\">\n<span id=\"内容を熟慮すべき記事の目的を考える\" class=\"fragment\"></span><a href=\"#%E5%86%85%E5%AE%B9%E3%82%92%E7%86%9F%E6%85%AE%E3%81%99%E3%81%B9%E3%81%8D%E8%A8%98%E4%BA%8B%E3%81%AE%E7%9B%AE%E7%9A%84%E3%82%92%E8%80%83%E3%81%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>内容を熟慮すべき記事の目的を考える</h3>\n<p data-sourcepos=\"90:1-90:33\">もう一度振り返ります。</p>\n<ul data-sourcepos=\"92:1-94:0\">\n<li data-sourcepos=\"92:1-92:35\">記事を書く目的は何か？</li>\n<li data-sourcepos=\"93:1-94:0\">記事を読んでほしい目的＝記事を読んで、ユーザーに何をさせたい？</li>\n</ul>\n<p data-sourcepos=\"95:1-99:48\">これを考えておいてください。<br>\n特に読んでほしい目的です。<br>\n分かりやすいのはトラブルシューティングですね。<br>\n記事の書き出しは「何に困っているのか」を定義して、以降解決手順を書いていきます。最後のまとめで、解決しなかった場合に参考になる他のトラブルシューティングへの案内を書く事で、ユーザーの問題解決に貢献する可能性が高い記事を作ることが出来ます。<br>\nこれが最も簡単なケースでしょう。</p>\n<p data-sourcepos=\"101:1-101:57\">ちょっとマーケター寄りの話になります。</p>\n<table data-sourcepos=\"103:1-107:109\">\n<thead>\n<tr data-sourcepos=\"103:1-103:22\">\n<th data-sourcepos=\"103:2-103:18\">アプローチ</th>\n<th data-sourcepos=\"103:20-103:21\"></th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"105:1-105:115\">\n<td data-sourcepos=\"105:2-105:30\">困っている人を定義</td>\n<td data-sourcepos=\"105:32-105:114\">読者が記事を読むことへの満足度やマッチ度が事前に分かる</td>\n</tr>\n<tr data-sourcepos=\"106:1-106:82\">\n<td data-sourcepos=\"106:2-106:15\">解決手順</td>\n<td data-sourcepos=\"106:17-106:81\">読者が欲しがっている内容。メインコンテンツ</td>\n</tr>\n<tr data-sourcepos=\"107:1-107:109\">\n<td data-sourcepos=\"107:2-107:21\">未解決の案内</td>\n<td data-sourcepos=\"107:23-107:108\">読者の不満を低減させ、親身に相談に応じている印象を与える</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"109:1-110:57\">特定の名前を出すと回し者っぽいんですが、マイクロソフトコミュニティのサポートチームのメッセージは上記をかなり意識しながら対応されている印象です。<br>\nあの対応はそのまま記事にも活かせます。</p>\n<p data-sourcepos=\"112:1-113:201\">ここではトラブルシューティングを挙げましたが、読ませる事を目的にする記事については本質的には同じです。<br>\n論文だとアプローチが変わるぐらいで、メインコンテンツの比重や構成がより難しく体系的になる以外は細かい事を気にしなくて良かったりします。</p>\n<h2 data-sourcepos=\"115:1-115:12\">\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n<p data-sourcepos=\"116:1-117:108\">シンプルな記事の書き方と、シンプルな記事の考え方について触れています。<br>\n書くだけなら簡単で、読んでもらう事を考えると難しくなるというお話でした。</p>\n<p data-sourcepos=\"119:1-122:258\">正直、こんな事を考えながら記事を書くのは大変なので、読んでもらわなくていいからとりあえず書いとけ、が一番安心で幸せな状態だと思います。<br>\nなので、本稿に限らずアドベントカレンダーの記事、いやQiitaで書くような記事は宣伝ツールに乗せたりしていませんし、今後も乗せないでしょう。<br>\n敢えて言うなら、人事やスカウトが読んでみて「この人は面白いことを考えるな」と思ってもらったらそれでいいです。<br>\n彼らに対する導線だけ作れれば、読んでくれた場所が自サイトだろうがQiitaだろうが、あるいは数あるポートフォリオサイトほかにYoutubeなどチャンネル、なんならSNSでもいいと思っています。</p>\n<p data-sourcepos=\"125:1-126:51\">あなたは、どんな目的で記事を書いていますか？<br>\nこの機会に振り返ってみてください。</p>\n<h2 data-sourcepos=\"128:1-128:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"129:1-131:0\">\n<li data-sourcepos=\"129:1-129:154\"><a href=\"https://qiita.com/nomurasan/items/281044ee0162b89b5b9e\" id=\"reference-cfd9c85f7e1d7af6c243\">プログラミングを勉強したい人がやっておいた方がいいこと2022(6日目)</a></li>\n<li data-sourcepos=\"130:1-131:0\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n<hr data-sourcepos=\"132:1-133:0\">\n<hr data-sourcepos=\"134:1-135:0\">\n<h2 data-sourcepos=\"136:1-136:24\">\n<span id=\"本稿の思考解説\" class=\"fragment\"></span><a href=\"#%E6%9C%AC%E7%A8%BF%E3%81%AE%E6%80%9D%E8%80%83%E8%A7%A3%E8%AA%AC\"><i class=\"fa fa-link\"></i></a>本稿の思考解説</h2>\n<p data-sourcepos=\"137:1-138:168\">では、上記までを本文として、以下は私が本稿を書くにあたって思考した事を書いていきます。<br>\n書いている側は事実上２画面で追いかけながら見ているので結構忙しいですが、漏れないように気をつけて書いていきます。</p>\n<h3 data-sourcepos=\"140:1-140:61\">\n<span id=\"この記事を読んでほしいユーザーを考える\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%81%AE%E8%A8%98%E4%BA%8B%E3%82%92%E8%AA%AD%E3%82%93%E3%81%A7%E3%81%BB%E3%81%97%E3%81%84%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%82%92%E8%80%83%E3%81%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>この記事を読んでほしいユーザーを考える</h3>\n<p data-sourcepos=\"141:1-144:246\">いつもはテンプレートの「対象読者」と「記事を読んでできるようになること」のどちらか、あるいは両方を採用しながら記事を書くようにしていますが、この記事では敢えて外しました。<br>\nテンプレートを使える人はいいんですが、最初は記事を書く時にテンプレートなんて用意してないですよね。<br>\n記事のテンプレートを使うのは、記事の品質を維持する事も目的ですが、オリジナリティーの表現にも貢献します。<br>\nとはいえ、ガチガチにテンプレートにしてしまうと面白みがなくなったりワンパターンになってしまうので、最初の挨拶と最後の挨拶はテンプレート化しないように心がけています。</p>\n<p data-sourcepos=\"146:1-147:231\">今回は元々読ませる事よりも、アドベントカレンダーを埋めるために書いているので備忘録の面が強いです。<br>\n結局のところ、記事を読んでほしいという意識が私の中で低いのと、今更ですがライブ感を大事にしたいので、思考解説については無編集・ノーレビューで投稿しますね。</p>\n<h3 data-sourcepos=\"149:1-149:100\">\n<span id=\"せっかく時間をかけて読んでくれるのだから何か持って帰ってほしい\" class=\"fragment\"></span><a href=\"#%E3%81%9B%E3%81%A3%E3%81%8B%E3%81%8F%E6%99%82%E9%96%93%E3%82%92%E3%81%8B%E3%81%91%E3%81%A6%E8%AA%AD%E3%82%93%E3%81%A7%E3%81%8F%E3%82%8C%E3%82%8B%E3%81%AE%E3%81%A0%E3%81%8B%E3%82%89%E4%BD%95%E3%81%8B%E6%8C%81%E3%81%A3%E3%81%A6%E5%B8%B0%E3%81%A3%E3%81%A6%E3%81%BB%E3%81%97%E3%81%84\"><i class=\"fa fa-link\"></i></a>せっかく時間をかけて読んでくれるのだから、何か持って帰ってほしい</h3>\n<p data-sourcepos=\"150:1-153:132\">念のため、こちらでも言及しますが本稿はマルチポストしています。インデックス記事（Qiitaだと１日目）でも触れていますね。<br>\nサイト側だと、Web業界の実情とかについて補足して気付きを与えようとしてみました。<br>\nQiita側だと、能書きよりは実務面の話が聞きたいかな、と思ったのでドキュメンテーションを厚めにしようと思いました。<br>\nこの２つを一気にやらないといけないので、結構忙しいです。考えることが多くて疲れますね…。</p>\n<h4 data-sourcepos=\"155:1-155:29\">\n<span id=\"ちょっと喋らせて\" class=\"fragment\"></span><a href=\"#%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E5%96%8B%E3%82%89%E3%81%9B%E3%81%A6\"><i class=\"fa fa-link\"></i></a>ちょっと喋らせて</h4>\n<p data-sourcepos=\"156:1-159:154\">この上で、各サービスの利用規約を意識しながら書いています。サービス側でマルチポストを禁止していない（質問系だったらマルチポストはどうかな、と思いますが、本稿は質問記事ではないのと、規約削除を許容しながらコンテンツを守るための施策としてやっています）ですが、ユーザー分散が発生するのでやりすぎるのも考えものですね。<br>\n１ページ目とかさわりだけ書いて、２ページ目を自サイトに誘導するという手もなくはないですが、多くのサイトで宣伝行為を禁止しているはずです。<br>\nなので、マルチポストをしているけど宣伝はしてないです。おかげでPV数（閲覧者）が正しく計測できていません。<br>\n元々の目的がQiitaのアドベントカレンダーなので、これを重視して他はQiitaの規約に少し寄せてあげるぐらいです。</p>\n<h3 data-sourcepos=\"161:1-161:28\">\n<span id=\"経験則から考える\" class=\"fragment\"></span><a href=\"#%E7%B5%8C%E9%A8%93%E5%89%87%E3%81%8B%E3%82%89%E8%80%83%E3%81%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>経験則から考える</h3>\n<p data-sourcepos=\"162:1-166:285\">ウソは書いてないんですが、いつか私の経験（本稿）も古くなるよなぁ、という危機感を持っています。<br>\n今日までの記事に【2022年版】みたいなタイトルをつけていたんですが、ほぼコレのせいです。<br>\n来年のアドベントカレンダーを書いている頃に、本稿を読み始める人が出てきた時に本稿を鵜呑みにされると、もしかしたら齟齬や不利益が出てしまうんじゃないかなぁ、という懸念があります。<br>\n古い記事は消してしまえ！という主張は同感ですが、いつかの日に誰かを救う（たとえば、最後の更新が5年前の記事だけど役に立ったりする）可能性を考えると、消すのも抵抗があります。<br>\n稼ぐのが目的なら、実は古い記事はさっさと消してしまって、同様の内容を書いている最新の記事へのリンクだけ貼り付けてしまった方が古い記事のSEOパワーを使いながら収益を維持、もしくは向上を測れます。</p>\n<p data-sourcepos=\"168:1-168:69\">結局、古い記事（URL）は消されなくなるのでした。</p>\n<h3 data-sourcepos=\"170:1-170:13\">\n<span id=\"まとめ-1\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81-1\"><i class=\"fa fa-link\"></i></a>まとめ</h3>\n<p data-sourcepos=\"171:1-174:36\">実はですね、私は記事の一番最後に「まとめ」とか書いてあって「いかがでしたでしょうか」とか書いている記事が好きではありません。<br>\nアフィリエイトサイトで使いまわされた文言なので「この後何か宣伝するんだな？」と疑って以降の本文は読まずにブラウザバックをします。<br>\nそのくせ、普段は「バンバン稼げ、閲覧者の嬉しいとか喜びの声がイコール売上だと思え」と指導している立場ですが、「いかがでしたでしょうか」なんて言われたら「本文に自信がないくせに収益化狙うなんて失礼だと思わないのか？」なんて毒づいてます。<br>\n我ながら心が狭いですね。</p>\n<h3 data-sourcepos=\"176:1-176:22\">\n<span id=\"完走した感想\" class=\"fragment\"></span><a href=\"#%E5%AE%8C%E8%B5%B0%E3%81%97%E3%81%9F%E6%84%9F%E6%83%B3\"><i class=\"fa fa-link\"></i></a>完走した感想</h3>\n<p data-sourcepos=\"177:1-179:135\">ないです。<br>\n明日の記事の準備とかもありますが、完走した直後は脳が疲れているのでゲームしたい！ぐらいしか考えてないです。<br>\n本格的に内容を見直して手を加えるのはいったん寝かせてから（私自身も寝てから）にしています。</p>\n<p data-sourcepos=\"181:1-182:108\">記事の表現は若干変わるかも知れませんが、内容は変えないようにします。<br>\nこれもいつものですね。その時に改めて何か思うところがあるかも知れません。</p>\n<h2 data-sourcepos=\"184:1-184:15\">\n<span id=\"次の記事-1\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B-1\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"185:1-186:88\">\n<li data-sourcepos=\"185:1-185:154\"><a href=\"https://qiita.com/nomurasan/items/281044ee0162b89b5b9e\">プログラミングを勉強したい人がやっておいた方がいいこと2022(6日目)</a></li>\n<li data-sourcepos=\"186:1-186:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n",
        "body": "## はじめに\n本稿はアウトプットの仕方の話です。\nアウトプットする内容については、既に決まっているか書きながら考えるかしているという前提なので、本稿では触れません。\nなお、トンチを利かせるなら\n\n1. アカウントを作る\n1. 投稿するボタンを押す\n1. 必須項目を埋める\n1. Qiitaに投稿\n\nとすると記事を書いて投稿したことになります。\n本稿ではこういう話はしません。\n\n## プログラミングに関係ない記事なのでは？\nエンジニアのスキルアップの方法の一つ\n\n## 記事をどうやって書くか？\nまずはクオリティを気にせず、書きたいことだけを書いてしまいましょう。\nといっても、書きたい事とは？というところから始めるべきだと思ったので、最もシンプルなアウトプットを記事っぽくする方法を見ていきます。\n\n### 最もシンプルなアウトプット\n一番初めに言ってしまいますが、学びをアウトプットするのに一番手っ取り早いのは箇条書きです。\nたとえば座学など勉強会で参加していた時に、テキストがあればテキストから書き出したり、登壇者（スピーカー）の発言や要約を書き取っていると思います。\nこれをある程度フォーマットを整備してはめ込んでいくイメージです。\n\n### 最もシンプルな記事の書き方\n箇条書きにした内容に意見や考察を交えて、口語体または文語文で締めてみましょう。\nそれっぽい感じになっていくと思います。\n\n## どんな記事を書くか\n再度言及しますが、記事の内容の話は本稿では触れません。\n書くことは決めているけど、どんな記事にするか（育てるか）というお話です。\n\nが、例がないと分かりにくいので、本稿ではこの記事を使っていきます。\n具体的には、ライブライティングしていきます。リアルタイムに考えている事を無編集で書いていくのですが、その様子をお見せできないのが残念です。\nライブ動画で配信した方が良かったかな、とも思いますが、これやるとしたら別記事で来年になりますね…。\n\n### 記事を書く目的を考える\n備忘録を残したいとか、オンラインストレージの要領で使っていくなら深く考える必要もないです。\n思いのままに書いてみてください。\nタイトルの付け方は、ご自身のラベリングに合わせて設定すると良いでしょう。\n\n問題は、読んでほしい記事を書く場合。\n率直に言えば、記事の内容よりタイトルや宣伝を吟味した方が良いです。\n極端に言えば、本文ナシの記事をいくつか作ってタイトルだけ変えてアクセス数の多かった記事から書きます。\nこれが最も効率よく記事を読ませる方法です。\n\nなので、記事を読んでほしい場合は記事の内容を考える必要はありません。\nそのため、以降では除外します。\n\n### 読んでほしい記事を読ませる書き方、を考える前に\nようやく本題です。\nが、実はここにも罠が潜んでいますので、解剖していきましょう。\n大事なことなので繰り返しになりますが、良いコンテンツを書くのは、タイトルや宣伝で手堅く集客できる方法を見つけてから本文を書くことです。\n記事を読んでほしい、ファンを獲得したいという部分にフォーカスしてお話していきます。\n\n「ファンを獲得する」という点に絞ると、実はこれも記事を書く必要はありません。\n今の御時世、記事を書くよりは動画サイトに投稿した方がよっぽどマシです。\n乱暴に言えば、動かない絵と聞こえない音、音声への字幕が存在しない無名の人の発信には価値はありません。\nつまり、私のこれらの発言は「読ませる」という観点においてほとんど価値がないことになります。\n\nただし、これは「ファンを獲得する」という点に絞った場合の話です。\n獲得したファンにより主張や意見を丁寧に伝える事を目的にした場合は、ようやく文字で書く利点がでてきます。\n\n### なぜ記事を読んでほしいのか？\n記事を書く時に「なぜ記事を読んでほしいのか？」と考えて記事を書いていますか？\n最もシンプルに記事を書く事を考えた時に、なぜか抜け落ちている事が多い観点でした（私調べ）\nこれが無いことには方針を立てられません。記事を完成させることはできますが、結局のところ何を言っているか分からなくなります。\n私も、１日寝かせて脳を休ませた後にセルフレビューを挟まないと支離滅裂だったり主張が行方不明になったりしがちです。\nすなわち、品質の低い記事になってしまいます。\n\n以下、どういう目的なら何を気にしなければならないか、の例を挙げます。\nただし、全て内容についてはウソや間違っているものは書いていないと仮定します。\nどういう場合でもウソは書くべきではない（特にアフィリエイトは実害が発生します）し、間違っている場合（内容的にも、誤字誤変換など）はすぐに修正できる状態にしておきます。\n\nアフィリエイトなら記事の品質より生産性を重視するのでこれでいいです。\n１記事いくらで作るので、いちいち推敲やレビューなんてやってられません。\n収益化システムにユーザー導線がしっかり作られていれば、ぶっちゃけ中身なんて何でもいいです。\nその代わり、収益性が高い記事の導線を徹底的に解剖・研究していく事になります。記事を書くより面倒くさいし大変です。\n\nファンを固定化するなら、ユーザーの感情を揺さぶる演出や表現が出来ているか、記事の構成が起承転結（序破急）をしっかりと守れているかに着目すれば良いです。\n文章以外に絵を多く取り入れてユーザーの視線を動かして面白さや見ごたえが重要なので、内容より表現です。\n寄稿文書を書く場合などは、これを意識するとプロフィールページ（おすすめはTwitter）に飛んでもらいやすくなります。\n\n内容を気にしなければならないのは論文や文書などです。\nエンジニアがドキュメント化・ナレッジ化を考える場合はここに該当します。\nおそらく、今回のメインコンテンツになるかと思います。\n\n### 内容を熟慮すべき記事の目的を考える\nもう一度振り返ります。\n\n- 記事を書く目的は何か？\n- 記事を読んでほしい目的＝記事を読んで、ユーザーに何をさせたい？\n\nこれを考えておいてください。\n特に読んでほしい目的です。\n分かりやすいのはトラブルシューティングですね。\n記事の書き出しは「何に困っているのか」を定義して、以降解決手順を書いていきます。最後のまとめで、解決しなかった場合に参考になる他のトラブルシューティングへの案内を書く事で、ユーザーの問題解決に貢献する可能性が高い記事を作ることが出来ます。\nこれが最も簡単なケースでしょう。\n\nちょっとマーケター寄りの話になります。\n\n| アプローチ |  |\n| --- | --- |\n| 困っている人を定義 | 読者が記事を読むことへの満足度やマッチ度が事前に分かる |\n| 解決手順 | 読者が欲しがっている内容。メインコンテンツ |\n| 未解決の案内 | 読者の不満を低減させ、親身に相談に応じている印象を与える |\n\n特定の名前を出すと回し者っぽいんですが、マイクロソフトコミュニティのサポートチームのメッセージは上記をかなり意識しながら対応されている印象です。\nあの対応はそのまま記事にも活かせます。\n\nここではトラブルシューティングを挙げましたが、読ませる事を目的にする記事については本質的には同じです。\n論文だとアプローチが変わるぐらいで、メインコンテンツの比重や構成がより難しく体系的になる以外は細かい事を気にしなくて良かったりします。\n\n## まとめ\nシンプルな記事の書き方と、シンプルな記事の考え方について触れています。\n書くだけなら簡単で、読んでもらう事を考えると難しくなるというお話でした。\n\n正直、こんな事を考えながら記事を書くのは大変なので、読んでもらわなくていいからとりあえず書いとけ、が一番安心で幸せな状態だと思います。\nなので、本稿に限らずアドベントカレンダーの記事、いやQiitaで書くような記事は宣伝ツールに乗せたりしていませんし、今後も乗せないでしょう。\n敢えて言うなら、人事やスカウトが読んでみて「この人は面白いことを考えるな」と思ってもらったらそれでいいです。\n彼らに対する導線だけ作れれば、読んでくれた場所が自サイトだろうがQiitaだろうが、あるいは数あるポートフォリオサイトほかにYoutubeなどチャンネル、なんならSNSでもいいと思っています。\n\n\nあなたは、どんな目的で記事を書いていますか？\nこの機会に振り返ってみてください。\n\n## 次の記事\n- [プログラミングを勉強したい人がやっておいた方がいいこと2022(6日目)](https://qiita.com/nomurasan/items/281044ee0162b89b5b9e)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n\n---\n\n---\n\n## 本稿の思考解説\nでは、上記までを本文として、以下は私が本稿を書くにあたって思考した事を書いていきます。\n書いている側は事実上２画面で追いかけながら見ているので結構忙しいですが、漏れないように気をつけて書いていきます。\n\n### この記事を読んでほしいユーザーを考える\nいつもはテンプレートの「対象読者」と「記事を読んでできるようになること」のどちらか、あるいは両方を採用しながら記事を書くようにしていますが、この記事では敢えて外しました。\nテンプレートを使える人はいいんですが、最初は記事を書く時にテンプレートなんて用意してないですよね。\n記事のテンプレートを使うのは、記事の品質を維持する事も目的ですが、オリジナリティーの表現にも貢献します。\nとはいえ、ガチガチにテンプレートにしてしまうと面白みがなくなったりワンパターンになってしまうので、最初の挨拶と最後の挨拶はテンプレート化しないように心がけています。\n\n今回は元々読ませる事よりも、アドベントカレンダーを埋めるために書いているので備忘録の面が強いです。\n結局のところ、記事を読んでほしいという意識が私の中で低いのと、今更ですがライブ感を大事にしたいので、思考解説については無編集・ノーレビューで投稿しますね。\n\n### せっかく時間をかけて読んでくれるのだから、何か持って帰ってほしい\n念のため、こちらでも言及しますが本稿はマルチポストしています。インデックス記事（Qiitaだと１日目）でも触れていますね。\nサイト側だと、Web業界の実情とかについて補足して気付きを与えようとしてみました。\nQiita側だと、能書きよりは実務面の話が聞きたいかな、と思ったのでドキュメンテーションを厚めにしようと思いました。\nこの２つを一気にやらないといけないので、結構忙しいです。考えることが多くて疲れますね…。\n\n#### ちょっと喋らせて\nこの上で、各サービスの利用規約を意識しながら書いています。サービス側でマルチポストを禁止していない（質問系だったらマルチポストはどうかな、と思いますが、本稿は質問記事ではないのと、規約削除を許容しながらコンテンツを守るための施策としてやっています）ですが、ユーザー分散が発生するのでやりすぎるのも考えものですね。\n１ページ目とかさわりだけ書いて、２ページ目を自サイトに誘導するという手もなくはないですが、多くのサイトで宣伝行為を禁止しているはずです。\nなので、マルチポストをしているけど宣伝はしてないです。おかげでPV数（閲覧者）が正しく計測できていません。\n元々の目的がQiitaのアドベントカレンダーなので、これを重視して他はQiitaの規約に少し寄せてあげるぐらいです。\n\n### 経験則から考える\nウソは書いてないんですが、いつか私の経験（本稿）も古くなるよなぁ、という危機感を持っています。\n今日までの記事に【2022年版】みたいなタイトルをつけていたんですが、ほぼコレのせいです。\n来年のアドベントカレンダーを書いている頃に、本稿を読み始める人が出てきた時に本稿を鵜呑みにされると、もしかしたら齟齬や不利益が出てしまうんじゃないかなぁ、という懸念があります。\n古い記事は消してしまえ！という主張は同感ですが、いつかの日に誰かを救う（たとえば、最後の更新が5年前の記事だけど役に立ったりする）可能性を考えると、消すのも抵抗があります。\n稼ぐのが目的なら、実は古い記事はさっさと消してしまって、同様の内容を書いている最新の記事へのリンクだけ貼り付けてしまった方が古い記事のSEOパワーを使いながら収益を維持、もしくは向上を測れます。\n\n結局、古い記事（URL）は消されなくなるのでした。\n\n### まとめ\n実はですね、私は記事の一番最後に「まとめ」とか書いてあって「いかがでしたでしょうか」とか書いている記事が好きではありません。\nアフィリエイトサイトで使いまわされた文言なので「この後何か宣伝するんだな？」と疑って以降の本文は読まずにブラウザバックをします。\nそのくせ、普段は「バンバン稼げ、閲覧者の嬉しいとか喜びの声がイコール売上だと思え」と指導している立場ですが、「いかがでしたでしょうか」なんて言われたら「本文に自信がないくせに収益化狙うなんて失礼だと思わないのか？」なんて毒づいてます。\n我ながら心が狭いですね。\n\n### 完走した感想\nないです。\n明日の記事の準備とかもありますが、完走した直後は脳が疲れているのでゲームしたい！ぐらいしか考えてないです。\n本格的に内容を見直して手を加えるのはいったん寝かせてから（私自身も寝てから）にしています。\n\n記事の表現は若干変わるかも知れませんが、内容は変えないようにします。\nこれもいつものですね。その時に改めて何か思うところがあるかも知れません。\n\n## 次の記事\n- [プログラミングを勉強したい人がやっておいた方がいいこと2022(6日目)](https://qiita.com/nomurasan/items/281044ee0162b89b5b9e)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-05T02:06:16+09:00",
        "group": null,
        "id": "6cdde5886073c571349c",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "アウトプット",
                "versions": []
            }
        ],
        "title": "最もシンプルな記事の書き方・考え方紹介",
        "updated_at": "2022-12-05T20:54:59+09:00",
        "url": "https://qiita.com/nomurasan/items/6cdde5886073c571349c",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 256,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<h2 data-sourcepos=\"1:1-1:9\">\n<span id=\"結論\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E8%AB%96\"><i class=\"fa fa-link\"></i></a>結論</h2>\n<p data-sourcepos=\"2:1-4:188\">一時期流行ったGithub転職ですが、スカウター目線では昨今はあまり重要視されていないようです。<br>\n（ソースから技術力を判断するのは難しい？）<br>\nAIマッチングなんてのもありましたが、精度が良くないのか運用が難しいのか判断ができませんが、思った以上に流行らなかった印象です。</p>\n<p data-sourcepos=\"6:1-6:99\">とはいえ、積極的にGithubを活用・採用しているエージェントもあります。</p>\n<h2 data-sourcepos=\"8:1-8:42\">\n<span id=\"github転職は意味がないのか\" class=\"fragment\"></span><a href=\"#github%E8%BB%A2%E8%81%B7%E3%81%AF%E6%84%8F%E5%91%B3%E3%81%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>Github転職は意味がないのか？</h2>\n<p data-sourcepos=\"9:1-9:37\"><strong>そんなことはないです。</strong></p>\n<p data-sourcepos=\"11:1-11:129\">Githubを個人で勉強すると、エンジニアとして必要なシステム設計の一端に触れる事ができます。</p>\n<ul data-sourcepos=\"13:1-18:0\">\n<li data-sourcepos=\"13:1-13:17\">ソース管理</li>\n<li data-sourcepos=\"14:1-14:7\">CI/CD</li>\n<li data-sourcepos=\"15:1-15:17\">タスク管理</li>\n<li data-sourcepos=\"16:1-16:20\">ナレッジ管理</li>\n<li data-sourcepos=\"17:1-18:0\">コミュニティ管理</li>\n</ul>\n<p data-sourcepos=\"19:1-21:168\">進捗管理は別途検討する必要があります。<br>\n個人での運用とはいえ、来月の自分は他人だと思ってやらないと特にメンテナンスで悲鳴をあげることになります。<br>\n実務だと特に保守性の重要性を痛感する事になる機会が多いので、今のうちから保守性を意識しておくと学びが深まります。</p>\n<p data-sourcepos=\"23:1-25:99\">これとは別に、静的サイトホスティングサービスとして優秀です。<br>\nビルドツールをCIに組み込めばしっかりサイト運用が可能です。<br>\nあるいは、自身でビルドしてサイトをアップロードする方法もあります。</p>\n<p data-sourcepos=\"27:1-29:134\">こういったシステム設計を考え、実運用をしていく事でノウハウも技術もついてきます。<br>\nやったことがそのままポートフォリオになるのもポイントです。<br>\n（一般に「自作システム作りました」より「自作システム使ってます」の方がPRとして魅力的です）</p>\n<h2 data-sourcepos=\"31:1-31:33\">\n<span id=\"営業活動はgithub以外で\" class=\"fragment\"></span><a href=\"#%E5%96%B6%E6%A5%AD%E6%B4%BB%E5%8B%95%E3%81%AFgithub%E4%BB%A5%E5%A4%96%E3%81%A7\"><i class=\"fa fa-link\"></i></a>営業活動はGithub以外で</h2>\n<p data-sourcepos=\"32:1-35:174\">Github転職プロジェクトを推進してきた立場でこういう話をするのもどうかなぁ、と思わなくもないですが、Githubは営業ツールではありません。<br>\n使う人が営業ツールとして活用する事はできますが、PRを目的としたサービスはないので、ユーザー（被採用者・エンジニア）には使いにくいです。<br>\n時世を考えると、自サイトを持つより集客力の高いSNSでアカウントを持ったほうがまだ有効です。<br>\nSNSを通じてコミュニケーションを取れるようにしておき、Githubは解説程度にとどめておくぐらいで良いんじゃないかと思います。</p>\n<h2 data-sourcepos=\"37:1-37:68\">\n<span id=\"qiitaアドベントカレンダーだって立派な営業活動\" class=\"fragment\"></span><a href=\"#qiita%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC%E3%81%A0%E3%81%A3%E3%81%A6%E7%AB%8B%E6%B4%BE%E3%81%AA%E5%96%B6%E6%A5%AD%E6%B4%BB%E5%8B%95\"><i class=\"fa fa-link\"></i></a>Qiitaアドベントカレンダーだって立派な営業活動</h2>\n<p data-sourcepos=\"38:1-41:99\">せっかくアドベントカレンダーなので、アウトプットを頑張ろうというモチベーションでやっているので、営業活動と書くとやや嫌らしさというか下心を感じざるを得ません（私の感想でしょうか）が、チャンスがあれば積極的に意識してやっておくべきでしょう。<br>\n今回は「Github転職」というテーマなので転職＝自分自身を売り込む機会と捉えて営業の例を示しています。<br>\nすべての記事に「いかがでしょうか？～○○をお願いします」みたいに書くと、「この人の記事は宣伝だな」という印象を与えてしまうため、過度にやるのは賛否あります。<br>\nユーザーは企業人より個人の方が多いので、フリーランスなら尚更です。</p>\n<p data-sourcepos=\"43:1-43:307\">こんな露骨な営業・宣伝をやらなくても、Qiitaアドベントカレンダー以外にもSNSなど集客力が高い環境で意見を出すだけでも立派なPR活動になるので、ユーザー導線は作らず品質の高いアウトプットになるように意識しましょう。</p>\n<h2 data-sourcepos=\"45:1-45:31\">\n<span id=\"github転職2023への抱負\" class=\"fragment\"></span><a href=\"#github%E8%BB%A2%E8%81%B72023%E3%81%B8%E3%81%AE%E6%8A%B1%E8%B2%A0\"><i class=\"fa fa-link\"></i></a>Github転職2023への抱負</h2>\n<p data-sourcepos=\"46:1-47:228\">これからの情勢によって変わるので断言しかねますが、現状だとGithub転職プロジェクトは「Githubを使った転職活動の実績を作る」という今までの方針から「集客力の高いサービスを支援する」という方針に切り替わっていくだろうなぁと思っています。<br>\nつまり、各社サービスのプラットフォームに情報を提供する際にテンプレートを作ったり、他社でも使い回せるように資料整備をするような使い方が望ましいでしょう。</p>\n<h3 data-sourcepos=\"49:1-49:73\">\n<span id=\"従来のgithub転職プロジェクトの方針はダメなのか\" class=\"fragment\"></span><a href=\"#%E5%BE%93%E6%9D%A5%E3%81%AEgithub%E8%BB%A2%E8%81%B7%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E6%96%B9%E9%87%9D%E3%81%AF%E3%83%80%E3%83%A1%E3%81%AA%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>従来のGithub転職プロジェクトの方針はダメなのか？</h3>\n<p data-sourcepos=\"50:1-51:54\">ダメではありません。<br>\n場所を選ぶ必要があるということです。</p>\n<p data-sourcepos=\"53:1-54:269\">技術を示してスカウターやリクルーターに見えるようにしよう、という意気込みでずっとやっているpaiza転職なんかがありますが、結局のところpaizaの営業力に依存した活動しかできない、という問題点は残り続けるため、paizaのスコアを評価できる方にはPRできます。<br>\n誤解を恐れずに言えば、paizaのスコアで評価するのが難しい方に対しては、技術力を別の方法で評価していただくか、技術力以外に必要なものがあり、これを見極めて個別対応していくのが近道です。</p>\n<h3 data-sourcepos=\"56:1-56:37\">\n<span id=\"転職を目的にしない場合\" class=\"fragment\"></span><a href=\"#%E8%BB%A2%E8%81%B7%E3%82%92%E7%9B%AE%E7%9A%84%E3%81%AB%E3%81%97%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>転職を目的にしない場合</h3>\n<p data-sourcepos=\"57:1-59:90\">Github転職プロジェクト自体が転職を目的にしているので趣旨とは異なりますが、「登壇しないプレゼンテーション力」を磨くという意味ではGithub転職プロジェクトのノウハウは使えると思います。<br>\nたとえば、自作システムやアプリのPRをしたい、と思う事があると思います。<br>\nこの時に売り込む商材が「自分＝転職」か「自作」かの違いです。</p>\n<p data-sourcepos=\"61:1-62:276\">誤解を恐れずに言えば、エンジニアも営業を学んでおくに越したことはありません。<br>\nただし、法人営業（IT以外）と法人営業（IT関連）では世界が違う事は理解しておくべきですし、なんならIT以外で括った法人営業も業界によって営業指針や文化が異なる事も把握しておく必要があります。</p>\n<p data-sourcepos=\"64:1-65:63\">なので、皆さん（これからGithub転職プロジェクトを検討する方）にとって重要なのはプロジェクトの目的ではなく、プロジェクトの背景や今日までの変遷だと考えます。<br>\n活かせそうな部分だけ持っていってください。</p>\n<h3 data-sourcepos=\"67:1-67:97\">\n<span id=\"私の経験から考えるエンジニアが転職する時のベストプラクティス\" class=\"fragment\"></span><a href=\"#%E7%A7%81%E3%81%AE%E7%B5%8C%E9%A8%93%E3%81%8B%E3%82%89%E8%80%83%E3%81%88%E3%82%8B%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%8C%E8%BB%A2%E8%81%B7%E3%81%99%E3%82%8B%E6%99%82%E3%81%AE%E3%83%99%E3%82%B9%E3%83%88%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9\"><i class=\"fa fa-link\"></i></a>私の経験から考える、エンジニアが転職する時のベストプラクティス</h3>\n<p data-sourcepos=\"68:1-73:105\">これだけ営業を学べ、励め、という趣旨を書いておきながらこんな話をするのもなんですが、エンジニアの本分は営業ではなく、システム構築設計です。<br>\n営業に時間を割くより、自身の技術力として不足している項目を伸ばしたりする方が有意義だと考える事もできます。<br>\n我々世代の若い頃は情報技術もまだまだ発展途上だったので比較的悠長にできたものですが、昨今の若者はどんな分野でも今までの集合知がデータベース化されているため、新しい分野に挑戦した時の専門性の掘り下げが今まで以上に深く難しいものになっている傾向にあります。<br>\n今ある最先端に向けて頑張っていけるモチベーションがあるうちはどんどん知識も実績も高めていって、頑張れなくなったら今までの技術力で通用する環境を探したり開拓するのが良いでしょう。<br>\n特に新しい分野に目を向けてみれば、今まであなたがやってきた内容についてあなたより詳しい人はいない事が多いです。<br>\n（下手すると、こういうケースのほうが報酬が高い事も往々にしてあります）</p>\n<p data-sourcepos=\"75:1-77:105\">中長期的に見ると、最先端の現場で頑張った方が実績も積めますし技術力も高まります。<br>\nスペシャリストコースからジェネラリストコース（マルチタレント）に切り替えるのは簡単ですが、ジェネラリストがスペシャリストを目指すと相当な努力を要します。<br>\nこの辺りは、ご自身のライフバランス（特に年齢）と相談して決めましょう。</p>\n<h2 data-sourcepos=\"79:1-79:9\">\n<span id=\"総括\" class=\"fragment\"></span><a href=\"#%E7%B7%8F%E6%8B%AC\"><i class=\"fa fa-link\"></i></a>総括</h2>\n<p data-sourcepos=\"80:1-82:153\">「転職活動をする」という点についてはGithubは非効率的ですが、転職活動の支援やシステム開発のノウハウを得るという意味では有効です。<br>\n営業先で技術力の提示を求められたりする事がありますので、こういった場合に対応できるようにするのが良いでしょう。<br>\n良くも悪くも、Githubでエンジニアをスカウトしよう、という活動をしていた黎明期と同じ状態になった印象です。</p>\n<h2 data-sourcepos=\"84:1-84:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"85:1-86:88\">\n<li data-sourcepos=\"85:1-85:211\"><a href=\"https://qiita.com/nomurasan/items/5f97870d5237f773c111\" id=\"reference-fea978d76e0fb65787fb\">現役エンジニア講師が「今、改めて考える」初めて勉強するプログラミング言語は何がいい？2022年最新版(4日目)</a></li>\n<li data-sourcepos=\"86:1-86:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n",
        "body": "## 結論\n一時期流行ったGithub転職ですが、スカウター目線では昨今はあまり重要視されていないようです。\n（ソースから技術力を判断するのは難しい？）\nAIマッチングなんてのもありましたが、精度が良くないのか運用が難しいのか判断ができませんが、思った以上に流行らなかった印象です。\n\nとはいえ、積極的にGithubを活用・採用しているエージェントもあります。\n\n## Github転職は意味がないのか？\n**そんなことはないです。**\n\nGithubを個人で勉強すると、エンジニアとして必要なシステム設計の一端に触れる事ができます。\n\n- ソース管理\n- CI/CD\n- タスク管理\n- ナレッジ管理\n- コミュニティ管理\n\n進捗管理は別途検討する必要があります。\n個人での運用とはいえ、来月の自分は他人だと思ってやらないと特にメンテナンスで悲鳴をあげることになります。\n実務だと特に保守性の重要性を痛感する事になる機会が多いので、今のうちから保守性を意識しておくと学びが深まります。\n\nこれとは別に、静的サイトホスティングサービスとして優秀です。\nビルドツールをCIに組み込めばしっかりサイト運用が可能です。\nあるいは、自身でビルドしてサイトをアップロードする方法もあります。\n\nこういったシステム設計を考え、実運用をしていく事でノウハウも技術もついてきます。\nやったことがそのままポートフォリオになるのもポイントです。\n（一般に「自作システム作りました」より「自作システム使ってます」の方がPRとして魅力的です）\n\n## 営業活動はGithub以外で\nGithub転職プロジェクトを推進してきた立場でこういう話をするのもどうかなぁ、と思わなくもないですが、Githubは営業ツールではありません。\n使う人が営業ツールとして活用する事はできますが、PRを目的としたサービスはないので、ユーザー（被採用者・エンジニア）には使いにくいです。\n時世を考えると、自サイトを持つより集客力の高いSNSでアカウントを持ったほうがまだ有効です。\nSNSを通じてコミュニケーションを取れるようにしておき、Githubは解説程度にとどめておくぐらいで良いんじゃないかと思います。\n\n## Qiitaアドベントカレンダーだって立派な営業活動\nせっかくアドベントカレンダーなので、アウトプットを頑張ろうというモチベーションでやっているので、営業活動と書くとやや嫌らしさというか下心を感じざるを得ません（私の感想でしょうか）が、チャンスがあれば積極的に意識してやっておくべきでしょう。\n今回は「Github転職」というテーマなので転職＝自分自身を売り込む機会と捉えて営業の例を示しています。\nすべての記事に「いかがでしょうか？～○○をお願いします」みたいに書くと、「この人の記事は宣伝だな」という印象を与えてしまうため、過度にやるのは賛否あります。\nユーザーは企業人より個人の方が多いので、フリーランスなら尚更です。\n\nこんな露骨な営業・宣伝をやらなくても、Qiitaアドベントカレンダー以外にもSNSなど集客力が高い環境で意見を出すだけでも立派なPR活動になるので、ユーザー導線は作らず品質の高いアウトプットになるように意識しましょう。\n\n## Github転職2023への抱負\nこれからの情勢によって変わるので断言しかねますが、現状だとGithub転職プロジェクトは「Githubを使った転職活動の実績を作る」という今までの方針から「集客力の高いサービスを支援する」という方針に切り替わっていくだろうなぁと思っています。\nつまり、各社サービスのプラットフォームに情報を提供する際にテンプレートを作ったり、他社でも使い回せるように資料整備をするような使い方が望ましいでしょう。\n\n### 従来のGithub転職プロジェクトの方針はダメなのか？\nダメではありません。\n場所を選ぶ必要があるということです。\n\n技術を示してスカウターやリクルーターに見えるようにしよう、という意気込みでずっとやっているpaiza転職なんかがありますが、結局のところpaizaの営業力に依存した活動しかできない、という問題点は残り続けるため、paizaのスコアを評価できる方にはPRできます。\n誤解を恐れずに言えば、paizaのスコアで評価するのが難しい方に対しては、技術力を別の方法で評価していただくか、技術力以外に必要なものがあり、これを見極めて個別対応していくのが近道です。\n\n### 転職を目的にしない場合\nGithub転職プロジェクト自体が転職を目的にしているので趣旨とは異なりますが、「登壇しないプレゼンテーション力」を磨くという意味ではGithub転職プロジェクトのノウハウは使えると思います。\nたとえば、自作システムやアプリのPRをしたい、と思う事があると思います。\nこの時に売り込む商材が「自分＝転職」か「自作」かの違いです。\n\n誤解を恐れずに言えば、エンジニアも営業を学んでおくに越したことはありません。\nただし、法人営業（IT以外）と法人営業（IT関連）では世界が違う事は理解しておくべきですし、なんならIT以外で括った法人営業も業界によって営業指針や文化が異なる事も把握しておく必要があります。\n\nなので、皆さん（これからGithub転職プロジェクトを検討する方）にとって重要なのはプロジェクトの目的ではなく、プロジェクトの背景や今日までの変遷だと考えます。\n活かせそうな部分だけ持っていってください。\n\n### 私の経験から考える、エンジニアが転職する時のベストプラクティス\nこれだけ営業を学べ、励め、という趣旨を書いておきながらこんな話をするのもなんですが、エンジニアの本分は営業ではなく、システム構築設計です。\n営業に時間を割くより、自身の技術力として不足している項目を伸ばしたりする方が有意義だと考える事もできます。\n我々世代の若い頃は情報技術もまだまだ発展途上だったので比較的悠長にできたものですが、昨今の若者はどんな分野でも今までの集合知がデータベース化されているため、新しい分野に挑戦した時の専門性の掘り下げが今まで以上に深く難しいものになっている傾向にあります。\n今ある最先端に向けて頑張っていけるモチベーションがあるうちはどんどん知識も実績も高めていって、頑張れなくなったら今までの技術力で通用する環境を探したり開拓するのが良いでしょう。\n特に新しい分野に目を向けてみれば、今まであなたがやってきた内容についてあなたより詳しい人はいない事が多いです。\n（下手すると、こういうケースのほうが報酬が高い事も往々にしてあります）\n\n中長期的に見ると、最先端の現場で頑張った方が実績も積めますし技術力も高まります。\nスペシャリストコースからジェネラリストコース（マルチタレント）に切り替えるのは簡単ですが、ジェネラリストがスペシャリストを目指すと相当な努力を要します。\nこの辺りは、ご自身のライフバランス（特に年齢）と相談して決めましょう。\n\n## 総括\n「転職活動をする」という点についてはGithubは非効率的ですが、転職活動の支援やシステム開発のノウハウを得るという意味では有効です。\n営業先で技術力の提示を求められたりする事がありますので、こういった場合に対応できるようにするのが良いでしょう。\n良くも悪くも、Githubでエンジニアをスカウトしよう、という活動をしていた黎明期と同じ状態になった印象です。\n\n## 次の記事\n- [現役エンジニア講師が「今、改めて考える」初めて勉強するプログラミング言語は何がいい？2022年最新版(4日目)](https://qiita.com/nomurasan/items/5f97870d5237f773c111)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-03T08:10:00+09:00",
        "group": null,
        "id": "885444cec8eefe37ac07",
        "likes_count": 1,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "ポートフォリオ",
                "versions": []
            },
            {
                "name": "エンジニア転職",
                "versions": []
            }
        ],
        "title": "Github転職の最新事情2022",
        "updated_at": "2022-12-05T01:43:28+09:00",
        "url": "https://qiita.com/nomurasan/items/885444cec8eefe37ac07",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 699,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    },
    {
        "rendered_body": "<p data-sourcepos=\"1:1-3:233\">※色々な事を言いますが、今回のメインテーマは「タイムパフォーマンス」です。<br>\nいわゆる「タイパ」を重視してお話します。<br>\n※受講生向けの内容にしようと思いましたが、受講生に講師やITスクールの実情を知ってもらったほうが良いような気がしたので赤裸々に書いた結果、ポエムになりました。</p>\n<h2 data-sourcepos=\"5:1-5:15\">\n<span id=\"対象読者\" class=\"fragment\"></span><a href=\"#%E5%AF%BE%E8%B1%A1%E8%AA%AD%E8%80%85\"><i class=\"fa fa-link\"></i></a>対象読者</h2>\n<ul data-sourcepos=\"6:1-9:0\">\n<li data-sourcepos=\"6:1-6:53\">これからプロになろうと考えている方</li>\n<li data-sourcepos=\"7:1-7:101\">プロになれなくても、副業でプログラミングを勉強しようと考えている方</li>\n<li data-sourcepos=\"8:1-9:0\">プログラミングで稼ぎたい方</li>\n</ul>\n<p data-sourcepos=\"10:1-11:138\">既にプロ、もしくは現場経験がある方にはあまり有益な情報はありません。<br>\nそれっぽい雰囲気をお伝えする事で、私なりに整理をしようとしている姿を観察することが出来ます。</p>\n<h2 data-sourcepos=\"13:1-13:15\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n<p data-sourcepos=\"14:1-16:105\">これは2022年12月執筆時点での意見です。<br>\nなるべく鮮度の高い情報にしたかったので、書き置きなど一切ありません。<br>\nそのため、見直しもセルフレビューも甘いかも知れませんがご容赦ください。</p>\n<p data-sourcepos=\"18:1-19:96\">また、既にエンジニアとして実務経験がある方には今更すぎるお話ばかりなので、有益な情報はありません。<br>\n「こういった考え方の人もいるんだな」という程度の情報になります。</p>\n<h3 data-sourcepos=\"21:1-21:10\">\n<span id=\"注意\" class=\"fragment\"></span><a href=\"#%E6%B3%A8%E6%84%8F\"><i class=\"fa fa-link\"></i></a>注意</h3>\n<p data-sourcepos=\"22:1-24:222\">こういった記事を書くと「いや、それはおかしい」という議論が必ず発生します。<br>\nこれはそれぞれのエンジニア毎のバックボーンや歴史があり、必ずしも一致しないからです。<br>\nつまり、究極的に言えば「市場に案件があって、将来的には勉強すればできるようになる」ので、努力をやめない限りどれからやっても結果は同じになるからです。</p>\n<p data-sourcepos=\"26:1-27:120\">具体的には、元々はデザイナーだったり営業だった方が、たとえばPHPから学んだりPythonから入ったとしても、本人が勉強を続ければゆくゆくは全ての言語を学び始める事になるからです。<br>\nなので、ここではある程度ケースバイケースを意識しながら場合分けを考えていきます。</p>\n<h2 data-sourcepos=\"29:1-29:9\">\n<span id=\"本題\" class=\"fragment\"></span><a href=\"#%E6%9C%AC%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>本題</h2>\n<p data-sourcepos=\"30:1-31:144\">「プログラミングを学ぶこと」を目標にすると、後から手戻りが発生するので「プログラミングで何をしたいのか」を決めてから、これの達成を目標にすると結果的にタイパの良い学習ができます。<br>\nコスパを考えるなら優良なサイトを探すことから、タイパを考えるなら信頼できる講師を探してください。</p>\n<h3 data-sourcepos=\"33:1-33:70\">\n<span id=\"1-プログラミングで何がしたいのかから考える\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%A7%E4%BD%95%E3%81%8C%E3%81%97%E3%81%9F%E3%81%84%E3%81%AE%E3%81%8B%E3%81%8B%E3%82%89%E8%80%83%E3%81%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>1. プログラミングで何がしたいのか？から考える</h3>\n<p data-sourcepos=\"34:1-36:435\">最もモチベーション・学習効果が高いのは「やりたい事があって、その手段としてプログラミングを学ぶ」事です。<br>\n全員が全員そうだ、とは言い切れないと思いますが、私の経験則としてほぼ全員がそうです。<br>\n【（反例）全員がやりたい事があってプログラミングを学ぶ：やりたい事はあるけど、自分がやろうとしない場合。こういう方がプログラミング（に限らず、自ら進んで）勉強する理由が分からないので、クライアントの目的達成のためにヒアリングして実現のために尽力しますがお役立ちできる事は少ないと思います…】</p>\n<p data-sourcepos=\"38:1-41:213\">この際は、言語をどうするとかどういう勉強をするとか、というのも決めやすいです。<br>\n作りたいシステム、あるいはやりたい事をメンター講師に相談してもらえると、メンター講師側も本人の状況や傾向、学習スタイルから実現可能な方法を提案する事ができます。<br>\nあえて厳しい言い方をすると、「他人の力を使ってでも課題を解決する」のは実務でも重要です。<br>\nご自身とメンター講師が合っている・合っていないというのはありますが、うまくメンター講師を使えているかどうかは改めて見直したほうが良いでしょう。</p>\n<p data-sourcepos=\"43:1-43:132\">目標が決まっていない方は、まずは以下を検討してみるところから始めてみるのも良いでしょう。</p>\n<ul data-sourcepos=\"45:1-48:0\">\n<li data-sourcepos=\"45:1-45:116\">作りたいシステムがある場合：メンター講師にシステム名やシステムのデモを見せる</li>\n<li data-sourcepos=\"46:1-46:71\">副業で稼ぎたい場合：案件サイトの傾向を分析する</li>\n<li data-sourcepos=\"47:1-48:0\">プログラミングを勉強したい：勉強したいと思うようになったきっかけを振り返ってみる</li>\n</ul>\n<h3 data-sourcepos=\"49:1-49:37\">\n<span id=\"2-学べる環境から考える\" class=\"fragment\"></span><a href=\"#2-%E5%AD%A6%E3%81%B9%E3%82%8B%E7%92%B0%E5%A2%83%E3%81%8B%E3%82%89%E8%80%83%E3%81%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2. 学べる環境から考える</h3>\n<p data-sourcepos=\"50:1-52:196\">無料で学べる環境を使う場合を想定しますが、参考にしているサイトで解説している言語を使うのが手っ取り早いです。<br>\n環境差異などを考える必要がないので、サイトを読み進めながらスムーズに学習を進められる事でしょう。<br>\nとはいえ、サーバーサイドプログラミングだと学習の前に環境構築という高い壁がそびえ立つため、万人向けという意味でJavaScriptを推奨します。</p>\n<p data-sourcepos=\"54:1-62:102\">問題は学習を進めていった先のお話です。<br>\nちょっと場面は変わりますが、プログラミングに限らず「教師が話した内容を別の場所で改めて学び直したらスッキリした」という経験があるはずです。<br>\nこれを踏まえて「別の人から同じことを教わる」という点にフォーカスします。<br>\nたとえば、子供の頃などは数学や英語など学校教科を塾や家庭教師など色々な方法で解決していく方法もあると思います。<br>\nでは、プログラミングはどうやって学ぶのか？というと、現状はプログラミングスクールが最有力になるでしょうか。<br>\nちょっと質問するだけなら色々なサービスがありますが、特にteratailなどは一般より高い質問スキルが求められるため、質問の初心者や未成年だと回答を得る前に心を折られます。<br>\nteratailが顕著な例なので取り上げましたが、teratail以外でもプログラミングの質問は非常に敷居が高いです。<br>\nそういった面で見ても、無料で質問は出来るが回答が得られない無料サービスではなく、有料でもしっかりと学習サポートを意識した回答をしてくれる講師を探しましょう。<br>\nそのため、プログラミングスクールは吟味する必要があるかもしれません。</p>\n<p data-sourcepos=\"64:1-70:210\">とはいえ、いきなりプログラミングスクールから考える事もないと思います。<br>\n無料でやるか、より安価にやる方法から試してみましょう。<br>\n無料でやるならProgateを始めとした体系的な学びや解説ができるサイトを探すところから始めましょう。<br>\nそのサイトでどんな言語を扱って解説しているかに依存はしますが、根本的な考え方（＝アルゴリズム）は同じです。<br>\n慣れないうちはライブラリがどうとか、バージョンがどうとかは一旦置いて「手元で動くものを採用する」という方針で見える部分から理解していきましょう。<br>\n慣れてきたら、エラーメッセージで検索してみて、それっぽいサイトを参考にガチャガチャやってみてください。上手くいく時と上手くいかない時がありますが、上手くいかない時は頑張りすぎないようにします。<br>\n将来的には、エラーメッセージが出てきても解決できるようになっていくので、今は焦らず解決出来るエラーメッセージを少しずつ増やしていきましょう。</p>\n<p data-sourcepos=\"72:1-72:159\">ちょっとアドバイスを入れましたが「参考にしているサイトやメンター講師の得意なものから学ぶ」という提案です。</p>\n<h3 data-sourcepos=\"74:1-74:58\">\n<span id=\"3-プログラミングで挫折経験がある場合\" class=\"fragment\"></span><a href=\"#3-%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%A7%E6%8C%AB%E6%8A%98%E7%B5%8C%E9%A8%93%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>3. プログラミングで挫折経験がある場合</h3>\n<p data-sourcepos=\"75:1-77:156\">たとえばWordPressのような事を、WordPress以外でやってみる方法を考えていきます。<br>\nWordPressは高機能であるが故に、はじめて勉強するフレームワークとしては「何をしたら良いか分からない」という状況に陥りがちです。<br>\nWordPressの開発経験がある方なら「初心者はまずプラグインを作るのがいいんじゃない？」と思うかも知れませんが、</p>\n<ul data-sourcepos=\"79:1-82:0\">\n<li data-sourcepos=\"79:1-79:44\">プラグインをどうやって作る？</li>\n<li data-sourcepos=\"80:1-80:35\">プラグインで何を作る？</li>\n<li data-sourcepos=\"81:1-82:0\">プラグインをどうやって使う？</li>\n</ul>\n<p data-sourcepos=\"83:1-85:213\">など、動くものを作るためにWordPressの仕組みを理解する必要があるなど、初学者への学習コストが高すぎます。<br>\nある程度開発経験があってOSSのドキュメントを読めるレベルならプラグイン開発は有意義ですが、ただのWebアプリ作成経験もない状態でやることではないです。<br>\n（残念ながら、WordPressを推すカリキュラムでいきなりプラグインを作る内容になっているためにプログラミングに苦手意識を持たれてしまう例もありました）</p>\n<p data-sourcepos=\"87:1-90:171\">というケースは決して少なくないため、専門学校やITスクール出身者の少なくない数がこういった挫折経験者だったというのは割と多いかも知れません。<br>\nなんなら、これからはプログラミング教育を学校で受けてくる未来の新人たちも多くなるでしょう。<br>\n今の時点でも「専門学校や大学などでプログラミングを学ぶ機会があった」方がどんどん増えている傾向を感じています。<br>\nが、実践として使う機会がなかなか見られず、結果として「よく分からない何か」になってしまったのではないかと思います。</p>\n<p data-sourcepos=\"92:1-94:188\">こういった背景があるため、前向きに言語選択が出来れば強いのですが、言語自体に苦手意識を持っている場合はメンター講師が得意な言語に乗り換えてしまうという手があります。<br>\n大体はWeb系になるので、WordPress＝PHPを選択する事が多いのではないでしょうか。<br>\nせっかくWeb系を学んできたので、同じくWeb系でもサーバー側(PHPなど)ではなくクライアント側(JavaScript)をメインにやってみるのも一手です。</p>\n<h3 data-sourcepos=\"96:1-96:31\">\n<span id=\"4-トレンドから選ぶ\" class=\"fragment\"></span><a href=\"#4-%E3%83%88%E3%83%AC%E3%83%B3%E3%83%89%E3%81%8B%E3%82%89%E9%81%B8%E3%81%B6\"><i class=\"fa fa-link\"></i></a>4. トレンドから選ぶ</h3>\n<p data-sourcepos=\"97:1-99:201\">若い初学者の方に多い印象があります。<br>\n時間をムダに使いたくない方が多い昨今なので、トレンドを重視する気持ちはすごく共感できます。<br>\n私の印象ですがAI開発でよく使われているPythonと、Web系でほぼ何でもできて痒いところに手が届くJavaScript、後はその時々の言語になるかと思います。</p>\n<p data-sourcepos=\"101:1-104:267\">このタイプの方には、今までのパターンと比べるとアドバイスできる内容があまりありません。<br>\n「なぜプログラミングを学ぶのか？」がハッキリしていない事が多いからです。<br>\nもちろん、今までのパターンでも「なぜ～？」がハッキリしていない方もいます。<br>\nこういった場合は同じくヒアリングしますが、本人なりにやりたい事や、やりたい事ではないけどこうなりたい（副業で稼ぎたい等）イメージがハッキリしている様子が見られる傾向がありました。</p>\n<p data-sourcepos=\"106:1-106:213\">プログラミングを学ぶ理由が明確ではないと感じた方は、まずは目的を明確にしてから、目的を達成するための勉強方法や言語選択をされると良いでしょう。</p>\n<h2 data-sourcepos=\"108:1-108:9\">\n<span id=\"結論\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E8%AB%96\"><i class=\"fa fa-link\"></i></a>結論</h2>\n<p data-sourcepos=\"109:1-112:129\">勉強は目的ありきです。<br>\n学校の勉強の日々も目標がハッキリしていれば学習効果が高まりますし、目標が「テストで赤点を回避する」などであれば、そこそこに頑張るはずです。<br>\n特に意識していないなら、もしかしたら赤点になってしまっているかもしれないですし、要領の良い方だと点は取れますが本質を理解していないのではないでしょうか。<br>\n（特に、目標を赤点回避にしている方は、とりあえず詰め込めば出来てしまう事があります…）</p>\n<h2 data-sourcepos=\"115:1-115:27\">\n<span id=\"おまけ講師向け\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%81%BE%E3%81%91%E8%AC%9B%E5%B8%AB%E5%90%91%E3%81%91\"><i class=\"fa fa-link\"></i></a>おまけ：講師向け</h2>\n<p data-sourcepos=\"116:1-118:84\">これは対象読者から外れる話ですが、対象読者の方々も認識してもらった方が良さそうなので、一緒に書いておきます。<br>\n念のため、対象読者の方に言及しておくと「プログラミング言語は覚えたいものからはじめると良い」ので、講師としてはどういう言語でも初学者向けなら比較的対応できます。<br>\nその前提で、掲題のテーマからは外れますがお話を続けます。</p>\n<p data-sourcepos=\"121:1-121:137\">3.の挫折経験者向けへの対応は、プログラミングを知らない方への対応より苦慮される事が多いです。</p>\n<ul data-sourcepos=\"123:1-125:0\">\n<li data-sourcepos=\"123:1-123:152\">受講生は自分の理解が浅い事を認識しているが、前回どうやって説明されて理解できなかったのかが不明である</li>\n<li data-sourcepos=\"124:1-125:0\">先入観や既存の知識との乖離または修正</li>\n</ul>\n<p data-sourcepos=\"126:1-128:177\">（≒間違っているかどうかは不明のため、要確認）というステップを挟んでから、プログラミングを知らない方と同じ事を丁寧に解説する必要があるためです。<br>\nこういったケースの背景を分析していきます。<br>\nなお、これらは全て俺データによりますが、こういった体験談・現場でのトラブルを集積する環境はあった方が絶対にいいですね。</p>\n<h3 data-sourcepos=\"130:1-130:82\">\n<span id=\"プログラミングがより身近になることで変わる教育環境\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%8C%E3%82%88%E3%82%8A%E8%BA%AB%E8%BF%91%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%93%E3%81%A8%E3%81%A7%E5%A4%89%E3%82%8F%E3%82%8B%E6%95%99%E8%82%B2%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>プログラミングがより身近になることで、変わる教育環境</h3>\n<p data-sourcepos=\"131:1-133:135\">昨今の受講生はどこかしらで「プログラミング」に触れているため、プログラミングに対して苦手意識があってもおかしくありません。<br>\nよりイメージを鮮明にするなら、今までプログラミングは「未知の領域」から、英語や数学と同じカテゴリになります。<br>\n（よく考えると、学校で学んだ知識や内容をそのまま業務に使えるようになるのはすごい事ですね）</p>\n<p data-sourcepos=\"135:1-137:276\">そうなると、今後のプログラミングの位置づけは「学校で無理矢理やらされた事を再度学び直す」という事になる事が予想されるので、入社試験にプログラミング実技が追加される形になってくるかとは思います。<br>\nつまり、現在の英語塾（英会話スクール）と同じ位置づけになってくるため、ITスクールの需要はますます高まるのではないか、と個人的に思います。<br>\nそのうち、学生向け・社会人向けのプログラミングスクール（コース）で分かれるかもしれませんし、学校教科という位置づけならいわゆる家庭教師の要件にプログラミングが追加されるかも知れません。</p>\n<h3 data-sourcepos=\"139:1-139:49\">\n<span id=\"学校教育としてのプログラミング\" class=\"fragment\"></span><a href=\"#%E5%AD%A6%E6%A0%A1%E6%95%99%E8%82%B2%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0\"><i class=\"fa fa-link\"></i></a>学校教育としてのプログラミング</h3>\n<p data-sourcepos=\"140:1-144:207\">現状のITスクールで他の講師から教わる場合は、スクール側の体制やコース予算だと講師は一人しかいない事が多いので、考えが偏る可能性は否めません。<br>\n個人で入るスクール（1on1型：複数の講師に教わりやすい）とグループ指導型（一人の講師に教わる）では、初学者は後者で１ヶ月など慣れてきたら前者の学習効果が高くなる傾向があります。<br>\n自主性が備わることと、ある程度学んできた中で自分なりのプログラミングへの解釈ができるようになるからです。<br>\nとはいえ、<strong>教材に書いてある内容を追いかけてきただけなので自分で調べ物をして解決方法を考える事ができるようになる段階ではありません。</strong><br>\n一般に法人向けの教育パッケージはこの点を留意してグループ演習の機会を作るようにして、受講生間で教え合うようにカリキュラムが組まれています。</p>\n<p data-sourcepos=\"146:1-147:270\">こういった事情については私が個人的、そしてITスクール、法人の新卒研修を通じて総合的に得た知見です。<br>\n全てがこのケースに当たるとは思いませんが、学校教育でのプログラミングが従来のような座学＋筆記テスト（オンライン）を重視するようでは、教育環境を見直す事を検討する必要もありそうです。</p>\n<h3 data-sourcepos=\"149:1-149:55\">\n<span id=\"複数の講師を用意する本当の意図\" class=\"fragment\"></span><a href=\"#%E8%A4%87%E6%95%B0%E3%81%AE%E8%AC%9B%E5%B8%AB%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B%E6%9C%AC%E5%BD%93%E3%81%AE%E6%84%8F%E5%9B%B3\"><i class=\"fa fa-link\"></i></a>「複数の講師を用意する」本当の意図</h3>\n<p data-sourcepos=\"150:1-160:162\">ここでは、ITスクール事業でよくハマりがちなクラス・カプセル化・継承・多態性について解説する際、ある講師が解説したところ70%の受講生が理解できたとします。<br>\nおっと、受講前から既に習得していた場合はこの数値から除きます。<br>\n上記では簡単に70%としていますが、実際は70%の内訳はもっと複雑です。<br>\nたとえば、40%は講師の解説するAパターンで理解したとします。講師は手応えを感じなかったので、念のためBパターンでも解説し、20%も理解できるようになったとします。<br>\nAパターンとBパターンの共通項をAB'パターンとして解説したり、新たにCパターンでも解説したところ、さらに10%が理解出来たとします。<br>\nその後は色々やってみるのですが、30%はそのまま理解できずに後で時間を使って受動型から能動型（受休憩時間での質問なり、業後のそれぞれの自習なり、場合によっては実務で使ってから）で習得できるようになったとします。<br>\n最終的に全員ができるようになるのですが、研修という意味では30％は取りこぼします。<br>\nこれがスクール事業として許容できる理解度・達成度かは別として、品質の良い教育と言い切るには不十分な数値だと意識があれば（少なくとも現場講師としては課題意識を持つはず）対策や事後策は講じるでしょう。<br>\nこれにはもちろん、教える講師の質は関係しますが、講師の質をすぐに上げるのは難しいので、講師に頼らずに学習効果を上げる方法もあります。<br>\nその一つが大体のカリキュラムの最後に組まれる「チーム・総合開発演習」です。<br>\nチーム総合開発演習自体も効果的な進め方はありますが、ここではチームメンバーが講師的なポジションになることで、</p>\n<ul data-sourcepos=\"162:1-164:0\">\n<li data-sourcepos=\"162:1-162:71\">教えるために学び直す（または、一緒に勉強する）</li>\n<li data-sourcepos=\"163:1-164:0\">良い教わり方（質問の仕方）を試行錯誤する</li>\n</ul>\n<p data-sourcepos=\"165:1-166:185\">事により、擬似的に講師の数を増やすことが出来ます。<br>\n残りの30％と、もしかしたらペーパーテスト（オンライン）で理解したつもりでも理解できていなかった項目の洗い出しが期待できます。</p>\n<p data-sourcepos=\"168:1-169:270\">なお、開発演習の時間を削って座学を追加するのは、座学の知識を実践する時間を削減する事なので非推奨です。<br>\n営業的には「予備日」とされている事が多いため、カリキュラムのカスタマイズや進捗状況によって削減しやすいのですが、受講生が試行錯誤する時間が少なくなる＝理解度を下げる要因になります。</p>\n<h3 data-sourcepos=\"171:1-171:64\">\n<span id=\"受講生にとって一番良い学びの環境を考える\" class=\"fragment\"></span><a href=\"#%E5%8F%97%E8%AC%9B%E7%94%9F%E3%81%AB%E3%81%A8%E3%81%A3%E3%81%A6%E4%B8%80%E7%95%AA%E8%89%AF%E3%81%84%E5%AD%A6%E3%81%B3%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E8%80%83%E3%81%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>受講生にとって一番良い学びの環境を考える</h3>\n<p data-sourcepos=\"172:1-175:237\">本稿では４タイプについて触れましたが、実際はこんなにスッキリ分かれたりはしないです。<br>\n「色々な経緯があってプログラミングを学んでみよう！」となった方が1on1なのかグループ講習なのかは分かりませんが、プログラミングを学びたいと思って縁があったので、講師ご各位には最大限良い環境を作る事を考えてくださっているとは思います。<br>\nとはいえ、講師だからといって全てをおんぶにだっこで受講生の要望を100%満たすのではなく、自力でできそうな部分は自分でやってみる「多少不便・努力が必要な状態」を適度に作るのも重要です。<br>\n不便という表現は面倒事を与える印象を与えてしまいますが、不便なものを便利に効率よく使えるようにする方法も自ら探して学び取っていく事を指導するのが良いでしょう。</p>\n<h2 data-sourcepos=\"177:1-177:15\">\n<span id=\"次の記事\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>次の記事</h2>\n<ul data-sourcepos=\"178:1-179:88\">\n<li data-sourcepos=\"178:1-178:73\"><a href=\"#\">最もシンプルな記事の書き方・考え方紹介(5日目)</a></li>\n<li data-sourcepos=\"179:1-179:88\"><a href=\"https://qiita.com/advent-calendar/2022/oreno_nomurasan2022\">カレンダーページ</a></li>\n</ul>\n",
        "body": "※色々な事を言いますが、今回のメインテーマは「タイムパフォーマンス」です。\nいわゆる「タイパ」を重視してお話します。\n※受講生向けの内容にしようと思いましたが、受講生に講師やITスクールの実情を知ってもらったほうが良いような気がしたので赤裸々に書いた結果、ポエムになりました。\n\n## 対象読者\n- これからプロになろうと考えている方\n- プロになれなくても、副業でプログラミングを勉強しようと考えている方\n- プログラミングで稼ぎたい方\n\n既にプロ、もしくは現場経験がある方にはあまり有益な情報はありません。\nそれっぽい雰囲気をお伝えする事で、私なりに整理をしようとしている姿を観察することが出来ます。\n\n## はじめに\nこれは2022年12月執筆時点での意見です。\nなるべく鮮度の高い情報にしたかったので、書き置きなど一切ありません。\nそのため、見直しもセルフレビューも甘いかも知れませんがご容赦ください。\n\nまた、既にエンジニアとして実務経験がある方には今更すぎるお話ばかりなので、有益な情報はありません。\n「こういった考え方の人もいるんだな」という程度の情報になります。\n\n### 注意\nこういった記事を書くと「いや、それはおかしい」という議論が必ず発生します。\nこれはそれぞれのエンジニア毎のバックボーンや歴史があり、必ずしも一致しないからです。\nつまり、究極的に言えば「市場に案件があって、将来的には勉強すればできるようになる」ので、努力をやめない限りどれからやっても結果は同じになるからです。\n\n具体的には、元々はデザイナーだったり営業だった方が、たとえばPHPから学んだりPythonから入ったとしても、本人が勉強を続ければゆくゆくは全ての言語を学び始める事になるからです。\nなので、ここではある程度ケースバイケースを意識しながら場合分けを考えていきます。\n\n## 本題\n「プログラミングを学ぶこと」を目標にすると、後から手戻りが発生するので「プログラミングで何をしたいのか」を決めてから、これの達成を目標にすると結果的にタイパの良い学習ができます。\nコスパを考えるなら優良なサイトを探すことから、タイパを考えるなら信頼できる講師を探してください。\n\n### 1. プログラミングで何がしたいのか？から考える\n最もモチベーション・学習効果が高いのは「やりたい事があって、その手段としてプログラミングを学ぶ」事です。\n全員が全員そうだ、とは言い切れないと思いますが、私の経験則としてほぼ全員がそうです。\n【（反例）全員がやりたい事があってプログラミングを学ぶ：やりたい事はあるけど、自分がやろうとしない場合。こういう方がプログラミング（に限らず、自ら進んで）勉強する理由が分からないので、クライアントの目的達成のためにヒアリングして実現のために尽力しますがお役立ちできる事は少ないと思います…】\n\nこの際は、言語をどうするとかどういう勉強をするとか、というのも決めやすいです。\n作りたいシステム、あるいはやりたい事をメンター講師に相談してもらえると、メンター講師側も本人の状況や傾向、学習スタイルから実現可能な方法を提案する事ができます。\nあえて厳しい言い方をすると、「他人の力を使ってでも課題を解決する」のは実務でも重要です。\nご自身とメンター講師が合っている・合っていないというのはありますが、うまくメンター講師を使えているかどうかは改めて見直したほうが良いでしょう。\n\n目標が決まっていない方は、まずは以下を検討してみるところから始めてみるのも良いでしょう。\n\n- 作りたいシステムがある場合：メンター講師にシステム名やシステムのデモを見せる\n- 副業で稼ぎたい場合：案件サイトの傾向を分析する\n- プログラミングを勉強したい：勉強したいと思うようになったきっかけを振り返ってみる\n\n### 2. 学べる環境から考える\n無料で学べる環境を使う場合を想定しますが、参考にしているサイトで解説している言語を使うのが手っ取り早いです。\n環境差異などを考える必要がないので、サイトを読み進めながらスムーズに学習を進められる事でしょう。\nとはいえ、サーバーサイドプログラミングだと学習の前に環境構築という高い壁がそびえ立つため、万人向けという意味でJavaScriptを推奨します。\n\n問題は学習を進めていった先のお話です。\nちょっと場面は変わりますが、プログラミングに限らず「教師が話した内容を別の場所で改めて学び直したらスッキリした」という経験があるはずです。\nこれを踏まえて「別の人から同じことを教わる」という点にフォーカスします。\nたとえば、子供の頃などは数学や英語など学校教科を塾や家庭教師など色々な方法で解決していく方法もあると思います。\nでは、プログラミングはどうやって学ぶのか？というと、現状はプログラミングスクールが最有力になるでしょうか。\nちょっと質問するだけなら色々なサービスがありますが、特にteratailなどは一般より高い質問スキルが求められるため、質問の初心者や未成年だと回答を得る前に心を折られます。\nteratailが顕著な例なので取り上げましたが、teratail以外でもプログラミングの質問は非常に敷居が高いです。\nそういった面で見ても、無料で質問は出来るが回答が得られない無料サービスではなく、有料でもしっかりと学習サポートを意識した回答をしてくれる講師を探しましょう。\nそのため、プログラミングスクールは吟味する必要があるかもしれません。\n\nとはいえ、いきなりプログラミングスクールから考える事もないと思います。\n無料でやるか、より安価にやる方法から試してみましょう。\n無料でやるならProgateを始めとした体系的な学びや解説ができるサイトを探すところから始めましょう。\nそのサイトでどんな言語を扱って解説しているかに依存はしますが、根本的な考え方（＝アルゴリズム）は同じです。\n慣れないうちはライブラリがどうとか、バージョンがどうとかは一旦置いて「手元で動くものを採用する」という方針で見える部分から理解していきましょう。\n慣れてきたら、エラーメッセージで検索してみて、それっぽいサイトを参考にガチャガチャやってみてください。上手くいく時と上手くいかない時がありますが、上手くいかない時は頑張りすぎないようにします。\n将来的には、エラーメッセージが出てきても解決できるようになっていくので、今は焦らず解決出来るエラーメッセージを少しずつ増やしていきましょう。\n\nちょっとアドバイスを入れましたが「参考にしているサイトやメンター講師の得意なものから学ぶ」という提案です。\n\n### 3. プログラミングで挫折経験がある場合\nたとえばWordPressのような事を、WordPress以外でやってみる方法を考えていきます。\nWordPressは高機能であるが故に、はじめて勉強するフレームワークとしては「何をしたら良いか分からない」という状況に陥りがちです。\nWordPressの開発経験がある方なら「初心者はまずプラグインを作るのがいいんじゃない？」と思うかも知れませんが、\n\n- プラグインをどうやって作る？\n- プラグインで何を作る？\n- プラグインをどうやって使う？\n\nなど、動くものを作るためにWordPressの仕組みを理解する必要があるなど、初学者への学習コストが高すぎます。\nある程度開発経験があってOSSのドキュメントを読めるレベルならプラグイン開発は有意義ですが、ただのWebアプリ作成経験もない状態でやることではないです。\n（残念ながら、WordPressを推すカリキュラムでいきなりプラグインを作る内容になっているためにプログラミングに苦手意識を持たれてしまう例もありました）\n\nというケースは決して少なくないため、専門学校やITスクール出身者の少なくない数がこういった挫折経験者だったというのは割と多いかも知れません。\nなんなら、これからはプログラミング教育を学校で受けてくる未来の新人たちも多くなるでしょう。\n今の時点でも「専門学校や大学などでプログラミングを学ぶ機会があった」方がどんどん増えている傾向を感じています。\nが、実践として使う機会がなかなか見られず、結果として「よく分からない何か」になってしまったのではないかと思います。\n\nこういった背景があるため、前向きに言語選択が出来れば強いのですが、言語自体に苦手意識を持っている場合はメンター講師が得意な言語に乗り換えてしまうという手があります。\n大体はWeb系になるので、WordPress＝PHPを選択する事が多いのではないでしょうか。\nせっかくWeb系を学んできたので、同じくWeb系でもサーバー側(PHPなど)ではなくクライアント側(JavaScript)をメインにやってみるのも一手です。\n\n### 4. トレンドから選ぶ\n若い初学者の方に多い印象があります。\n時間をムダに使いたくない方が多い昨今なので、トレンドを重視する気持ちはすごく共感できます。\n私の印象ですがAI開発でよく使われているPythonと、Web系でほぼ何でもできて痒いところに手が届くJavaScript、後はその時々の言語になるかと思います。\n\nこのタイプの方には、今までのパターンと比べるとアドバイスできる内容があまりありません。\n「なぜプログラミングを学ぶのか？」がハッキリしていない事が多いからです。\nもちろん、今までのパターンでも「なぜ～？」がハッキリしていない方もいます。\nこういった場合は同じくヒアリングしますが、本人なりにやりたい事や、やりたい事ではないけどこうなりたい（副業で稼ぎたい等）イメージがハッキリしている様子が見られる傾向がありました。\n\nプログラミングを学ぶ理由が明確ではないと感じた方は、まずは目的を明確にしてから、目的を達成するための勉強方法や言語選択をされると良いでしょう。\n\n## 結論\n勉強は目的ありきです。\n学校の勉強の日々も目標がハッキリしていれば学習効果が高まりますし、目標が「テストで赤点を回避する」などであれば、そこそこに頑張るはずです。\n特に意識していないなら、もしかしたら赤点になってしまっているかもしれないですし、要領の良い方だと点は取れますが本質を理解していないのではないでしょうか。\n（特に、目標を赤点回避にしている方は、とりあえず詰め込めば出来てしまう事があります…）\n\n\n## おまけ：講師向け\nこれは対象読者から外れる話ですが、対象読者の方々も認識してもらった方が良さそうなので、一緒に書いておきます。\n念のため、対象読者の方に言及しておくと「プログラミング言語は覚えたいものからはじめると良い」ので、講師としてはどういう言語でも初学者向けなら比較的対応できます。\nその前提で、掲題のテーマからは外れますがお話を続けます。\n\n\n3.の挫折経験者向けへの対応は、プログラミングを知らない方への対応より苦慮される事が多いです。\n\n- 受講生は自分の理解が浅い事を認識しているが、前回どうやって説明されて理解できなかったのかが不明である\n- 先入観や既存の知識との乖離または修正\n\n（≒間違っているかどうかは不明のため、要確認）というステップを挟んでから、プログラミングを知らない方と同じ事を丁寧に解説する必要があるためです。\nこういったケースの背景を分析していきます。\nなお、これらは全て俺データによりますが、こういった体験談・現場でのトラブルを集積する環境はあった方が絶対にいいですね。\n\n### プログラミングがより身近になることで、変わる教育環境\n昨今の受講生はどこかしらで「プログラミング」に触れているため、プログラミングに対して苦手意識があってもおかしくありません。\nよりイメージを鮮明にするなら、今までプログラミングは「未知の領域」から、英語や数学と同じカテゴリになります。\n（よく考えると、学校で学んだ知識や内容をそのまま業務に使えるようになるのはすごい事ですね）\n\nそうなると、今後のプログラミングの位置づけは「学校で無理矢理やらされた事を再度学び直す」という事になる事が予想されるので、入社試験にプログラミング実技が追加される形になってくるかとは思います。\nつまり、現在の英語塾（英会話スクール）と同じ位置づけになってくるため、ITスクールの需要はますます高まるのではないか、と個人的に思います。\nそのうち、学生向け・社会人向けのプログラミングスクール（コース）で分かれるかもしれませんし、学校教科という位置づけならいわゆる家庭教師の要件にプログラミングが追加されるかも知れません。\n\n### 学校教育としてのプログラミング\n現状のITスクールで他の講師から教わる場合は、スクール側の体制やコース予算だと講師は一人しかいない事が多いので、考えが偏る可能性は否めません。\n個人で入るスクール（1on1型：複数の講師に教わりやすい）とグループ指導型（一人の講師に教わる）では、初学者は後者で１ヶ月など慣れてきたら前者の学習効果が高くなる傾向があります。\n自主性が備わることと、ある程度学んできた中で自分なりのプログラミングへの解釈ができるようになるからです。\nとはいえ、**教材に書いてある内容を追いかけてきただけなので自分で調べ物をして解決方法を考える事ができるようになる段階ではありません。**\n一般に法人向けの教育パッケージはこの点を留意してグループ演習の機会を作るようにして、受講生間で教え合うようにカリキュラムが組まれています。\n\nこういった事情については私が個人的、そしてITスクール、法人の新卒研修を通じて総合的に得た知見です。\n全てがこのケースに当たるとは思いませんが、学校教育でのプログラミングが従来のような座学＋筆記テスト（オンライン）を重視するようでは、教育環境を見直す事を検討する必要もありそうです。\n\n### 「複数の講師を用意する」本当の意図\nここでは、ITスクール事業でよくハマりがちなクラス・カプセル化・継承・多態性について解説する際、ある講師が解説したところ70%の受講生が理解できたとします。\nおっと、受講前から既に習得していた場合はこの数値から除きます。\n上記では簡単に70%としていますが、実際は70%の内訳はもっと複雑です。\nたとえば、40%は講師の解説するAパターンで理解したとします。講師は手応えを感じなかったので、念のためBパターンでも解説し、20%も理解できるようになったとします。\nAパターンとBパターンの共通項をAB'パターンとして解説したり、新たにCパターンでも解説したところ、さらに10%が理解出来たとします。\nその後は色々やってみるのですが、30%はそのまま理解できずに後で時間を使って受動型から能動型（受休憩時間での質問なり、業後のそれぞれの自習なり、場合によっては実務で使ってから）で習得できるようになったとします。\n最終的に全員ができるようになるのですが、研修という意味では30％は取りこぼします。\nこれがスクール事業として許容できる理解度・達成度かは別として、品質の良い教育と言い切るには不十分な数値だと意識があれば（少なくとも現場講師としては課題意識を持つはず）対策や事後策は講じるでしょう。\nこれにはもちろん、教える講師の質は関係しますが、講師の質をすぐに上げるのは難しいので、講師に頼らずに学習効果を上げる方法もあります。\nその一つが大体のカリキュラムの最後に組まれる「チーム・総合開発演習」です。\nチーム総合開発演習自体も効果的な進め方はありますが、ここではチームメンバーが講師的なポジションになることで、\n\n- 教えるために学び直す（または、一緒に勉強する）\n- 良い教わり方（質問の仕方）を試行錯誤する\n\n事により、擬似的に講師の数を増やすことが出来ます。\n残りの30％と、もしかしたらペーパーテスト（オンライン）で理解したつもりでも理解できていなかった項目の洗い出しが期待できます。\n\nなお、開発演習の時間を削って座学を追加するのは、座学の知識を実践する時間を削減する事なので非推奨です。\n営業的には「予備日」とされている事が多いため、カリキュラムのカスタマイズや進捗状況によって削減しやすいのですが、受講生が試行錯誤する時間が少なくなる＝理解度を下げる要因になります。\n\n### 受講生にとって一番良い学びの環境を考える\n本稿では４タイプについて触れましたが、実際はこんなにスッキリ分かれたりはしないです。\n「色々な経緯があってプログラミングを学んでみよう！」となった方が1on1なのかグループ講習なのかは分かりませんが、プログラミングを学びたいと思って縁があったので、講師ご各位には最大限良い環境を作る事を考えてくださっているとは思います。\nとはいえ、講師だからといって全てをおんぶにだっこで受講生の要望を100%満たすのではなく、自力でできそうな部分は自分でやってみる「多少不便・努力が必要な状態」を適度に作るのも重要です。\n不便という表現は面倒事を与える印象を与えてしまいますが、不便なものを便利に効率よく使えるようにする方法も自ら探して学び取っていく事を指導するのが良いでしょう。\n\n## 次の記事\n- [最もシンプルな記事の書き方・考え方紹介(5日目)](#)\n- [カレンダーページ](https://qiita.com/advent-calendar/2022/oreno_nomurasan2022)\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2022-12-02T15:47:09+09:00",
        "group": null,
        "id": "5f97870d5237f773c111",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "stocks_count": 0,
        "tags": [
            {
                "name": "プログラミング初心者",
                "versions": []
            }
        ],
        "title": "現役エンジニア講師が「今、改めて考える」初めて勉強するプログラミング言語は何がいい？2022年最新版",
        "updated_at": "2022-12-05T01:45:02+09:00",
        "url": "https://qiita.com/nomurasan/items/5f97870d5237f773c111",
        "user": {
            "description": "ブラック企業を渡り歩いてきたプログラマーがより生きやすい世界を作るため、Githubスカウト就活・転職プロジェクト2023を発足して頑張る現役エンジニア兼IT講師です。\r\n\r\nコメントはQiita他SNSも含め、有償サポーターを優先するため原則非対応です。\r\n案件のご相談は下記サイトをご活用ください。\r\n\r\n記事等は私個人の考察で著作権は放棄しておらず、引用元の記載がない転載は認めません。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 8,
            "github_login_name": "shimajima-eiji",
            "id": "nomurasan",
            "items_count": 112,
            "linkedin_id": "nomurasan",
            "location": "Tokyo Japan",
            "name": "ごろう(Goro) のむら屋(Nomura-ya)",
            "organization": "free engineer",
            "permanent_id": 122800,
            "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122800/profile-images/1594102534",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": "https://www.wantedly.com/id/nomuraya"
        },
        "page_views_count": 203,
        "team_membership": null,
        "organization_url_name": null,
        "slide": false
    }
]